<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[MobileDevTisbi]]></title><description><![CDATA[Obsidian digital garden]]></description><link>http://github.com/dylang/node-rss</link><image><url>site-lib/media/favicon.png</url><title>MobileDevTisbi</title><link/></image><generator>Webpage HTML Export plugin for Obsidian</generator><lastBuildDate>Thu, 25 Sep 2025 05:25:56 GMT</lastBuildDate><atom:link href="site-lib/rss.xml" rel="self" type="application/rss+xml"/><pubDate>Thu, 25 Sep 2025 05:25:53 GMT</pubDate><ttl>60</ttl><dc:creator/><item><title><![CDATA[Практика №5. Использование ветвления.]]></title><description><![CDATA[В рамках этого задания вам необходимо модернизировать скрипт task5.js, который должен запускаться при помощи Node.js. Задание обязано быть опубликовано в существующем приватном репозитории организации GitHub с названием Группа_Фамилия_task-3-7.task5.jsconst lower = -20;
const upper = 100;
const threshold = 30;
let a = Math.floor(Math.random() * (upper-lower+1)) + lower; // Пока не обращаем внимания, тут будет случайное число от -20 до 100
let greek = Math.floor(Math.random() * 11); // от 0 до 10 console.log("Текущее значение переменной a - "+a); // Менять код ниже // Менять код ниже
Необходимо выполнить все три части. Для каждой части необходимо использовать разные методы ветвления.Создайте переменную partOne. partOne должен принять значение в зависимости от условия:
Если a меньше threshold - это полный диапазон чисел от lower к upper (например в этом примере это должно быть число 120)
Если a больше - это произведение a и threshold
Если они равны - то это должна быть строчка "Вам невероятно повезло!"
Во всех случаях необходимо вывести в консоль следующее:
Новое значение partOne
По какому условию оно прошло
Какая вероятность того что оно могло попасть в это условие
Вывести в консоль значение greek в греческой записи (1 - I, 2 - II, 5 - V)Вывести в консоль является ли значение a четным или нечетным.На выполнение выделяется 2 практических пары.
Градация баллов после дедлайна: 1 пара: 50%
2 пара: 25%
3 пара: 0%
]]></description><link>задания/секция-1.-javascript/практика-№5.-использование-ветвления..html</link><guid isPermaLink="false">Задания/Секция 1. JavaScript/Практика №5. Использование ветвления..md</guid><pubDate>Thu, 25 Sep 2025 05:25:11 GMT</pubDate></item><item><title><![CDATA[Практика №4. Преобразование типов]]></title><description><![CDATA[В рамках этого задания вам необходимо модернизировать скрипт task4.js, который должен запускаться при помощи Node.js. Задание обязано быть опубликовано в существующем приватном репозитории организации GitHub с названием Группа_Фамилия_task-3-7.task4.jsconst booleanValue = false;
const numberValue = 20.20;
const stringValue = "30"; // Менять код ниже
Вам необходимо преобразовать значения переменных следующим образом: booleanValue — преобразовать в строку. numberValue — преобразовать в целое число, округлив в меньшую сторону (вниз). stringValue — преобразовать в число (числовой тип). После преобразования выведите в консоль исходное и преобразованное значение каждой переменной, а также тип данных каждого результата (используйте typeof). На выполнение выделяется 1 практическая пара.
Градация баллов после дедлайна: 1 пара: 0%
]]></description><link>задания/секция-1.-javascript/практика-№4.-преобразование-типов.html</link><guid isPermaLink="false">Задания/Секция 1. JavaScript/Практика №4. Преобразование типов.md</guid><pubDate>Thu, 25 Sep 2025 05:20:20 GMT</pubDate></item><item><title><![CDATA[Тема №10. Область видимости в JavaScript]]></title><description><![CDATA[В этой теме вы изучите область видимости переменных — механизм, определяющий, где в коде доступны объявленные переменные и функции. Поймёте разницу между глобальной, функциональной и блочной областью видимости, а также как это влияет на структуру и надёжность кода. Это ключевое понимание для предотвращения ошибок при работе с переменными в любых приложениях, включая мобильные.
<a data-href="Что такое область видимости" href="материалы/подтемы/секция-1.-javascript/тема-№10/что-такое-область-видимости.html" class="internal-link" target="_self" rel="noopener nofollow">Что такое область видимости</a>
<br><a data-href="Глобальная область видимости" href="материалы/подтемы/секция-1.-javascript/тема-№10/глобальная-область-видимости.html" class="internal-link" target="_self" rel="noopener nofollow">Глобальная область видимости</a>
<br><a data-href="Функциональная область видимости" href="материалы/подтемы/секция-1.-javascript/тема-№10/функциональная-область-видимости.html" class="internal-link" target="_self" rel="noopener nofollow">Функциональная область видимости</a>
<br><a data-href="Блочная область видимости" href="материалы/подтемы/секция-1.-javascript/тема-№10/блочная-область-видимости.html" class="internal-link" target="_self" rel="noopener nofollow">Блочная область видимости</a>
<br><a data-href="Вложенность областей видимости" href="материалы/подтемы/секция-1.-javascript/тема-№10/вложенность-областей-видимости.html" class="internal-link" target="_self" rel="noopener nofollow">Вложенность областей видимости</a>
<br><a data-href="Замыкания" href="материалы/подтемы/секция-1.-javascript/тема-№10/замыкания.html" class="internal-link" target="_self" rel="noopener nofollow">Замыкания</a>
<br><a data-href="Практические последствия (var)" href="материалы/подтемы/секция-1.-javascript/тема-№10/практические-последствия-(var).html" class="internal-link" target="_self" rel="noopener nofollow">Практические последствия (var)</a>
(Пусто)<br><a data-href="Тема №11. Массивы и объекты в JavaScript" href=".html" class="internal-link" target="_self" rel="noopener nofollow">Тема №11. Массивы и объекты в JavaScript</a>]]></description><link>лекции/секция-1.-javascript/тема-№10.-область-видимости-в-javascript.html</link><guid isPermaLink="false">Лекции/Секция 1. JavaScript/Тема №10. Область видимости в JavaScript.md</guid><pubDate>Thu, 25 Sep 2025 05:11:33 GMT</pubDate></item><item><title><![CDATA[Практические последствия (var)]]></title><description><![CDATA[var устарел, потому что его поведение непредсказуемо и ведёт к ошибкам, которые сложно отловить. Нет блочной области видимости
Переменные var видны во всей функции, даже если объявлены внутри if или for:
function test() { if (true) { var x = 10; } console.log(x); // 10 — не ошибка, хотя x объявлена внутри if
} Это нарушает ожидания: переменная должна быть локальной для блока, но var делает её функциональной. Поднятие (hoisting) без инициализации
var поднимается в начало функции, но инициализируется значением undefined:
console.log(y); // undefined — не ошибка!
var y = 5; Это может скрыть ошибки: вы используете переменную до её объявления — и ничего не падает. Можно переобъявить
var позволяет объявить одну и ту же переменную несколько раз — без ошибки:
var name = "Анна";
var name = "Иван"; // перезапись — без предупреждения
console.log(name); // "Иван" Это легко приводит к случайной потере данных. let — для переменных, которые меняются.
Блочная область видимости. Нельзя переобъявить в одной области.
let count = 0;
count = 1; // ок
let count = 2; // ошибка: Identifier 'count' has already been declared const — для констант и значений, которые не должны меняться.
Обязательно инициализировать при объявлении.
Не позволяет переприсвоить, но позволяет менять свойства объектов и элементы массивов.
const user = { id: 1 };
user.id = 2; // ок — меняем свойство
user = { id: 3 }; // ошибка — нельзя переприсвоить Всегда используйте let и const — они предсказуемы, безопасны и соответствуют современным стандартам.
Избегайте глобальных переменных — они конфликтуют между файлами, усложняют отладку и ломают модульность.
Объявляйте переменные как можно глубже — в том блоке, где они реально нужны.
Используйте const по умолчанию — если значение не меняется.
Только если нужно переприсвоить — используйте let. Современные инструменты (ESLint, TypeScript, Babel) и стандарты (Airbnb, Google) запрещают var в новом коде.
Использование let и const — не вопрос стиля, а вопрос надёжности.
]]></description><link>материалы/подтемы/секция-1.-javascript/тема-№10/практические-последствия-(var).html</link><guid isPermaLink="false">Материалы/Подтемы/Секция 1. JavaScript/Тема №10/Практические последствия (var).md</guid><pubDate>Thu, 25 Sep 2025 05:10:52 GMT</pubDate></item><item><title><![CDATA[Замыкания]]></title><description><![CDATA[Замыкание — это когда функция запоминает и сохраняет доступ к переменным из внешней области видимости, даже после того как внешняя функция завершила свою работу.Это происходит потому, что в JavaScript каждая функция «запоминает» окружение, в котором она была создана — даже если она выполняется позже, в другом месте.Простой пример:function createUserManager() { let userCount = 0; return function() { userCount++; return `Пользователей: ${userCount}`; };
} const addUser = createUserManager(); console.log(addUser()); // "Пользователей: 1"
console.log(addUser()); // "Пользователей: 2"
console.log(addUser()); // "Пользователей: 3"
Здесь:
createUserManager создаёт переменную userCount и возвращает внутреннюю функцию
После вызова createUserManager() внешняя функция завершается — её стек должен быть очищен
Но внутренняя функция (addUser) продолжает «помнить» и использовать userCount
Это и есть замыкание: внутренняя функция замыкает на переменную из внешней области
function createThemeManager() { let currentTheme = "light"; return { getTheme() { return currentTheme; }, setTheme(theme) { currentTheme = theme; }, toggleTheme() { currentTheme = currentTheme === "light" ? "dark" : "light"; } };
} const theme = createThemeManager();
theme.setTheme("dark");
console.log(theme.getTheme()); // "dark"
theme.toggleTheme();
console.log(theme.getTheme()); // "light"
Тема хранится в замыкании — не загрязняет глобальное пространство, доступна только через контролируемые методы.function setupButtonHandler(buttonId, userId) { document.getElementById(buttonId).addEventListener("click", function() { console.log(`Кнопка ${buttonId} нажата пользователем ${userId}`); });
} setupButtonHandler("profileBtn", 456);
// При клике выведет: "Кнопка profileBtn нажата пользователем 456"
// Даже если функция setupButtonHandler уже завершилась — замыкание сохранило userId
<a data-tooltip-position="top" aria-label="Каррированные функции" data-href="Каррированные функции" href="материалы/подтемы/секция-1.-javascript/тема-№10/каррированные-функции.html" class="internal-link" target="_self" rel="noopener nofollow">Каррирование</a> — это преобразование функции, принимающей несколько аргументов, в последовательность функций, каждая из которых принимает один аргумент. Основано на замыканиях.function multiply(a) { return function(b) { return function(c) { return a * b * c; }; };
} const multiplyBy2 = multiply(2);
const multiplyBy2And5 = multiplyBy2(5);
console.log(multiplyBy2And5(3)); // 30 // Или в одну строку:
console.log(multiply(2)(5)(3)); // 30
Здесь каждая вложенная функция «запоминает» значение a, затем b, используя замыкание. Это позволяет создавать переиспользуемые частичные версии функций — например, для форматирования, валидации или настройки API-запросов.
Замыкание не создаёт копию переменной — оно ссылается на неё
Если переменная меняется — замыкание видит новое значение
Замыкания могут вызывать утечки памяти, если держат ссылки на большие объекты без необходимости Замыкания — мощный инструмент. Используйте их для инкапсуляции данных, создания приватных состояний, управления контекстом в обработчиках и реализации каррированных функций — особенно в React, Vue или чистом JavaScript без фреймворков.
]]></description><link>материалы/подтемы/секция-1.-javascript/тема-№10/замыкания.html</link><guid isPermaLink="false">Материалы/Подтемы/Секция 1. JavaScript/Тема №10/Замыкания.md</guid><pubDate>Thu, 25 Sep 2025 05:08:49 GMT</pubDate></item><item><title><![CDATA[Каррированные функции]]></title><description><![CDATA[Каррирование — это преобразование функции, которая принимает несколько аргументов, в последовательность функций, каждая из которых принимает ровно один аргумент.Результат — функция, которую можно вызывать по частям, сохраняя промежуточные состояния через замыкания.Пример:function multiply(a) { return function(b) { return function(c) { return a * b * c; }; };
} const result = multiply(2)(5)(3); // 30
Здесь:
multiply(2) возвращает функцию, запоминающую a = 2
multiply(2)(5) возвращает функцию, запоминающую a = 2 и b = 5
multiply(2)(5)(3) возвращает результат: 2 * 5 * 3 = 30
Каждый уровень — это новая функция, которая замыкает на переменные внешнего уровня.Каррирование позволяет создавать переиспользуемые частичные версии функций:function greet(greeting, name) { return `${greeting}, ${name}!`;
} function curry(fn) { return function(a) { return function(b) { return fn(a, b); }; };
} const greetWith = curry(greet);
const sayHello = greetWith("Привет"); console.log(sayHello("Анна")); // "Привет, Анна!"
console.log(sayHello("Иван")); // "Привет, Иван!"
Теперь sayHello — это готовая функция, которая всегда использует "Привет". Её можно передавать как колбэк, использовать в массивах:const users = ["Анна", "Иван", "Мария"];
const greetings = users.map(sayHello);
// ["Привет, Анна!", "Привет, Иван!", "Привет, Мария!"] Форматирование данных: formatDate(locale, format) → formatDateRu = curry(formatDate)("ru-RU")
Валидация: validateLength(min, max, value) → validateMin5 = curry(validateLength)(5, 100)
Настройка запросов: apiRequest(method, url, headers) → get = curry(apiRequest)("GET") Каррирование — не синтаксическая фича JavaScript, а паттерн, основанный на замыканиях.
Он особенно полезен в функциональном стиле программирования и для создания гибких, переиспользуемых утилит.
Используйте его, когда нужно создавать специализированные версии функций с предустановленными параметрами.
]]></description><link>материалы/подтемы/секция-1.-javascript/тема-№10/каррированные-функции.html</link><guid isPermaLink="false">Материалы/Подтемы/Секция 1. JavaScript/Тема №10/Каррированные функции.md</guid><pubDate>Thu, 25 Sep 2025 05:08:23 GMT</pubDate></item><item><title><![CDATA[Вложенность областей видимости]]></title><description><![CDATA[Вложенность областей видимости означает, что внутренняя область кода (например, функция внутри другой функции) может обращаться к переменным внешней области, но не наоборот.Это работает по принципу «внутри видит наружу, но наружу не видит внутрь».Пример:function outerFunction() { const userName = "Анна"; function innerFunction() { console.log(userName); // доступна — из внутренней функции видна внешняя переменная const userRole = "admin"; } innerFunction(); console.log(userRole); // ошибка: userRole is not defined
}
Здесь:
innerFunction может прочитать userName — потому что он объявлен во внешней функции
outerFunction не может прочитать userRole — он существует только внутри innerFunction
Это естественное поведение, основанное на цепочке областей видимости — так называемой цепочке лексических окружений.Ещё один пример — вложенные блоки:function checkPermissions() { const userId = 123; if (userId &gt; 0) { const hasAccess = true; console.log(userId); // работает — видит внешнюю переменную console.log(hasAccess); // работает — своя переменная } console.log(hasAccess); // ошибка — hasAccess не видна за пределами блока if
}
Почему это важно:
Вы можете создавать локальные контексты: например, обработку авторизации внутри функции, не засоряя внешнюю область
Не нужно бояться, что переменные внутри вспомогательных функций перезапишут глобальные
Легче тестировать: функция работает только с тем, что ей передано или что видно из внешней области Всегда объявляйте переменные как можно глубже — в том блоке, где они реально нужны. Это делает код чище, безопаснее и предсказуемее.
]]></description><link>материалы/подтемы/секция-1.-javascript/тема-№10/вложенность-областей-видимости.html</link><guid isPermaLink="false">Материалы/Подтемы/Секция 1. JavaScript/Тема №10/Вложенность областей видимости.md</guid><pubDate>Thu, 25 Sep 2025 04:57:01 GMT</pubDate></item><item><title><![CDATA[Блочная область видимости]]></title><description><![CDATA[Блочная область видимости — это когда переменная доступна только внутри блока кода, заключённого в фигурные скобки {} — например, внутри if, for, while, или любого другого блока.Переменные, объявленные с let и const, привязаны к блоку, а не к функции. Они не видны за пределами этого блока.Пример:if (true) { let isActive = true; const theme = "dark";
} console.log(isActive); // ошибка: isActive is not defined
console.log(theme); // ошибка: theme is not defined
Здесь isActive и theme существуют только внутри if. Как только блок завершён — переменные уничтожаются (в смысле недоступны).То же работает с циклами:for (let i = 0; i &lt; 3; i++) { console.log(i); // 0, 1, 2
} console.log(i); // ошибка: i is not defined
В отличие от var, здесь i не выходит за пределы цикла — это предсказуемо и безопасно.С let в цикле for каждая итерация создаёт новую переменную. Это важно при использовании замыканий.Пример с var — проблема:for (var i = 0; i &lt; 3; i++) { setTimeout(() =&gt; console.log(i), 100);
}
// Выведет: 3, 3, 3 — потому что i — одна переменная, и к моменту запуска setTimeout она = 3
Пример с let — правильно:for (let i = 0; i &lt; 3; i++) { setTimeout(() =&gt; console.log(i), 100);
}
// Выведет: 0, 1, 2 — каждая итерация имеет свою i
Почему так происходит:
let создаёт новую привязку переменной для каждой итерации цикла. var — одну и ту же переменную для всего цикла.
Всегда используйте let и const вместо var.
Они дают точный контроль: переменная существует только там, где вы её объявили — меньше ошибок, проще читать и отлаживать код.
]]></description><link>материалы/подтемы/секция-1.-javascript/тема-№10/блочная-область-видимости.html</link><guid isPermaLink="false">Материалы/Подтемы/Секция 1. JavaScript/Тема №10/Блочная область видимости.md</guid><pubDate>Thu, 25 Sep 2025 04:55:12 GMT</pubDate></item><item><title><![CDATA[Функциональная область видимости]]></title><description><![CDATA[Функциональная область видимости означает, что переменная, объявленная с помощью var внутри функции, доступна только внутри этой функции и во всех вложенных блоках — но не за пределами функции.Пример:function checkUser() { var isLoggedIn = true; if (isLoggedIn) { var message = "Пользователь авторизован"; console.log(message); // работает — внутри if } console.log(message); // тоже работает — message доступна в функции
} checkUser();
console.log(isLoggedIn); // ошибка: isLoggedIn is not defined
console.log(message); // ошибка: message is not defined
Здесь isLoggedIn и message видны только внутри функции checkUser. За её пределами — недоступны. Это защищает внешний код от случайных перезаписей.Но есть важная особенность var: он не имеет блочной области видимости.Даже если переменная объявлена внутри if, for или while — она всё равно будет доступна во всей функции.Пример:function processSettings() { if (true) { var theme = "dark"; } console.log(theme); // "dark" — доступна, хотя объявлена внутри if
} processSettings();
То же самое с циклом:function loopExample() { for (var i = 0; i &lt; 3; i++) { console.log(i); } console.log(i); // 3 — i доступна даже после цикла
} loopExample();
Это поведение — особенность var. Он поднимается (hoisting) и привязывается к функции, а не к блоку {}.Почему это проблема:
Сложно отслеживать, где именно переменная была объявлена
Можно случайно использовать переменную до её ожидаемого объявления
Ведёт к ошибкам при рефакторинге
Поэтому в современном JavaScript var не рекомендуется. Вместо него используйте let и const — они дают блочную область видимости и предсказуемое поведение.]]></description><link>материалы/подтемы/секция-1.-javascript/тема-№10/функциональная-область-видимости.html</link><guid isPermaLink="false">Материалы/Подтемы/Секция 1. JavaScript/Тема №10/Функциональная область видимости.md</guid><pubDate>Thu, 25 Sep 2025 04:40:47 GMT</pubDate></item><item><title><![CDATA[Глобальная область видимости]]></title><description><![CDATA[Глобальная область видимости — это область, в которой переменные доступны в любом месте файла, включая все функции и блоки.Переменные объявляются в глобальной области, если они созданы вне всех функций, циклов, условий — то есть на самом верхнем уровне скрипта.Пример:let appVersion = "1.2.0"; // глобальная переменная
const apiUrl = "https://api.example.com"; function loadUserData() { console.log(appVersion); // можно использовать — доступна
} loadUserData();
console.log(appVersion); // тоже доступна
Такие переменные доступны везде — в любой функции, даже в файле, подключённом позже. Это удобно для настроек, которые нужны повсеместно: URL API, токен авторизации, флаги режима приложения.Но есть серьёзный риск — загрязнение глобального пространства.Когда много разработчиков пишут код в одном файле или подключают несколько скриптов, они могут случайно переопределить одну и ту же глобальную переменную.Пример проблемы:// Файл 1 (ваш код)
let user = { id: 1, name: "Петр" }; // Файл 2 (сторонний скрипт)
let user = "guest"; // ой — перезаписал ваш объект! console.log(user); // "guest" — ваша логика сломалась
Такие ошибки сложно отловить: они проявляются не всегда, зависят от порядка загрузки файлов, и могут быть в продакшене.Поэтому:
Избегайте создания глобальных переменных без необходимости
Если нужно хранить данные на уровне приложения — используйте модули или объекты-нэйспейсы
В современном JavaScript используйте import/export — они не создают глобальные переменные Лучшая практика: чем меньше глобальных переменных — тем стабильнее приложение.
]]></description><link>материалы/подтемы/секция-1.-javascript/тема-№10/глобальная-область-видимости.html</link><guid isPermaLink="false">Материалы/Подтемы/Секция 1. JavaScript/Тема №10/Глобальная область видимости.md</guid><pubDate>Thu, 25 Sep 2025 04:30:47 GMT</pubDate></item><item><title><![CDATA[Что такое область видимости]]></title><description><![CDATA[Область видимости — это часть кода, в пределах которой переменная или функция доступна для использования.Если переменная объявлена внутри определённой области — она видна только в ней и во всех вложенных областях. Если объявлена вне — она доступна повсюду. Это позволяет изолировать данные, чтобы они не мешали друг другу.Без правильного управления областью видимости:
Переменные случайно перезаписываются
Сложно отлаживать код
Возникают неожиданные ошибки, особенно при росте приложения
Пример:let userName = "Анна"; // глобальная переменная function setUserName() { let userName = "Иван"; // локальная переменная, не перезаписывает глобальную console.log(userName); // "Иван"
} setUserName();
console.log(userName); // "Анна" — не изменилось
Здесь две переменные с одинаковым именем, но в разных областях. Они не мешают друг другу. Это и есть суть области видимости.]]></description><link>материалы/подтемы/секция-1.-javascript/тема-№10/что-такое-область-видимости.html</link><guid isPermaLink="false">Материалы/Подтемы/Секция 1. JavaScript/Тема №10/Что такое область видимости.md</guid><pubDate>Thu, 25 Sep 2025 04:30:17 GMT</pubDate></item><item><title><![CDATA[Практика №3. Вывод информации о себе в консоль.]]></title><description><![CDATA[В рамках этого задания вам необходимо создать скрипт task3.js, который должен запускаться при помощи NodeJs.Задание обязано быть опубликовано в новом приватном репозитории организации GitHub с названием Группа_Фамилия_task-3-7.(пусто)Вам необходимо создать следующие переменные:
год рождения
ваш возраст
ваше имя
работаете ли вы?
Вам необходимо вывести в консоль значения переменных и их типов данных.
Вы должны поменять значение возраста и вывести в консоль новый возраст.Используйте нужные ключевые слова и типы данных, при проверке вам необходимо обосновать выбор.На выполнение выделяется 1 практическая пара.
Градация баллов после дедлайна:
1 пара: 50%
]]></description><link>задания/секция-1.-javascript/практика-№3.-вывод-информации-о-себе-в-консоль..html</link><guid isPermaLink="false">Задания/Секция 1. JavaScript/Практика №3. Вывод информации о себе в консоль..md</guid><pubDate>Wed, 24 Sep 2025 09:39:50 GMT</pubDate></item><item><title><![CDATA[Практика №2. Использование git, github]]></title><description><![CDATA[В рамках этого задания вам необходимо загрузить код "Практика №1" в github организацию в виде нового репозитория.(пусто)Регистрируйтесь на <a data-tooltip-position="top" aria-label="https://github.com" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com" target="_self">GitHub</a>, затем отправьте почту в <a data-tooltip-position="top" aria-label="https://forms.yandex.ru/u/68c460fe90fa7b550e338c06" rel="noopener nofollow" class="external-link is-unresolved" href="https://forms.yandex.ru/u/68c460fe90fa7b550e338c06" target="_self">яндекс формы</a>.
Вам должно будет прийти письмо с приглашением на вступление (Проверяйте указанную почту и/или оповещения в GitHub).Необходимо создать ПРИВАТНЫЙ репозиторий ВНУТРИ ОРГАНИЗАЦИИ.
Название по следующему шаблону:
ГРУППА_ФАМИЛИЯ_НАЗВАНИЕ-ЗАДАНИЯ
Например:
IS231-1_Ivanov_task1.На выполнение выделяется 1 практическая пара.
Градация баллов после дедлайна:
1 пара: 0%
]]></description><link>задания/секция-1.-javascript/практика-№2.-использование-git,-github.html</link><guid isPermaLink="false">Задания/Секция 1. JavaScript/Практика №2. Использование git, github.md</guid><pubDate>Wed, 24 Sep 2025 09:34:19 GMT</pubDate></item><item><title><![CDATA[Рекурсия]]></title><description><![CDATA[Рекурсия — это когда функция вызывает саму себя внутри своего тела. Это способ решить задачу, разбив её на более мелкие подзадачи того же типа.Она удобна, когда задача естественно разбивается на аналогичные подзадачи — например, обход дерева каталогов, вычисление чисел Фибоначчи, работа с вложенными структурами данных.Базовый случай — это условие, при котором рекурсия перестаёт вызывать саму себя и начинает возвращать результат. Рекурсия работает по принципу «разделяй и властвуй»: задача разбивается на меньшие копии самой себя. Но в какой-то момент этот процесс должен остановиться — иначе не будет точки входа в обратный путь.Факториал числа n — это произведение всех натуральных чисел от 1 до n.
Обозначается как n!
Пример: 5! = 5 × 4 × 3 × 2 × 1 = 120Рекурсивное определение:
n! = n × (n-1)!
Базовый случай: 0! = 1Реализация:function factorial(n) { if (n === 0 || n === 1) { return 1; // базовый случай } return n * factorial(n - 1); // рекурсивный вызов
} console.log(factorial(5)); // 120
Здесь factorial(5) вызывает factorial(4), который вызывает factorial(3) и так далее, пока не дойдёт до factorial(1). После этого цепочка возвратов начинает вычислять результат снизу вверх.Каждый рекурсивный вызов занимает память в стеке вызовов. Если рекурсия слишком глубокая — стек переполняется, и браузер или приложение падает с ошибкой Stack Overflow.Пример опасного случая:function infiniteRecursion() { return infiniteRecursion(); // вызов без условия остановки
} infiniteRecursion(); // приведёт к Stack Overflow
Поэтому всегда убедитесь, что рекурсия имеет базовый случай, который остановит вызовы, и что с каждым шагом вы приближаетесь к нему.Используйте рекурсию только тогда, когда она делает код понятнее. В большинстве случаев лучше заменять её циклами — они эффективнее и безопаснее.]]></description><link>материалы/подтемы/секция-1.-javascript/тема-№9/рекурсия.html</link><guid isPermaLink="false">Материалы/Подтемы/Секция 1. JavaScript/Тема №9/Рекурсия.md</guid><pubDate>Wed, 24 Sep 2025 09:13:15 GMT</pubDate></item><item><title><![CDATA[Возвращаемое значение]]></title><description><![CDATA[Функция может возвращать результат с помощью оператора return. Это значение передаётся обратно в место, откуда функция была вызвана.function calculateDiscount(price, discountPercent) { return price - (price * discountPercent / 100);
} const finalPrice = calculateDiscount(1000, 15);
console.log(finalPrice); // 850
Здесь return отправляет вычисленную сумму обратно в переменную finalPrice.Если в функции нет return, она возвращает undefined:function logMessage(message) { console.log(message);
} const result = logMessage('Привет');
console.log(result); // undefined
Даже если функция что-то делает — например, выводит в консоль — она не возвращает ничего, если не указан return.return можно использовать для преждевременного завершения работы функции — это полезно для проверки условий.Пример: проверка наличия данных перед обработкойfunction updateUserProfile(userData) { if (!userData || !userData.name) { return; // выход, если данные не переданы или нет имени } // Эта часть выполнится только если условия выше не сработали console.log('Обновление профиля для:', userData.name); // ... логика обновления
} updateUserProfile(); // ничего не делает, функция завершается на return
updateUserProfile({ name: 'Анна' }); // обновление профиля
Такой подход упрощает код: вы не пишете вложенные if-else, а сразу отсеиваете невалидные случаи.function loadUserSettings() { if (!userIsAuthenticated) { return; // не продолжаем, если пользователь не авторизован } const settings = api.getSettings(); updateUI(settings);
}
Здесь return предотвращает выполнение дорогостоящих операций — обращение к API, обновление интерфейса — если это бессмысленно. Это улучшает производительность и снижает риск ошибок.]]></description><link>материалы/подтемы/секция-1.-javascript/тема-№9/возвращаемое-значение.html</link><guid isPermaLink="false">Материалы/Подтемы/Секция 1. JavaScript/Тема №9/Возвращаемое значение.md</guid><pubDate>Wed, 24 Sep 2025 09:09:08 GMT</pubDate></item><item><title><![CDATA[Параметры и аргументы]]></title><description><![CDATA[Параметры — это имена переменных, которые указываются в скобках при объявлении функции. Они определяют, какие данные функция ожидает получить.Аргументы — это реальные значения, которые передаются функции при её вызове.Пример:function greet(name, age) { // name и age — параметры return 'Привет, ' + name + ', тебе ' + age + ' лет';
} console.log(greet('Анна', 25)); // 'Анна' и 25 — аргументы
Здесь name и age — параметры. При вызове greet('Анна', 25) передаются аргументы 'Анна' и 25. Каждый аргумент присваивается соответствующему параметру.Если аргументов меньше, чем параметров — остальные получат значение undefined:console.log(greet('Иван')); // Привет, Иван, тебе undefined лет
Чтобы избежать undefined, можно задать значения по умолчанию:function greet(name, age = 18) { return 'Привет, ' + name + ', тебе ' + age + ' лет';
} console.log(greet('Иван')); // Привет, Иван, тебе 18 лет
console.log(greet('Мария', 22)); // Привет, Мария, тебе 22 лет
Значения по умолчанию работают для любого параметра — не только последнего:function createTask(title = 'Новая задача', priority = 'средний', completed = false) { return { title, priority, completed };
} console.log(createTask()); // { title: 'Новая задача', priority: 'средний', completed: false }
console.log(createTask('Удалить кеш')); // { title: 'Удалить кеш', priority: 'средний', completed: false }
Это особенно полезно в приложениях, где параметры часто не обязательны — например, настройки темы, уведомления, таймауты. Вы можете задать разумные значения по умолчанию и не проверять каждый аргумент вручную.]]></description><link>материалы/подтемы/секция-1.-javascript/тема-№9/параметры-и-аргументы.html</link><guid isPermaLink="false">Материалы/Подтемы/Секция 1. JavaScript/Тема №9/Параметры и аргументы.md</guid><pubDate>Wed, 24 Sep 2025 09:07:06 GMT</pubDate></item><item><title><![CDATA[Стрелочные функции (Arrow Function)]]></title><description><![CDATA[const multiply = (a, b) =&gt; { return a * b;
};
Она состоит из двух частей: параметры в скобках, затем стрелка =&gt;, и тело функции в фигурных скобках.Если параметр один — скобки можно опустить:const square = x =&gt; x * x;
Если тело функции — одно выражение — фигурные скобки и return можно опустить:const formatName = (first, last) =&gt; first + ' ' + last;
Это называется краткой формой. Она возвращает результат выражения автоматически.Стрелочные функции часто называют анонимными, потому что они не имеют имени в своём определении. Их имя — это переменная, в которую они присваиваются.Стрелочные функции идеальны для простых преобразований и коллбэков — особенно в мобильных приложениях, где код должен быть лаконичным.const tasks = [ { id: 1, title: 'Починить экран', completed: false }, { id: 2, title: 'Обновить приложение', completed: true }
]; const pendingTasks = tasks.filter(task =&gt; !task.completed);
console.log(pendingTasks); // [{ id: 1, title: 'Починить экран', completed: false }]
Здесь стрелочная функция task =&gt; !task.completed передаётся в filter. Она короткая, читаемая и выполняет одну задачу — проверяет, не выполнена ли задача.Пример: обработчик клика в React Native или веб-интерфейсеbutton.addEventListener('click', () =&gt; { showNotification('Данные сохранены');
}); Важно: стрелочные функции не имеют собственного this. Это полезно в классах и коллбэках, но не всегда очевидно для новичков — пока достаточно знать, что для простых операций они удобны, а для сложной логики с this лучше использовать функциональные выражения или объявления.
]]></description><link>материалы/подтемы/секция-1.-javascript/тема-№9/стрелочные-функции-(arrow-function).html</link><guid isPermaLink="false">Материалы/Подтемы/Секция 1. JavaScript/Тема №9/Стрелочные функции (Arrow Function).md</guid><pubDate>Wed, 24 Sep 2025 09:04:11 GMT</pubDate></item><item><title><![CDATA[Тема №9. Функции в JavaScript]]></title><description><![CDATA[В этой теме вы изучите функции — основной механизм инкапсуляции логики в JavaScript. Поймёте, как объявлять, вызывать и передавать данные через функции, а также познакомитесь с разными способами их определения. Это фундамент для организации кода в любом приложении, включая мобильные, где функции используются для обработки событий, работы с данными и управления состоянием интерфейса.
<a data-href="Что такое функция" href="материалы/подтемы/секция-1.-javascript/тема-№9/что-такое-функция.html" class="internal-link" target="_self" rel="noopener nofollow">Что такое функция</a>
<br><a data-href="Объявление функции (Function Declaration)" href="материалы/подтемы/секция-1.-javascript/тема-№9/объявление-функции-(function-declaration).html" class="internal-link" target="_self" rel="noopener nofollow">Объявление функции (Function Declaration)</a>
<br><a data-href="Функциональное выражение (Function Expression)" href="материалы/подтемы/секция-1.-javascript/тема-№9/функциональное-выражение-(function-expression).html" class="internal-link" target="_self" rel="noopener nofollow">Функциональное выражение (Function Expression)</a>
<br><a data-href="Стрелочные функции (Arrow Function)" href="материалы/подтемы/секция-1.-javascript/тема-№9/стрелочные-функции-(arrow-function).html" class="internal-link" target="_self" rel="noopener nofollow">Стрелочные функции (Arrow Function)</a>
<br><a data-href="Параметры и аргументы" href="материалы/подтемы/секция-1.-javascript/тема-№9/параметры-и-аргументы.html" class="internal-link" target="_self" rel="noopener nofollow">Параметры и аргументы</a>
<br><a data-href="Возвращаемое значение" href="материалы/подтемы/секция-1.-javascript/тема-№9/возвращаемое-значение.html" class="internal-link" target="_self" rel="noopener nofollow">Возвращаемое значение</a>
<br><a data-href="Рекурсия" href="материалы/подтемы/секция-1.-javascript/тема-№9/рекурсия.html" class="internal-link" target="_self" rel="noopener nofollow">Рекурсия</a>
(Пусто)<br><a data-href="Тема №10. Область видимости в JavaScript" href="лекции/секция-1.-javascript/тема-№10.-область-видимости-в-javascript.html" class="internal-link" target="_self" rel="noopener nofollow">Тема №10. Область видимости в JavaScript</a>]]></description><link>лекции/секция-1.-javascript/тема-№9.-функции-в-javascript.html</link><guid isPermaLink="false">Лекции/Секция 1. JavaScript/Тема №9. Функции в JavaScript.md</guid><pubDate>Wed, 24 Sep 2025 09:02:32 GMT</pubDate></item><item><title><![CDATA[Функциональное выражение (Function Expression)]]></title><description><![CDATA[Функциональное выражение (Function Expression)Синтаксис функционального выражения:const calculateSum = function(a, b) { return a + b;
};
Здесь функция не объявляется как отдельная сущность с именем в области видимости. Вместо этого она создаётся как анонимная функция и присваивается переменной calculateSum.Главное отличие от объявления функции — отсутствие поднятия. Вы не можете вызвать функцию до её присваивания:console.log(calculateSum(2, 3)); // Ошибка: TypeError: calculateSum is not a function const calculateSum = function(a, b) { return a + b;
};
Это важно: функциональное выражение становится доступным только после строки, в которой оно присвоено.Использование: передача функции как аргументаЧасто функциональные выражения используются, когда функция передаётся в другую функцию — например, как коллбэк.Пример: обработка данных списка пользователейconst users = ['Анна', 'Иван', 'Мария']; const capitalizedUsers = users.map(function(name) { return name.charAt(0).toUpperCase() + name.slice(1);
}); console.log(capitalizedUsers); // ['Анна', 'Иван', 'Мария']
Здесь анонимная функция передаётся в метод map. Она будет вызвана для каждого элемента массива. Такой подход часто используется в мобильных приложениях при фильтрации, сортировке или преобразовании данных из API.Функциональные выражения также полезны, когда вы хотите создать функцию динамически или условно:let getGreeting; if (isMorning) { getGreeting = function() { return 'Доброе утро'; };
} else { getGreeting = function() { return 'Добрый день'; };
} console.log(getGreeting()); // зависит от условия
]]></description><link>материалы/подтемы/секция-1.-javascript/тема-№9/функциональное-выражение-(function-expression).html</link><guid isPermaLink="false">Материалы/Подтемы/Секция 1. JavaScript/Тема №9/Функциональное выражение (Function Expression).md</guid><pubDate>Wed, 24 Sep 2025 09:01:30 GMT</pubDate></item><item><title><![CDATA[Объявление функции (Function Declaration)]]></title><description><![CDATA[Объявление функции (Function Declaration)Синтаксис объявления функции:function calculateSum(a, b) { return a + b;
}
Здесь calculateSum — имя функции, a и b — параметры. Функция вычисляет сумму и возвращает результат.Особенность функций, объявленных таким образом — поднятие (hoisting). Это значит, что JavaScript перемещает объявление функции в начало текущей области видимости при компиляции кода. Поэтому вы можете вызвать функцию до её объявления:// Это сработает!
console.log(calculateSum(5, 3)); // 8 function calculateSum(a, b) { return a + b;
}
Это работает только с объявлениями функций. Функциональные выражения и стрелочные функции таким свойством не обладают.Пример: форматирование даты для отображения в интерфейсеfunction formatDateString(dateString) { const date = new Date(dateString); return date.toLocaleDateString('ru-RU', { day: 'numeric', month: 'long', year: 'numeric' });
} console.log(formatDateString('2024-06-15')); // 15 июня 2024 г.
Такая функция может использоваться в любом месте приложения, где нужно отобразить дату в понятном виде — например, в списке уведомлений или истории действий пользователя.]]></description><link>материалы/подтемы/секция-1.-javascript/тема-№9/объявление-функции-(function-declaration).html</link><guid isPermaLink="false">Материалы/Подтемы/Секция 1. JavaScript/Тема №9/Объявление функции (Function Declaration).md</guid><pubDate>Wed, 24 Sep 2025 08:29:38 GMT</pubDate></item><item><title><![CDATA[Что такое функция]]></title><description><![CDATA[Функция — это именованный блок кода, который выполняет определённую задачу. Её можно вызывать несколько раз, передавая разные данные, и она всегда будет вести себя одинаково.Без функций код становился бы дублирующимся и неуправляемым. Например, если нужно проверить, заполнено ли поле ввода в трёх разных местах приложения — без функции вы скопировали бы один и тот же код три раза. С функцией — один раз написали, три раза вызвали.Функции помогают структурировать код: разбивают большую задачу на маленькие, понятные части. Это делает его легче тестировать, читать и поддерживать.Пример: обработчик клика по кнопке в HTML&lt;button id="loginBtn"&gt;Войти&lt;/button&gt;
function handleLoginClick() { const email = document.getElementById('email').value; if (email) { console.log('Почта введена, начинаем вход...'); } else { console.log('Введите почту'); }
} document.getElementById('loginBtn').addEventListener('click', handleLoginClick);
Здесь handleLoginClick — функция. Она не выполняется сразу, а ждёт, пока пользователь кликнет. Когда клик происходит — функция вызывается. Это делает интерфейс реактивным. Без функции вы не смогли бы отделить логику от события.]]></description><link>материалы/подтемы/секция-1.-javascript/тема-№9/что-такое-функция.html</link><guid isPermaLink="false">Материалы/Подтемы/Секция 1. JavaScript/Тема №9/Что такое функция.md</guid><pubDate>Wed, 24 Sep 2025 08:22:35 GMT</pubDate></item><item><title><![CDATA[Циклы и производительность]]></title><description><![CDATA[Производительность циклов критична в JavaScript — особенно при обработке больших списков, частых обновлений или ресурсоёмких операций. Даже небольшая неоптимизированная операция внутри цикла может замедлить выполнение скрипта.Любая операция, которая не зависит от итерации, не должна выполняться на каждой итерации.const items = getLargeItemList(); // 10 000 элементов for (let i = 0; i &lt; items.length; i++) { // items.length вызывается 10 000 раз — даже если массив не меняется processItem(items[i]);
}
items.length — это свойство. В JavaScript оно вычисляется каждый раз, даже если массив статичен. Это лишняя нагрузка.const items = getLargeItemList();
const length = items.length; // вычисляем один раз for (let i = 0; i &lt; length; i++) { processItem(items[i]);
}
Теперь length — это просто число, и его не нужно пересчитывать.for (let item of items) { if (item.name.toLowerCase().includes(searchTerm.toLowerCase())) { //toLowerCase() вызывается дважды на каждой итерации result.push(item); }
}
Каждый вызов toLowerCase() — это новая строка, которая создаётся и сравнивается. Это лишние выделения памяти и вычисления.const lowerSearchTerm = searchTerm.toLowerCase(); for (let item of items) { if (item.name.toLowerCase().includes(lowerSearchTerm)) { result.push(item); }
} Избегайте сложных вычислений внутри цикла: математика, регулярные выражения, вызовы JSON.parse, querySelector.
Выносите константы за пределы цикла: например, Math.PI, config.threshold, RegExp-шаблоны.
Не модифицируйте массив, который перебираете — это может вызвать неожиданное поведение, особенно при использовании for...of.
Используйте for...of вместо for с индексами, если вам не нужны индексы — меньше кода, меньше рисков. Всё, что не меняется на каждой итерации — выносите за цикл.
Всё, что влияет на производительность (вычисления, вызовы функций) — минимизируйте внутри цикла.
Оптимизация циклов напрямую влияет на скорость выполнения скрипта и отзывчивость приложения.
]]></description><link>материалы/подтемы/секция-1.-javascript/тема-№8/циклы-и-производительность.html</link><guid isPermaLink="false">Материалы/Подтемы/Секция 1. JavaScript/Тема №8/Циклы и производительность.md</guid><pubDate>Wed, 24 Sep 2025 07:17:34 GMT</pubDate></item><item><title><![CDATA[Прерывание и пропуск итераций]]></title><description><![CDATA[Без них цикл всегда выполняет все итерации до завершения условия. Но в реальных приложениях часто нужно:
Остановить цикл, если найден нужный элемент (например, пользователь найден).
Пропустить некорректные данные (например, пустой товар в списке).
Избежать лишних вычислений — это повышает производительность и предсказуемость.
Команда break немедленно завершает цикл, даже если условие ещё истинно.const users = [ { id: 1, name: "Анна" }, { id: 2, name: "Иван" }, { id: 3, name: "Мария" }
]; let foundUser = null; for (let user of users) { if (user.id === 2) { foundUser = user; break; // Нашли — выходим, дальше не ищем }
} console.log(foundUser); // { id: 2, name: "Иван" }
Без break цикл продолжил бы перебирать остальных пользователей — хотя ответ уже найден.Команда continue пропускает остаток текущей итерации и переходит к следующей.const products = [ "Ноутбук", "", "Телефон", null, "Наушники"
]; for (let product of products) { if (!product) { continue; // Пропускаем пустые и null } console.log("Товар: " + product);
}
Вывод:Товар: Ноутбук
Товар: Телефон
Товар: Наушники
Пустые значения ("", null) игнорируются — цикл не выводит их, но не останавливается.При загрузке списка сообщений из API:for (let message of messages) { if (!message.text) { continue; // Пропускаем пустые сообщения } if (message.isDeleted) { break; // Остановить загрузку, если встретили удалённое — дальше не нужно } renderMessage(message);
} break и continue работают только с ближайшим внешним циклом.
Вложенные циклы: break выйдет только из внутреннего.
Используйте их для улучшения читаемости — не для обхода логики, а для оптимизации. Используйте break, когда найдено нужное и дальнейший перебор не нужен.
Используйте continue, когда текущий элемент не подходит и его нужно пропустить.
Это делает код эффективнее и понятнее.
]]></description><link>материалы/подтемы/секция-1.-javascript/тема-№8/прерывание-и-пропуск-итераций.html</link><guid isPermaLink="false">Материалы/Подтемы/Секция 1. JavaScript/Тема №8/Прерывание и пропуск итераций.md</guid><pubDate>Wed, 24 Sep 2025 07:14:58 GMT</pubDate></item><item><title><![CDATA[Цикл `do...while`]]></title><description><![CDATA[Цикл do...while — это разновидность цикла while, в которой тело выполняется хотя бы один раз, даже если условие ложно с самого начала.do { // тело цикла
} while (условие);
Обратите внимание: условие проверяется после выполнения тела. Это главное отличие от while.let userInput = ""; do { userInput = prompt("Введите пароль (минимум 6 символов):");
} while (userInput.length &lt; 6); console.log("Пароль принят: " + userInput);
Здесь пользователь обязательно увидит поле ввода хотя бы один раз — даже если он сразу введёт короткий пароль. Цикл продолжится, пока условие не выполнится.
Используйте do...while, когда нужно хотя бы один раз выполнить действие, а потом проверять, нужно ли повторять.
Особенно полезно для ввода данных, настроек, подтверждений — там, где пользователь должен что-то сделать до продолжения.
]]></description><link>материалы/подтемы/секция-1.-javascript/тема-№8/цикл-`do...while`.html</link><guid isPermaLink="false">Материалы/Подтемы/Секция 1. JavaScript/Тема №8/Цикл `do...while`.md</guid><pubDate>Wed, 24 Sep 2025 07:13:37 GMT</pubDate></item><item><title><![CDATA[Цикл while]]></title><description><![CDATA[Цикл while выполняет блок кода пока условие истинно. Он подходит, когда заранее неизвестно, сколько раз нужно повторить действие.while (условие) { // тело цикла
}
Условие проверяется до каждой итерации. Если оно ложно с самого начала — тело цикла не выполнится ни разу.let isLoading = true;
let attempts = 0; while (isLoading &amp;&amp; attempts &lt; 5) { console.log("Попытка загрузки #" + (attempts + 1)); // Имитация асинхронной загрузки if (Math.random() &gt; 0.7) { isLoading = false; console.log("Успешно загружено!"); } attempts++;
}
Здесь мы не знаем, на какой попытке данные загрузятся — поэтому используем while.const messages = ["Привет", "Как дела?", "Пока", "Спасибо"];
let i = 0; while (i &lt; messages.length &amp;&amp; messages[i] !== "Пока") { console.log("Обрабатываю: " + messages[i]); i++;
} console.log("Нашли 'Пока' на позиции " + i);
Вывод:Обрабатываю: Привет
Обрабатываю: Как дела?
Нашли 'Пока' на позиции 2
Если условие никогда не станет false — цикл никогда не завершится. Это приведёт к зависанию приложения.// ОШИБКА — бесконечный цикл
while (true) { console.log("Это никогда не остановится!");
}
Всегда убедитесь, что внутри цикла есть изменение, которое ведёт к завершению условия.
Когда количество итераций зависит от внешних условий: загрузка сети, ожидание ответа API, ввод пользователя.
При работе с потоками данных, где элементы приходят динамически.
В мобильных приложениях — например, повторная попытка отправки запроса при ошибке, пока не будет успеха или превышено лимит попыток. <a data-href="Цикл `do...while`" href="материалы/подтемы/секция-1.-javascript/тема-№8/цикл-`do...while`.html" class="internal-link" target="_self" rel="noopener nofollow">Цикл `do...while`</a>
]]></description><link>материалы/подтемы/секция-1.-javascript/тема-№8/цикл-while.html</link><guid isPermaLink="false">Материалы/Подтемы/Секция 1. JavaScript/Тема №8/Цикл while.md</guid><pubDate>Wed, 24 Sep 2025 07:12:34 GMT</pubDate></item><item><title><![CDATA[Тема №8. Циклы в JavaScript]]></title><description><![CDATA[В этой теме вы изучите циклические конструкции языка JavaScript — фундаментальный механизм для повторения действий. Поймёте, как организовать итерации над данными, что необходимо для обработки списков, массивов и других структур, используемых в приложениях любого типа.
<a data-href="Что такое цикл" href="материалы/подтемы/секция-1.-javascript/тема-№8/что-такое-цикл.html" class="internal-link" target="_self" rel="noopener nofollow">Что такое цикл</a>
<br><a data-href="Цикл for" href="материалы/подтемы/секция-1.-javascript/тема-№8/цикл-for.html" class="internal-link" target="_self" rel="noopener nofollow">Цикл for</a>
<br><a data-href="Цикл while" href="материалы/подтемы/секция-1.-javascript/тема-№8/цикл-while.html" class="internal-link" target="_self" rel="noopener nofollow">Цикл while</a>
<br><a data-href="Прерывание и пропуск итераций" href="материалы/подтемы/секция-1.-javascript/тема-№8/прерывание-и-пропуск-итераций.html" class="internal-link" target="_self" rel="noopener nofollow">Прерывание и пропуск итераций</a>
<br><a data-href="Циклы и производительность" href="материалы/подтемы/секция-1.-javascript/тема-№8/циклы-и-производительность.html" class="internal-link" target="_self" rel="noopener nofollow">Циклы и производительность</a>
(Пусто)<br><a data-href="Тема №9. Функции в JavaScript" href="лекции/секция-1.-javascript/тема-№9.-функции-в-javascript.html" class="internal-link" target="_self" rel="noopener nofollow">Тема №9. Функции в JavaScript</a>]]></description><link>лекции/секция-1.-javascript/тема-№8.-циклы-в-javascript.html</link><guid isPermaLink="false">Лекции/Секция 1. JavaScript/Тема №8. Циклы в JavaScript.md</guid><pubDate>Wed, 24 Sep 2025 07:11:55 GMT</pubDate></item><item><title><![CDATA[Цикл `for...of` — перебор значений итерируемых объектов]]></title><description><![CDATA[Цикл for...of — это современный способ перебора значений в итерируемых объектах. Он предназначен для доступа к данным, а не к их ключам.for (значение of итерируемый_объект) { // тело цикла
}
const colors = ["красный", "зелёный", "синий"]; for (let color of colors) { console.log(color);
}
Вывод:красный
зелёный
синий
Здесь color — это значение элемента, а не индекс.const text = "Привет"; for (let char of text) { console.log(char);
}
Вывод:П
р
и
в
е
т
Каждая итерация возвращает один символ.const settings = new Map([ ["theme", "dark"], ["lang", "ru"], ["notifications", true]
]); for (let value of settings) { console.log(value); // ["theme", "dark"], ["lang", "ru"], ["notifications", true]
} // Если нужно отдельно ключ и значение:
for (let [key, value] of settings) { console.log(key + ": " + value);
}
Вывод:theme: dark
lang: ru
notifications: true
const tags = new Set(["javascript", "react", "mobile"]); for (let tag of tags) { console.log(tag);
}
Вывод:javascript
react
mobile Используйте for...of, когда нужно перебрать значения — массивы, строки, Map, Set, NodeList и другие итерируемые структуры.
Это безопасно, понятно и работает предсказуемо.
]]></description><link>материалы/подтемы/секция-1.-javascript/тема-№8/цикл-`for...of`-—-перебор-значений-итерируемых-объектов.html</link><guid isPermaLink="false">Материалы/Подтемы/Секция 1. JavaScript/Тема №8/Цикл `for...of` — перебор значений итерируемых объектов.md</guid><pubDate>Wed, 24 Sep 2025 07:10:08 GMT</pubDate></item><item><title><![CDATA[Цикл `for...in` — перебор ключей объекта]]></title><description><![CDATA[Цикл for...in перебирает ключевые свойства объекта — то есть имена (ключи) его перечисляемых свойств.for (ключ in объект) { // тело цикла
}
const user = { name: "Анна", age: 28, role: "администратор"
}; for (let key in user) { console.log(key + ": " + user[key]);
}
Вывод:name: Анна
age: 28
role: администратор
Каждая итерация возвращает имя свойства — строку. Чтобы получить значение, нужно обратиться через объект[ключ].
Перебирает только перечисляемые свойства (те, что можно увидеть в Object.keys()).
Включает свойства, унаследованные от прототипа, если они не помечены как enumerable: false.
Порядок не гарантирован — особенно для числовых ключей, которые могут быть отсортированы по возрастанию.
const arr = ["a", "b", "c"];
arr.extra = "лишнее"; // добавили нечисловое свойство for (let key in arr) { console.log(key); // выведет: "0", "1", "2", "extra"
}
Проблемы:
Не только индексы — for...in перебирает все перечисляемые свойства, включая те, что добавлены вручную.
Порядок может нарушиться — в некоторых движках числовые ключи сортируются по возрастанию, даже если они были добавлены в другом порядке.
Нет гарантии, что вы получите только элементы массива — если библиотека расширила Array.prototype, это тоже попадёт в цикл. Не используйте for...in для массивов.
Используйте for...of или классический for.
Для массивов for...in — источник багов. Для объектов — нормально, если вы знаете, что делаете.]]></description><link>материалы/подтемы/секция-1.-javascript/тема-№8/цикл-`for...in`-—-перебор-ключей-объекта.html</link><guid isPermaLink="false">Материалы/Подтемы/Секция 1. JavaScript/Тема №8/Цикл `for...in` — перебор ключей объекта.md</guid><pubDate>Wed, 24 Sep 2025 07:08:40 GMT</pubDate></item><item><title><![CDATA[Цикл for]]></title><description><![CDATA[Цикл for — это самый гибкий и часто используемый цикл в JavaScript. Он позволяет точно контролировать начало, условие продолжения и изменение счётчика на каждой итерации.for (инициализация; условие; шаг) { // тело цикла
} инициализация — выполняется один раз в начале. Обычно объявляется счётчик (let i = 0).
условие — проверяется перед каждой итерацией. Если false — цикл завершается.
шаг — выполняется после каждого прохода тела цикла. Обычно увеличивает счётчик (i++).
const products = ["Яблоко", "Груша", "Апельсин"]; for (let i = 0; i &lt; products.length; i++) { console.log("Товар: " + products[i]);
}
Вывод:Товар: Яблоко
Товар: Груша
Товар: Апельсин
Здесь i — индекс текущего элемента. Мы используем его для доступа к products[i].Если массив изменяется во время цикла (например, элементы удаляются), length пересчитывается на каждой итерации. Это безопасно.
<a data-href="Цикл `for...in` — перебор ключей объекта" href="материалы/подтемы/секция-1.-javascript/тема-№8/цикл-`for...in`-—-перебор-ключей-объекта.html" class="internal-link" target="_self" rel="noopener nofollow">Цикл `for...in` — перебор ключей объекта</a>
<br><a data-href="Цикл `for...of` — перебор значений итерируемых объектов" href="материалы/подтемы/секция-1.-javascript/тема-№8/цикл-`for...of`-—-перебор-значений-итерируемых-объектов.html" class="internal-link" target="_self" rel="noopener nofollow">Цикл `for...of` — перебор значений итерируемых объектов</a>
]]></description><link>материалы/подтемы/секция-1.-javascript/тема-№8/цикл-for.html</link><guid isPermaLink="false">Материалы/Подтемы/Секция 1. JavaScript/Тема №8/Цикл for.md</guid><pubDate>Wed, 24 Sep 2025 07:07:53 GMT</pubDate></item><item><title><![CDATA[Что такое цикл]]></title><description><![CDATA[Цикл — это конструкция, которая повторяет выполнение блока кода, пока выполняется заданное условие.Каждое повторение называется итерацией. Например, если вы перебираете 10 элементов массива — это 10 итераций.Циклы нужны, чтобы не писать один и тот же код десятки раз. Без них пришлось бы вручную обрабатывать каждый элемент списка, что невозможно при динамических данных.Пример: у вас есть список задач. Вы хотите вывести каждую в консоль. Без цикла — 10 строк кода. С циклом — одна.const tasks = ["Починить кнопку", "Обновить API", "Проверить стиль"]; for (let i = 0; i &lt; tasks.length; i++) { console.log(tasks[i]);
}
Также циклы используются для генерации данных: например, создание 100 случайных чисел, или заполнение списка пунктов меню.Циклы — это основа работы с коллекциями. Без них невозможно построить интерактивный интерфейс с динамическим содержимым.]]></description><link>материалы/подтемы/секция-1.-javascript/тема-№8/что-такое-цикл.html</link><guid isPermaLink="false">Материалы/Подтемы/Секция 1. JavaScript/Тема №8/Что такое цикл.md</guid><pubDate>Wed, 24 Sep 2025 07:05:06 GMT</pubDate></item><item><title><![CDATA[Тема №7. Ветвление в JavaScript]]></title><description><![CDATA[В этой теме вы изучите механизмы ветвления в JavaScript — основу логического управления потоком выполнения программы. Вы научитесь использовать условные конструкции для принятия решений на основе данных, что критически важно для реализации интерактивности.
<a data-href="Что такое ветвление" href="материалы/подтемы/секция-1.-javascript/тема-№7/что-такое-ветвление.html" class="internal-link" target="_self" rel="noopener nofollow">Что такое ветвление</a>
<br><a data-href="Оператор `if`" href="материалы/подтемы/секция-1.-javascript/тема-№7/оператор-`if`.html" class="internal-link" target="_self" rel="noopener nofollow">Оператор `if`</a>
<br><a data-href="Оператор `else`" href="материалы/подтемы/секция-1.-javascript/тема-№7/оператор-`else`.html" class="internal-link" target="_self" rel="noopener nofollow">Оператор `else`</a>
<br><a data-href="Цепочки `else if`" href="материалы/подтемы/секция-1.-javascript/тема-№7/цепочки-`else-if`.html" class="internal-link" target="_self" rel="noopener nofollow">Цепочки `else if`</a>
<br><a data-href="Тернарный оператор" href="материалы/подтемы/секция-1.-javascript/тема-№7/тернарный-оператор.html" class="internal-link" target="_self" rel="noopener nofollow">Тернарный оператор</a>
<br><a data-href="Оператор `switch`" href="материалы/подтемы/секция-1.-javascript/тема-№7/оператор-`switch`.html" class="internal-link" target="_self" rel="noopener nofollow">Оператор `switch`</a>
<br><a data-href="Сравнение `if` и `switch`" href="материалы/подтемы/секция-1.-javascript/тема-№7/сравнение-`if`-и-`switch`.html" class="internal-link" target="_self" rel="noopener nofollow">Сравнение `if` и `switch`</a>
(Пусто)<br><a data-href="Тема №8. Циклы в JavaScript" href="лекции/секция-1.-javascript/тема-№8.-циклы-в-javascript.html" class="internal-link" target="_self" rel="noopener nofollow">Тема №8. Циклы в JavaScript</a>]]></description><link>лекции/секция-1.-javascript/тема-№7.-ветвление-в-javascript.html</link><guid isPermaLink="false">Лекции/Секция 1. JavaScript/Тема №7. Ветвление в JavaScript.md</guid><pubDate>Wed, 24 Sep 2025 07:02:04 GMT</pubDate></item><item><title><![CDATA[Сравнение `if` и `switch`]]></title><description><![CDATA[Выбор между if и switch зависит от типа условия, которое вы проверяете. Оба инструмента решают похожие задачи, но используются в разных сценариях.Используйте if и else if, когда: Проверяете диапазоны значений if (score &gt;= 90) { grade = "A";
} else if (score &gt;= 80) { grade = "B";
} else if (score &gt;= 60) { grade = "C";
} Используете логические операции (&amp;&amp;, ||, !) if (isLoggedIn &amp;&amp; user.role === "admin" &amp;&amp; !user.banned) { showAdminPanel();
} Условия не сводятся к одному значению — например, проверка наличия данных, состояния сети, времени суток if (date.getHours() &gt;= 6 &amp;&amp; date.getHours() &lt; 12) { setMessage("Доброе утро!");
} Значения динамические или вычисляемые — switch не может работать с выражениями в case. Используйте switch, когда: Проверяете одну переменную на равенство конкретным, дискретным значениям — например, строковым ключам, числам, enum-значениям switch (notificationType) { case "info": case "success": showBanner("Сообщение", "blue"); break; case "warning": showBanner("Предупреждение", "orange"); break; case "error": showBanner("Ошибка", "red"); break;
} У вас есть перечисление возможных состояний — язык интерфейса, тип уведомления, статус заказа, режим приложения switch (appTheme) { case "light": case "dark": case "system": applyTheme(appTheme); break;
} Код должен быть структурирован и легко расширяться — добавление нового case не нарушает логику остальных веток. В современных движках JavaScript (V8, SpiderMonkey) разница в производительности между if и switch минимальна — особенно при небольшом количестве условий.
Для большого числа вариантов (например, 10+ дискретных значений) switch может быть чуть быстрее, потому что внутренне использует таблицу переходов (jump table), а не последовательные проверки.
Но в реальных веб и мобильных приложениях эта разница не имеет значения — важнее читаемость и поддерживаемость. switch лучше читается, когда вы видите список возможных значений — как меню.
if лучше читается, когда вы видите логические правила — как условия в форме.
Пример читаемого switch:switch (buttonAction) { case "save": saveData(); break; case "cancel": closeModal(); break; case "delete": confirmDelete(); break;
}
Пример читаемого if:if (isOffline &amp;&amp; hasUnsavedChanges) { showSavePrompt();
} else if (!isOffline &amp;&amp; !hasUnsavedChanges) { hideNotification();
} Используйте switch для перечислений — когда у вас есть фиксированный набор значений.
Используйте if для логики — когда нужно проверять диапазоны, комбинации, условия с &amp;&amp; или ||.
Не гонитесь за «красивым» кодом — выбирайте то, что понятнее вашей команде.
Если вы сомневаетесь — выбирайте if. Он универсален. switch — специализированный инструмент.
]]></description><link>материалы/подтемы/секция-1.-javascript/тема-№7/сравнение-`if`-и-`switch`.html</link><guid isPermaLink="false">Материалы/Подтемы/Секция 1. JavaScript/Тема №7/Сравнение `if` и `switch`.md</guid><pubDate>Wed, 24 Sep 2025 07:00:45 GMT</pubDate></item><item><title><![CDATA[Оператор `switch`]]></title><description><![CDATA[Оператор switch используется для выбора одного из нескольких блоков кода на основе значения выражения. Он особенно удобен, когда нужно проверить переменную на равенство нескольким дискретным значениям.switch (выражение) { case значение1: // код, если выражение === значение1 break; case значение2: // код, если выражение === значение2 break; default: // код, если ни одно значение не совпало (необязательно)
}
switch сравнивает значение выражения с каждым case с помощью строгого сравнения (===) — то есть и тип, и значение должны совпадать.Пример: выбор языка интерфейсаconst language = "ru"; switch (language) { case "en": setLanguage("English"); break; case "ru": setLanguage("Русский"); break; case "es": setLanguage("Español"); break; default: setLanguage("English"); // запасной вариант
}
Здесь language сравнивается со строками "en", "ru", "es". Если совпадает — выполняется соответствующий блок, и break останавливает выполнение.Без break выполнение продолжается на следующие case — это называется просачиванием (fall-through).Пример с ошибкой:const role = "admin"; switch (role) { case "admin": console.log("Администратор"); case "moderator": console.log("Модератор"); case "user": console.log("Пользователь"); default: console.log("Гость");
}
Вывод:Администратор
Модератор
Пользователь
Гость
Потому что после case "admin": нет break — выполнение «просочилось» дальше.Это может быть полезно в редких случаях — например, когда несколько значений должны делать одно и то же:const permission = "read"; switch (permission) { case "read": case "write": case "delete": enableButton("action"); break; default: disableButton("action");
}
Здесь если permission — "read", "write" или "delete" — кнопка включается. Это читаемо и логично.default не обязателен, но рекомендуется всегда добавлять. Он обрабатывает случаи, когда значение не совпало ни с одним case.Пример: обработка типов уведомленийconst notificationType = "error"; // пришло из API switch (notificationType) { case "success": showBanner("Успешно!", "green"); break; case "warning": showBanner("Предупреждение!", "orange"); break; case "error": showBanner("Ошибка!", "red"); break; default: console.warn("Неизвестный тип уведомления:", notificationType); showBanner("Новое сообщение", "blue");
}
Здесь даже если сервер отправит неожиданный тип — приложение не сломается, а просто покажет стандартное сообщение и залогирует проблему.✅ Используйте switch, когда:
Проверяете одну переменную на равенство нескольким конкретным значениям.
Значения — строковые константы, числа, перечисления (enum).
Код должен быть структурирован и легко расширяться.
❌ Не используйте switch, когда:
Нужно проверять диапазоны (if (score &gt;= 90)).
Условия сложные (if (user.age &gt; 18 &amp;&amp; user.role === "admin")).
Вы сравниваете объекты или массивы — switch работает только с примитивами. switch работает только с примитивами: строки, числа, булевы, null, undefined, символы.
case не может быть выражением — только литералы или константы.
Все case должны быть уникальными в рамках одного switch.
Пример запрещённого:switch (x) { case y + 1: // ОШИБКА — выражение не допускается break;
}
]]></description><link>материалы/подтемы/секция-1.-javascript/тема-№7/оператор-`switch`.html</link><guid isPermaLink="false">Материалы/Подтемы/Секция 1. JavaScript/Тема №7/Оператор `switch`.md</guid><pubDate>Wed, 24 Sep 2025 06:57:52 GMT</pubDate></item><item><title><![CDATA[Тернарный оператор]]></title><description><![CDATA[Тернарный оператор ? : — это краткая форма if else, используемая для присваивания значения в зависимости от условия.Синтаксис:условие ? выражение1 : выражение2
Если условие истинно — возвращается выражение1, иначе — выражение2.const isLoggedIn = true;
const buttonText = isLoggedIn ? "Выйти" : "Войти";
button.textContent = buttonText;
Здесь вместо:let buttonText;
if (isLoggedIn) { buttonText = "Выйти";
} else { buttonText = "Войти";
}
Мы пишем одну строку — чище, короче, удобнее для присваивания.const hasAvatar = user.avatarUrl !== null;
const avatarSrc = hasAvatar ? user.avatarUrl : "/images/default-avatar.png";
avatarImage.src = avatarSrc;
const count = 5;
const message = count === 1 ? "1 новое сообщение" : `${count} новых сообщений`;
notification.textContent = message; Краткость: идеален для простых условий, особенно при присваивании.
Читаемость в простых случаях: сразу видно, что значение зависит от условия.
Удобен в шаблонах, функциях, JSX (в React), где нельзя использовать блоки if. Не подходит для сложной логики. Например:
// ПЛОХО — не читаемо и сложно отлаживать
const result = condition1 ? (condition2 ? (condition3 ? "A" : "B") : "C") : (condition4 ? "D" : "E");
Такой код трудно понять и поддерживать. Лучше использовать if else.
Нельзя выполнять несколько действий внутри тернарного оператора:
// НЕ РАБОТАЕТ так, как ожидается
isLoggedIn ? console.log("Вход выполнен"), openDashboard() : redirectToLogin();
Здесь console.log и openDashboard() не будут выполнены как блок. Для нескольких действий используйте if.✅ Используйте тернарный оператор, когда:
Вы присваиваете значение переменной.
Условие простое — одно сравнение, один оператор.
Код должен быть компактным и понятным.
❌ Не используйте, когда:
Нужно выполнить несколько действий.
Условие сложное (с логическими операторами &amp;&amp;, ||, несколькими вложенными).
Вы хотите повысить читаемость для команды — лучше if else.
Тернарный оператор — инструмент для простых решений. Не превращайте его в замену if else.]]></description><link>материалы/подтемы/секция-1.-javascript/тема-№7/тернарный-оператор.html</link><guid isPermaLink="false">Материалы/Подтемы/Секция 1. JavaScript/Тема №7/Тернарный оператор.md</guid><pubDate>Wed, 24 Sep 2025 06:57:24 GMT</pubDate></item><item><title><![CDATA[Цепочки `else if`]]></title><description><![CDATA[Цепочка else if` позволяет проверить несколько условий последовательно — и выполнить только первый подходящий блок.Синтаксис:if (условие1) { // выполнится, если условие1 истинно
} else if (условие2) { // выполнится, если условие1 ложно, а условие2 истинно
} else if (условие3) { // выполнится, если условие1 и условие2 ложны, а условие3 истинно
} else { // выполнится, если все условия ложны (необязательно)
}
Важно: как только одно из условий становится истинным — выполняется соответствующий блок, и все остальные условия не проверяются.const userRole = "moderator"; if (userRole === "admin") { showAdminPanel();
} else if (userRole === "moderator") { showModeratorPanel();
} else if (userRole === "user") { showUserPanel();
} else { showGuestPanel();
}
Здесь:
Если роль — "admin" — показывается панель администратора, и проверка останавливается.
Если роль — "moderator" — показывается панель модератора, даже если бы были другие условия, они не проверяются.
Если ни одно из известных значений не подошло — показывается панель гостя.
Представьте, что вы перепутали порядок:if (userRole === "user") { showUserPanel();
} else if (userRole === "moderator") { showModeratorPanel();
} else if (userRole === "admin") { showAdminPanel();
}
Если пользователь имеет роль "admin", он попадёт в блок "user", потому что "admin" содержит "user" как подстроку? Нет — в данном случае сравнение строгое (===), так что не сработает. Но если бы вы использовали indexOf или includes, ошибки были бы критичны.Более реальный пример с ошибкой:const score = 95; if (score &gt;= 60) { grade = "C"; // Всегда сработает первым!
} else if (score &gt;= 80) { grade = "B";
} else if (score &gt;= 90) { grade = "A";
}
Здесь оценка 95 получит "C", потому что первое условие score &gt;= 60 уже истинно. Правильно:if (score &gt;= 90) { grade = "A";
} else if (score &gt;= 80) { grade = "B";
} else if (score &gt;= 60) { grade = "C";
} else { grade = "F";
}
const themeSetting = "dark"; if (themeSetting === "light") { document.body.classList.remove("dark-theme"); document.body.classList.add("light-theme");
} else if (themeSetting === "dark") { document.body.classList.remove("light-theme"); document.body.classList.add("dark-theme");
} else if (themeSetting === "system") { if (window.matchMedia("(prefers-color-scheme: dark)").matches) { document.body.classList.add("dark-theme"); } else { document.body.classList.add("light-theme"); }
} else { // значение неизвестно — используем по умолчанию document.body.classList.add("light-theme");
}
Здесь три явных варианта и один запасной — логика понятна, читаема, и порядок условий критичен.]]></description><link>материалы/подтемы/секция-1.-javascript/тема-№7/цепочки-`else-if`.html</link><guid isPermaLink="false">Материалы/Подтемы/Секция 1. JavaScript/Тема №7/Цепочки `else if`.md</guid><pubDate>Wed, 24 Sep 2025 06:56:04 GMT</pubDate></item><item><title><![CDATA[Оператор `else`]]></title><description><![CDATA[Оператор else используется вместе с if, чтобы указать, что нужно выполнить альтернативный блок кода, если условие в if ложно.Синтаксис:if (условие) { // выполнится, если условие истинно
} else { // выполнится, если условие ложно
}
else не имеет собственного условия — он всегда связан с ближайшим предыдущим if.Пример: проверка наличия интернет-соединенияconst isConnected = navigator.onLine; if (isConnected) { syncData();
} else { showOfflineMessage(); saveToLocalCache();
}
Здесь программа либо синхронизирует данные, либо показывает сообщение и сохраняет их локально — в зависимости от состояния сети. Нет третьего варианта — только два пути.
else не может существовать без if.
else выполняется, только если ни один из предыдущих if (или else if) не сработал.
Можно использовать else даже без фигурных скобок — но снова, всегда используйте скобки для ясности и безопасности.
]]></description><link>материалы/подтемы/секция-1.-javascript/тема-№7/оператор-`else`.html</link><guid isPermaLink="false">Материалы/Подтемы/Секция 1. JavaScript/Тема №7/Оператор `else`.md</guid><pubDate>Wed, 24 Sep 2025 06:55:12 GMT</pubDate></item><item><title><![CDATA[Оператор `if`]]></title><description><![CDATA[Оператор if выполняет блок кода, только если условие в скобках истинно.Базовый синтаксис:if (условие) { // код, который выполнится, если условие истинно
}
Условие — это выражение, которое возвращает true или false. В JavaScript к false приводятся значения: false, 0, "" (пустая строка), null, undefined, NaN. Всё остальное — true.Пример: проверка, авторизован ли пользовательconst userToken = localStorage.getItem("token"); if (userToken) { console.log("Пользователь авторизован"); loadUserProfile();
}
Здесь userToken может быть строкой (истина) или null (ложь). Если токен есть — вызываем функцию загрузки профиля. Если нет — ничего не делаем.Нет, они не обязательны, если в блоке if только одна строка:if (userToken) console.log("Пользователь авторизован");
Но рекомендуется всегда использовать фигурные скобки, даже для одной строки.Почему?
Избегает ошибок при доработке кода:
if (userToken) console.log("Пользователь авторизован"); loadUserProfile(); // Эта строка ВСЕГДА выполнится — вне зависимости от условия!
Здесь loadUserProfile() не в блоке if, потому что нет скобок. Это распространённая ошибка. Улучшает читаемость и согласованность кода в команде. Снижает риск багов при рефакторинге. Правило: всегда пишите скобки.if (userToken) { console.log("Пользователь авторизован"); loadUserProfile();
}
]]></description><link>материалы/подтемы/секция-1.-javascript/тема-№7/оператор-`if`.html</link><guid isPermaLink="false">Материалы/Подтемы/Секция 1. JavaScript/Тема №7/Оператор `if`.md</guid><pubDate>Wed, 24 Sep 2025 06:52:29 GMT</pubDate></item><item><title><![CDATA[Что такое ветвление]]></title><description><![CDATA[Ветвление — это механизм, при котором программа выбирает, какой участок кода выполнить, в зависимости от того, истинно или ложно условие.В любых программах это используется повсеместно: например, если пользователь авторизован — показываем главный экран, иначе — экран входа. Или если сеть доступна — загружаем данные, иначе — показываем сообщение об ошибке.В JavaScript ветвление реализуется с помощью условных конструкций: if, else, else if, switch и тернарного оператора.Без ветвления программа выполняет команды строго сверху вниз — как линейный список. С ветвлением она становится адаптивной: реагирует на данные, состояние системы, действия пользователя.Пример:const isLoggedIn = true; if (isLoggedIn) { console.log("Добро пожаловать!");
} else { console.log("Пожалуйста, войдите в аккаунт.");
}
Здесь программа ведёт себя по-разному в зависимости от значения isLoggedIn. Это и есть ветвление.]]></description><link>материалы/подтемы/секция-1.-javascript/тема-№7/что-такое-ветвление.html</link><guid isPermaLink="false">Материалы/Подтемы/Секция 1. JavaScript/Тема №7/Что такое ветвление.md</guid><pubDate>Wed, 24 Sep 2025 06:51:03 GMT</pubDate></item><item><title><![CDATA[Тема №6. Git, GitHub]]></title><description><![CDATA[В этой теме вы познакомитесь с системой контроля версий Git и платформой GitHub — основными инструментами для управления кодом в командной разработке. Изучите базовые команды для отслеживания изменений, создания коммитов и взаимодействия с удалённым репозиторием. Это необходимо для совместной работы над мобильными приложениями, а также для хранения и публикации вашего кода.
<a data-href="Что такое Git" href="материалы/подтемы/секция-1.-javascript/тема-№6/что-такое-git.html" class="internal-link" target="_self" rel="noopener nofollow">Что такое Git</a>
<br><a data-href="Основные понятия Git" href="материалы/подтемы/секция-1.-javascript/тема-№6/основные-понятия-git.html" class="internal-link" target="_self" rel="noopener nofollow">Основные понятия Git</a>
<br><a data-href="Базовые команды Git" href="материалы/подтемы/секция-1.-javascript/тема-№6/базовые-команды-git.html" class="internal-link" target="_self" rel="noopener nofollow">Базовые команды Git</a>
<br><a data-href="Работа с ветками Git" href="материалы/подтемы/секция-1.-javascript/тема-№6/работа-с-ветками-git.html" class="internal-link" target="_self" rel="noopener nofollow">Работа с ветками Git</a>
<br><a data-href="Что такое GitHub" href="материалы/подтемы/секция-1.-javascript/тема-№6/что-такое-github.html" class="internal-link" target="_self" rel="noopener nofollow">Что такое GitHub</a>
<br><a data-href="Работа с удалёнными репозиториями" href="материалы/подтемы/секция-1.-javascript/тема-№6/работа-с-удалёнными-репозиториями.html" class="internal-link" target="_self" rel="noopener nofollow">Работа с удалёнными репозиториями</a>
<br><a data-href="Файл .gitignore" href="материалы/подтемы/секция-1.-javascript/тема-№6/файл-.gitignore.html" class="internal-link" target="_self" rel="noopener nofollow">Файл .gitignore</a>
<br><a data-href="Рекомендации по использованию Git" href="материалы/подтемы/секция-1.-javascript/тема-№6/рекомендации-по-использованию-git.html" class="internal-link" target="_self" rel="noopener nofollow">Рекомендации по использованию Git</a>
(Пусто)<br><a data-href="Тема №7. Ветвление в JavaScript" href=".html" class="internal-link" target="_self" rel="noopener nofollow">Тема №7. Ветвление в JavaScript</a>]]></description><link>лекции/секция-1.-javascript/тема-№6.-git,-github.html</link><guid isPermaLink="false">Лекции/Секция 1. JavaScript/Тема №6. Git, GitHub.md</guid><pubDate>Fri, 19 Sep 2025 18:16:12 GMT</pubDate></item><item><title><![CDATA[Рекомендации по использованию Git]]></title><description><![CDATA[Делайте коммиты часто — не ждите, пока «всё будет готово».
Маленький коммит — это безопасный снимок состояния.
Если что-то сломалось — вы легко найдёте, где именно.Пример плохой практики:
Вы работаете над экраном входа 3 дня — меняете App.js, LoginScreen.js, api.js, styles.tsx — и только тогда делаете один коммит:
"finished login" — непонятно, что изменилось.Пример хорошей практики: Добавил кнопку входа → feat: добавил кнопку входа с анимацией Подключил API для авторизации → feat: подключил POST /login к серверу Исправил баг с фокусом поля ввода → fix: исправил фокус на поле email в iOS
Каждый коммит — отдельная логическая единица.
Легче откатиться, легче ревью, легче находить баги.Сообщение коммита — это история вашего кода.
Оно должно отвечать на вопрос: «Что изменилось и зачем?»Хорошее сообщение:
fix: убрал дублирование стилей в Button и PrimaryButtonПлохое сообщение:
fixed stuffИспользуйте формат:&lt;тип&gt;: &lt;краткое описание&gt;
Типы (по соглашению Conventional Commits):
feat: — новая функция
fix: — исправление бага
docs: — изменения в документации
chore: — технические задачи (обновление зависимостей, настройка сборки)
refactor: — рефакторинг без изменения поведения
Пример:git commit -m "feat: добавил экран восстановления пароля"
git commit -m "fix: кнопка 'Войти' не реагировала на тач в Android"
git commit -m "chore: обновил expo SDK до версии 50" Не пишите «исправил ошибку», «сделал лучше» — это неинформативно.
Пишите что было сделано, где, и если важно — почему.
Никогда не работайте напрямую в main.
Всегда создавайте ветку для каждой задачи.Пример:git switch main
git pull
git switch -c feature/login-screen
# ... работаю над экраном входа ...
git add .
git commit -m "feat: добавил экран входа с валидацией"
git push origin feature/login-screen
Затем на GitHub создаёте Pull Request (или Merge Request).
После ревью — объединяете с main.Это даёт:
Безопасность: основной код не ломается.
Чёткость: каждая ветка — одна задача.
Коллаборацию: другие могут видеть вашу работу, комментировать, предлагать правки.
Возможность отложить: если задача не готова — вы можете закрыть ветку без влияния на проект. Если вы работаете над двумя задачами одновременно — две ветки.
Если вы исправляете баг — ветка bugfix/....
Если вы экспериментируете — ветка experiment/....
Если вы добавляете новые фичи — ветка feature/.... Ветки — это ваша страховка.
Они бесплатны. Они не занимают места.
Используйте их всегда.
]]></description><link>материалы/подтемы/секция-1.-javascript/тема-№6/рекомендации-по-использованию-git.html</link><guid isPermaLink="false">Материалы/Подтемы/Секция 1. JavaScript/Тема №6/Рекомендации по использованию Git.md</guid><pubDate>Fri, 19 Sep 2025 18:15:51 GMT</pubDate></item><item><title><![CDATA[Файл .gitignore]]></title><description><![CDATA[Файл .gitignore указывает Git, какие файлы и папки не нужно отслеживать.
Он предотвращает попадание в репозиторий временных, системных или чувствительных файлов, которые не нужны другим разработчикам.Примеры файлов, которые никогда не должны быть в репозитории:
node_modules/ — папка с зависимостями React Native (устанавливается через npm install)
.env — файл с секретными ключами (API-ключи, токены, пароли)
build/, ios/, android/ — скомпилированные бинарники (они разные на каждом компьютере)
.DS_Store, Thumbs.db — системные файлы macOS и Windows
*.log, *.tmp — логи и временные файлы
Создайте файл .gitignore в корне проекта:touch .gitignore
И добавьте туда строки:node_modules/
.env
build/
ios/
android/
*.log
*.tmp
.DS_Store
После этого Git перестанет отслеживать эти файлы — даже если вы выполните git add ..
Если файл уже был добавлен в репозиторий — .gitignore его не игнорирует.
Сначала удалите его из индекса: git rm -r --cached node_modules/
git commit -m "Убрал node_modules из репозитория" Вот стандартный .gitignore для React Native-проекта:# Dependencies
node_modules/ # Environment
.env
.env.local
.env.development
.env.production # Build output
build/
ios/
android/ # Logs
*.log
npm-debug.log* # IDE and editor
.vscode/
.idea/
*.swp
*.swo # OS
.DS_Store
Thumbs.db # Testing
coverage/ # Expo
.expo/
.expo-shared/ Вы можете использовать шаблоны из <a data-tooltip-position="top" aria-label="https://github.com/github/gitignore" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/github/gitignore" target="_self">github.com/github/gitignore</a> — там есть готовые .gitignore для React Native, Expo, iOS, Android.
]]></description><link>материалы/подтемы/секция-1.-javascript/тема-№6/файл-.gitignore.html</link><guid isPermaLink="false">Материалы/Подтемы/Секция 1. JavaScript/Тема №6/Файл .gitignore.md</guid><pubDate>Fri, 19 Sep 2025 18:13:10 GMT</pubDate></item><item><title><![CDATA[Работа с удалёнными репозиториями]]></title><description><![CDATA[Чтобы отправить локальный репозиторий на GitHub, нужно связать его с удалённым.git remote add origin https://github.com/username/MyMobileApp.git origin — это имя, которое вы даёте удалённому репозиторию (по умолчанию так называют главный удалённый репозиторий).
URL берётся из вашего репозитория на GitHub — кнопка «Code» → «HTTPS».
Проверить, что привязка прошла:git remote -v
Вывод:origin https://github.com/username/MyMobileApp.git (fetch)
origin https://github.com/username/MyMobileApp.git (push) Не используйте git remote add origin если репозиторий уже имеет удалённую связь — это вызовет ошибку.
Отправляет ваши локальные коммиты в удалённый репозиторий.git push origin main
Первый раз, когда вы отправляете ветку — Git может попросить аутентификацию (логин/пароль или токен).
На GitHub с 2021 года пароли не работают — используйте Personal Access Token (PAT) вместо пароля.
Если вы работаете с веткой feature/login-screen:git push origin feature/login-screen
После первого push можно использовать короткую команду:git push
Git запомнит, куда отправлять изменения для текущей ветки.Загружает изменения с удалённого репозитория и объединяет их с вашей текущей веткой.git pull origin main
Это эквивалент двух команд:git fetch origin main
git merge origin/main
Пример:
Коллега добавил новый экран в main. Вы выполняете:git switch main
git pull
Теперь у вас есть последние изменения — даже если вы работали офлайн.
⚠️ Если у вас есть незакоммиченные изменения — pull может сломаться.
В этом случае сначала сделайте git stash, потом pull, потом git stash pop.
Создаёт локальную копию удалённого репозитория — со всей историей, ветками и файлами.git clone https://github.com/username/MyMobileApp.git
После этой команды:
Создаётся папка MyMobileApp/
Внутри — все файлы, ветки, история коммитов
Автоматически создаётся связь origin с исходным репозиторием
Пример:
Вы присоединяетесь к команде. Вам дают ссылку на репозиторий — вы клонируете его и сразу можете работать:cd MyMobileApp
npm install
npx expo start Используйте git clone только при начале работы над проектом.
Для обновления существующего репозитория — используйте git pull.
]]></description><link>материалы/подтемы/секция-1.-javascript/тема-№6/работа-с-удалёнными-репозиториями.html</link><guid isPermaLink="false">Материалы/Подтемы/Секция 1. JavaScript/Тема №6/Работа с удалёнными репозиториями.md</guid><pubDate>Fri, 19 Sep 2025 18:10:50 GMT</pubDate></item><item><title><![CDATA[Что такое GitHub]]></title><description><![CDATA[GitHub — это хостинг для Git-репозиториев.
Это веб-платформа, где можно хранить код, делиться им с другими и работать совместно.
Хранение — ваш репозиторий сохраняется на сервере GitHub, даже если ваш компьютер сломается.
Обмен — вы можете дать доступ другим разработчикам или сделать репозиторий публичным.
Совместная работа — через pull requests, комментарии, задачи (issues), код-ревью.
Пример:
Вы разрабатываете мобильное приложение на React Native.
Вы закоммитили изменения локально, но хотите, чтобы команда увидела ваш код — вы отправляете его на GitHub.
Другой разработчик клонирует репозиторий, проверяет код, предлагает правки — вы вносите их и снова публикуете.Git — это инструмент, который работает на вашем компьютере.
GitHub — это сервис, который предоставляет место для хранения Git-репозиториев в облаке.
Git — как ручка и тетрадь.
GitHub — как облако, куда вы сканируете тетрадь, чтобы другие могли её видеть.
Вы можете использовать Git без GitHub — локально, на своём компьютере.
Но вы не можете использовать GitHub без Git — он требует репозитория, созданный с помощью Git.
GitHub — это не единственный хостинг. Есть GitLab, Bitbucket, Gitea.
Но GitHub — самый популярный, особенно в открытых проектах и при поиске работы.
]]></description><link>материалы/подтемы/секция-1.-javascript/тема-№6/что-такое-github.html</link><guid isPermaLink="false">Материалы/Подтемы/Секция 1. JavaScript/Тема №6/Что такое GitHub.md</guid><pubDate>Fri, 19 Sep 2025 18:08:56 GMT</pubDate></item><item><title><![CDATA[Работа с ветками Git]]></title><description><![CDATA[Показывает все ветки в репозитории. Текущая ветка отмечена звёздочкой *.git branch
Пример вывода: main
* feature/login-screen bugfix/button-color
Здесь вы находитесь в ветке feature/login-screen.Чтобы увидеть только удалённые ветки (на сервере):git branch -r
Чтобы увидеть все ветки — локальные и удалённые:git branch -a
Переключает рабочую директорию на указанную ветку.
Изменения в файлах сохраняются, если они не конфликтуют.git checkout feature/login-screen
Если ветка ещё не существует локально, но есть на сервере — можно создать и переключиться сразу:git checkout feature/login-screen
# если ветка не найдена локально — выдаст ошибку
Чтобы создать новую ветку и сразу переключиться:git checkout -b feature/auth-google checkout — многофункциональная команда: она может переключать ветки, восстанавливать файлы, и даже переходить к коммитам. Это может запутать новичков.
Появилась в Git 2.23 как более понятная альтернатива для переключения веток.
Работает только с ветками — меньше шансов ошибиться.git switch feature/login-screen
Создать новую ветку и переключиться:git switch -c feature/auth-google ✅ Рекомендуется использовать git switch для переключения между ветками.
Оставьте git checkout только для восстановления файлов или перехода к старым коммитам.
Объединяет изменения из одной ветки в текущую.
Работает только после переключения на целевую ветку.Пример: вы закончили работу в feature/login-screen и хотите добавить изменения в main.git switch main
git merge feature/login-screen
Если изменений нет в конфликте — Git сделает быстрое слияние (fast-forward).
Если в main были новые коммиты — Git создаст отдельный коммит слияния.Пример вывода после успешного слияния:Updating a1b2c3d..f9e8d7c
Fast-forward src/screens/Login.js | 20 ++++++++++++++++++++ 1 file changed, 20 insertions(+) create mode 100644 src/screens/Login.js
Если возникает конфликт — Git остановится и попросит вас разрешить его вручную.
Файлы с конфликтами будут помечены специальными маркерами:&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
&lt;Text&gt;Войти&lt;/Text&gt;
=======
&lt;Text style={styles.bold}&gt;Войти&lt;/Text&gt;
&gt;&gt;&gt;&gt;&gt;&gt;&gt; feature/login-screen
Разрешите конфликт — удалите маркеры, оставьте нужный код — затем:git add src/components/Button.js
git commit ⚠️ Не делайте слияние в main с незавершёнными или неотлаженными фичами.
Всегда тестируйте ветку перед слиянием.
]]></description><link>материалы/подтемы/секция-1.-javascript/тема-№6/работа-с-ветками-git.html</link><guid isPermaLink="false">Материалы/Подтемы/Секция 1. JavaScript/Тема №6/Работа с ветками Git.md</guid><pubDate>Fri, 19 Sep 2025 18:04:55 GMT</pubDate></item><item><title><![CDATA[Что такое Git]]></title><description><![CDATA[Git — это распределённая система контроля версий.
Это означает, что каждый разработчик имеет полную копию истории изменений проекта на своём компьютере — не только последнюю версию файла, но и все прошлые состояния.Без Git вы работаете с файлами как с обычными документами: сохраняете, переписываете, теряете изменения.
Git решает три основные проблемы: История изменений
Вы можете посмотреть, кто, когда и что изменил в любом файле.
Пример: вы заметили, что кнопка перестала работать. С помощью Git вы найдёте, в каком коммите это произошло. Откат к предыдущему состоянию
Если вы внесли ошибку — можно вернуть проект к тому состоянию, когда всё работало.
Пример: git reset --hard a1b2c3d Это вернёт весь проект к коммиту с хешем a1b2c3d. Сотрудничество
Несколько человек могут работать над одним проектом одновременно, не мешая друг другу.
Каждый работает в своей копии, потом объединяет изменения. Пример:
Вы работаете в самолёте. В Git: можете делать коммиты, создавать ветки, просматривать историю — всё работает. В SVN: ничего не сможете сделать, пока не выйдете в сеть.
Git — это инструмент, который работает на вашем компьютере.
Он не требует интернета, чтобы функционировать.
Это делает его надёжным и удобным даже в условиях плохого соединения или при работе офлайн.]]></description><link>материалы/подтемы/секция-1.-javascript/тема-№6/что-такое-git.html</link><guid isPermaLink="false">Материалы/Подтемы/Секция 1. JavaScript/Тема №6/Что такое Git.md</guid><pubDate>Fri, 19 Sep 2025 18:03:27 GMT</pubDate></item><item><title><![CDATA[Основные понятия Git]]></title><description><![CDATA[Репозиторий — это папка, в которой Git отслеживает все изменения файлов.
Он хранит всю историю проекта: все коммиты, ветки, настройки.Создать репозиторий можно в любой папке:git init
После этой команды в папке появляется скрытая папка .git — именно там Git хранит всю информацию.
Не удаляйте её — без неё репозиторий перестанет работать.Пример:
Вы создаёте мобильное приложение на React Native. Папка MyMobileApp/ становится репозиторием — Git будет следить за всеми изменениями в файлах App.js, src/components/Button.js, package.json, ios/ и android/.Коммит — это сохранённое состояние проекта на определённый момент.
Это как снимок экрана вашего кода, который вы можете вернуть в любое время.Каждый коммит имеет уникальный хеш (например, a1b2c3d4) и сообщение, описывающее, что было изменено.Пример создания коммита:git add src/components/LoginButton.js
git commit -m "Добавил кнопку входа с анимацией" git add — выбирает изменения для сохранения.
git commit — фиксирует их как единое целое.
Важно: коммит — это не просто сохранение файла. Это логическая единица изменений.
Хороший коммит делает одну вещь и говорит, что именно он сделал.Пример плохого коммита:
"fixed stuff" — непонятно, что исправлено.Пример хорошего коммита:
"Исправил баг: кнопка входа не реагировала на тач в Android" — ясно, понятно, воспроизводимо.Ветка — это изолированная линия разработки.
По умолчанию при создании репозитория создаётся ветка main.Вы можете создавать новые ветки для работы над новой функцией, исправлением бага или экспериментом — и не мешать основной версии приложения.Пример:git branch feature/login-animation
git switch feature/login-animation
Теперь вы работаете в ветке feature/login-animation.
Все изменения — только здесь.
Когда функция готова — вы объедините её с main.Это позволяет:
Не ломать рабочую версию приложения.
Параллельно работать над несколькими задачами.
Легко откатиться, если что-то пошло не так.
Пример сценария:
Вы добавляете анимацию при входе в приложении.
Другой разработчик работает над авторизацией через Google.
Оба работают в своих ветках — никаких конфликтов до момента слияния.Git отслеживает файлы по четырём состояниям. Понимание этих состояний — ключ к работе с Git.Чтобы посмотреть текущее состояние всех файлов:git status
Пример последовательности:
Вы создали src/screens/AuthScreen.js → untracked
Вы выполнили git add src/screens/AuthScreen.js → staged
Вы выполнили git commit -m "Добавил экран авторизации" → теперь файл tracked, изменения зафиксированы
Вы снова отредактировали src/screens/AuthScreen.js → теперь он modified Запомните: чтобы сохранить изменения — нужно сначала add, потом commit.
Нельзя сделать коммит, не добавив изменения в staging-зону.
]]></description><link>материалы/подтемы/секция-1.-javascript/тема-№6/основные-понятия-git.html</link><guid isPermaLink="false">Материалы/Подтемы/Секция 1. JavaScript/Тема №6/Основные понятия Git.md</guid><pubDate>Fri, 19 Sep 2025 18:03:19 GMT</pubDate></item><item><title><![CDATA[Базовые команды Git]]></title><description><![CDATA[Создаёт новый Git-репозиторий в текущей папке.
После этой команды появляется скрытая папка .git — она хранит всю историю проекта.git init
Пример:
Вы начинаете новый проект на React Native:cd MyMobileApp
git init
Теперь Git отслеживает все файлы в папке MyMobileApp/: App.js, package.json, src/, android/, ios/.
⚠️ Не запускайте git init внутри уже существующего репозитория — это сломает структуру.
Добавляет изменения файлов в staging area — область, откуда они будут включены в следующий коммит.Добавить один файл:git add src/components/LoginButton.js
Добавить все изменённые и новые файлы:git add .
Добавить все файлы, кроме игнорируемых (через .gitignore):git add -A
Пример:
Вы изменили App.js и создали src/screens/Home.js.
Чтобы зафиксировать оба:git add App.js src/screens/Home.js Важно: git add не сохраняет изменения — он только готовит их к сохранению.
Без git commit изменения не зафиксируются.
Сохраняет все подготовленные изменения как один коммит.
Обязательно нужно указывать сообщение с флагом -m.git commit -m "Добавил экран Home с приветствием"
Пример хорошего сообщения:
"Исправил баг: HomeScreen не отображался на Android 12" — понятно, конкретно, воспроизводимо.Пример плохого сообщения:
"fixed" — ничего не объясняет.
Коммит — это логическая единица. Делайте один коммит на одну задачу.
Показывает, какие файлы изменены, какие добавлены, а какие ещё не отслеживаются.git status
Вывод может выглядеть так:On branch main
Changes not staged for commit: modified: src/components/Button.js Untracked files: src/screens/Home.js Changes to be committed: new file: src/utils/api.js
Это помогает понять:
— Что вы сделали?
— Что ещё нужно добавить?
— Что уже готово к коммиту?Показывает список всех коммитов в текущей ветке — от самого нового к самому старому.git log
Вывод:commit a1b2c3d4e5f67890...
Author: Ivan Petrov &lt;ivan@example.com&gt;
Date: Mon Apr 1 10:30:00 2025 +0300 Добавил экран Home с приветствием commit f9e8d7c6b5a4a3b2...
Author: Ivan Petrov &lt;ivan@example.com&gt;
Date: Sun Mar 31 15:20:00 2025 +0300 Настроил стили кнопок
Короткая версия (только хеш и сообщение):git log --oneline
Вывод:a1b2c3d Добавил экран Home с приветствием
f9e8d7c Настроил стили кнопок Используйте git log --oneline чаще — он удобнее для быстрого просмотра.
Показывает, что именно изменилось в файлах между рабочей директорией и последним коммитом.git diff
Пример вывода:diff --git a/src/components/Button.js b/src/components/Button.js
index 1234567..89abcde 100644
--- a/src/components/Button.js
+++ b/src/components/Button.js
@@ -5,7 +5,7 @@ const Button = () =&gt; ( &lt;View style={styles.container}&gt;
- &lt;Text&gt;Войти&lt;/Text&gt;
+ &lt;Text style={styles.bold}&gt;Войти&lt;/Text&gt; &lt;/View&gt; );
Здесь:
- — удалённая строка
+ — добавленная строка
Если вы хотите увидеть изменения, которые уже добавлены в staging (и готовы к коммиту):git diff --cached git diff без флагов — показывает не добавленные изменения.
git diff --cached — показывает добавленные, но ещё не закоммиченные.
]]></description><link>материалы/подтемы/секция-1.-javascript/тема-№6/базовые-команды-git.html</link><guid isPermaLink="false">Материалы/Подтемы/Секция 1. JavaScript/Тема №6/Базовые команды Git.md</guid><pubDate>Fri, 19 Sep 2025 18:02:46 GMT</pubDate></item><item><title><![CDATA[Базовые понятия Git]]></title><link>материалы/подтемы/секция-1.-javascript/тема-№6/базовые-понятия-git.html</link><guid isPermaLink="false">Материалы/Подтемы/Секция 1. JavaScript/Тема №6/Базовые понятия Git.md</guid><pubDate>Fri, 19 Sep 2025 18:01:25 GMT</pubDate></item><item><title><![CDATA[Тема №5. Операторы и операции в JavaScript]]></title><description><![CDATA[В этой теме вы изучите основные операторы и операции языка JavaScript, которые позволяют выполнять вычисления, сравнивать значения, управлять логикой программы и изменять данные. Понимание операторов — база для написания условий, циклов и обработки данных в мобильных приложениях. Особое внимание уделено особенностям JavaScript: неявному приведению типов, различиям между строгим и нестрогим сравнением, а также операторам присваивания и распространения.
<a data-href="Определение оператора и операнда" href="материалы/подтемы/секция-1.-javascript/определение-оператора-и-операнда.html" class="internal-link" target="_self" rel="noopener nofollow">Определение оператора и операнда</a>
<br><a data-href="Арифметические операторы JavaScript" href="материалы/подтемы/секция-1.-javascript/арифметические-операторы-javascript.html" class="internal-link" target="_self" rel="noopener nofollow">Арифметические операторы JavaScript</a>
<br><a data-href="Операторы сравнения JavaScript" href="материалы/подтемы/секция-1.-javascript/операторы-сравнения-javascript.html" class="internal-link" target="_self" rel="noopener nofollow">Операторы сравнения JavaScript</a>
<br><a data-href="Логические операторы JavaScript" href="материалы/подтемы/секция-1.-javascript/логические-операторы-javascript.html" class="internal-link" target="_self" rel="noopener nofollow">Логические операторы JavaScript</a>
<br><a data-href="Операторы присваивания JavaScript" href="материалы/подтемы/секция-1.-javascript/операторы-присваивания-javascript.html" class="internal-link" target="_self" rel="noopener nofollow">Операторы присваивания JavaScript</a>
<br><a data-href="Операторы работы с битами" href="материалы/подтемы/секция-1.-javascript/операторы-работы-с-битами.html" class="internal-link" target="_self" rel="noopener nofollow">Операторы работы с битами</a>
<br><a data-href="Приоритет операторов и ассоциативность" href="материалы/подтемы/секция-1.-javascript/приоритет-операторов-и-ассоциативность.html" class="internal-link" target="_self" rel="noopener nofollow">Приоритет операторов и ассоциативность</a>
(Пусто)<br><a data-href="Тема №6. Git, GitHub" href="лекции/секция-1.-javascript/тема-№6.-git,-github.html" class="internal-link" target="_self" rel="noopener nofollow">Тема №6. Git, GitHub</a>]]></description><link>лекции/секция-1.-javascript/тема-№5.-операторы-и-операции-в-javascript.html</link><guid isPermaLink="false">Лекции/Секция 1. JavaScript/Тема №5. Операторы и операции в JavaScript.md</guid><pubDate>Fri, 19 Sep 2025 17:52:52 GMT</pubDate></item><item><title><![CDATA[Приоритет операторов и ассоциативность]]></title><description><![CDATA[Приоритет операторов определяет порядок, в котором выполняются операции в выражении, когда скобки не указаны. Ассоциативность — направление вычисления (слева направо или справа налево), если операторы имеют одинаковый приоритет.
🔹 Важно: Операторы одной группы имеют одинаковый приоритет и выполняются в соответствии с ассоциативностью.
let result = 5 + 3 * 2;
// Выполняется как: 5 + (3 * 2) → 5 + 6 → 11
Умножение (*) имеет более высокий приоритет, чем сложение (+) — поэтому умножение выполняется первым.let a = true;
let b = false;
let c = true; let result = a || b &amp;&amp; c;
// Выполняется как: a || (b &amp;&amp; c) → true || (false &amp;&amp; true) → true || false → true
Оператор &amp;&amp; выше по приоритету, чем || — поэтому сначала вычисляется b &amp;&amp; c.let x = 10;
let y = x &gt; 5 ? "да" : x &lt; 3 ? "нет" : "не знаю";
// Эквивалентно: x &gt; 5 ? "да" : (x &lt; 3 ? "нет" : "не знаю")
Тернарный оператор ?: ассоциативен справа налево, поэтому вложенные условия обрабатываются корректно.let a = 1, b = 2, c = 3;
a = b += c *= 2;
// Выполняется как: c *= 2 → c = 6; b += c → b = 8; a = b → a = 8
// Порядок: справа налево, потому что `=` и составные операторы присваивания ассоциативны справа
Скобки — это не просто формальность. Они делают код предсказуемым и понятным даже для того, кто читает его впервые.if (user.isAdmin &amp;&amp; user.isActive || user.isGuest) { ... }
Что здесь реально проверяется?
→ (user.isAdmin &amp;&amp; user.isActive) || user.isGuestА если вы хотели:
→ user.isAdmin &amp;&amp; (user.isActive || user.isGuest)?Разница критична.if (user.isAdmin &amp;&amp; (user.isActive || user.isGuest)) { ... }
— Чётко видно намерение.// Без скобок — легко ошибиться
if (age &gt;= 18 &amp;&amp; role === 'admin' || role === 'moderator') { ... } // Скобки спасают
if (age &gt;= 18 &amp;&amp; (role === 'admin' || role === 'moderator')) { ... } Никогда не полагайтесь на память о приоритетах
Даже опытные разработчики ошибаются. Если есть сомнения — используйте скобки. Разбивайте сложные выражения на части
Вместо:
const isValid = !isEmpty &amp;&amp; (value.length &gt;= 5 &amp;&amp; value.includes("@")) || isTemp; Лучше:
const isEmpty = value.trim().length === 0;
const hasAtSymbol = value.includes("@");
const meetsLength = value.length &gt;= 5;
const isValid = !isEmpty &amp;&amp; (meetsLength &amp;&amp; hasAtSymbol) || isTemp; Используйте переносы для многострочных условий
if (user &amp;&amp; user.profile &amp;&amp; user.profile.isActive &amp;&amp; (user.role === 'admin' || user.role === 'editor')) { showDashboard();
} Не пишите «умные» однострочные конструкции ради экономии строк
Например:
// ❌ Непонятно
result = a &amp;&amp; b ? c : d || e; // ✅ Ясно
if (a &amp;&amp; b) { result = c;
} else { result = d || e;
} Для логических выражений — комментируйте намерение // Разрешить доступ, если пользователь админ ИЛИ (зарегистрирован и активен)
const canAccess = user.role === 'admin' || (user.registered &amp;&amp; user.active); ]]></description><link>материалы/подтемы/секция-1.-javascript/приоритет-операторов-и-ассоциативность.html</link><guid isPermaLink="false">Материалы/Подтемы/Секция 1. JavaScript/Приоритет операторов и ассоциативность.md</guid><pubDate>Wed, 17 Sep 2025 18:57:14 GMT</pubDate></item><item><title><![CDATA[Операторы работы с битами]]></title><description><![CDATA[Операторы работы с битами выполняют операции на уровне отдельных битов целочисленных значений. В мобильной разработке они встречаются редко, но могут быть полезны при оптимизации хранения флагов, работе с сетевыми протоколами, обработке изображений или взаимодействии с нативными модулями.Все битовые операции в JavaScript работают с 32-битными целыми числами. Любые числа перед операцией приводятся к этому формату (дробные части отбрасываются).Часто используется для хранения нескольких булевых состояний в одном числе.const READ = 1; // 0001
const WRITE = 2; // 0010
const EXEC = 4; // 0100
const DELETE = 8; // 1000 let permissions = READ | WRITE | EXEC; // 0111 = 7 // Проверяем, есть ли право на чтение:
if (permissions &amp; READ) { console.log("Можно читать"); // выполнится
} // Проверяем, есть ли право на удаление:
if (permissions &amp; DELETE) { console.log("Можно удалять"); // не выполнится
} ✅ Экономит память и ускоряет проверки в низкоуровневых сценариях — например, при передаче прав доступа через API или хранении настроек в локальном хранилище.
Объединяет несколько флагов в одно значение:let flags = 0;
flags |= READ; // 0001
flags |= WRITE; // 0011
flags |= EXEC; // 0111 console.log(flags); // 7
Используется для инвертирования конкретного флага:let theme = 0; // 0 — светлая, 1 — тёмная
theme ^= 1; // теперь theme = 1
theme ^= 1; // теперь theme = 0
Также применяется в алгоритмах шифрования или генерации контрольных сумм.Применяется для преобразования чисел и часто встречается в сочетании с indexOf:const arr = ["apple", "banana", "cherry"];
const index = arr.indexOf("banana"); if (~index) { // эквивалентно: if (index !== -1) console.log("Найдено");
} ❗ Устаревший стиль. Современный код предпочтительно пишет так:
if (index !== -1) — более читаемо и понятно.
console.log(5 &lt;&lt; 1); // 10 → 5 * 2¹
console.log(5 &lt;&lt; 2); // 20 → 5 * 2²
console.log(1 &lt;&lt; 3); // 8 → 2³ ⚠️ Работает только с целыми числами. Не заменяет Math.pow() для дробных степеней.
Полезно при оптимизации вычислений в играх, графических движках или обработке сигналов.console.log(8 &gt;&gt; 1); // 4 → 8 / 2
console.log(-8 &gt;&gt; 1); // -4 — знак сохранён
Сохраняет знак числа — подходит для целочисленного деления на 2, 4, 8 и т.д.Преобразует отрицательные числа в большие положительные:console.log(-8 &gt;&gt;&gt; 1); // 2147483644 — интерпретируется как беззнаковое число Используется редко — в основном при работе с бинарными данными (например, Uint32Array, WebAssembly). Хранение флагов в одной переменной: например, права пользователя, состояние UI-элемента, режимы приложения.
Оптимизация производительности: в низкоуровневых системах (игры, аудио/видео обработка).
Работа с нативными модулями: когда приложение использует JNI (Android) или Objective-C/Swift-код, где данные передаются как битовые маски.
Компрессия данных: при отправке маленьких наборов булевых значений через API.
]]></description><link>материалы/подтемы/секция-1.-javascript/операторы-работы-с-битами.html</link><guid isPermaLink="false">Материалы/Подтемы/Секция 1. JavaScript/Операторы работы с битами.md</guid><pubDate>Wed, 17 Sep 2025 18:50:09 GMT</pubDate></item><item><title><![CDATA[Операторы присваивания JavaScript]]></title><description><![CDATA[Операторы присваивания используются для записи значений в переменные. В JavaScript они делятся на базовые и составные, а также включают современные операторы, упрощающие работу с потенциально отсутствующими данными.Присваивает значение справа переменной слева.let count = 0;
let message = "Привет";
let isActive = true; Это единственный оператор, который создаёт переменную при первом использовании в глобальной области видимости (если не используется let/const — не рекомендуется).
Сокращённая форма операций, где значение переменной изменяется и сразу присваивается обратно.let score = 100; score += 25; // 125
score *= 2; // 250
score -= 50; // 200
score %= 60; // 20 (остаток от 200 ÷ 60)
score **= 2; // 400 (20²) console.log(score); // 400 ✅ Преимущество: короче, читаемее, немного эффективнее — особенно полезны в циклах и обработке данных.
Присваивает значение только если левый операнд равен null или undefined.let userLanguage = null;
userLanguage ??= "en"; // теперь userLanguage = "en" let userName = "";
userName ??= "Аноним"; // останется "", потому что "" ≠ null/undefined let settings = { theme: undefined };
settings.theme ??= "dark"; // theme станет "dark" console.log(settings.theme); // "dark" 💡 Отличие от =: ??= не перезаписывает существующие значения, даже если они ложные (0, "", false).
Это делает его идеальным для установки значений по умолчанию в конфигурациях, настройках, API-ответах.
let theme = localStorage.getItem("theme");
theme ??= "light"; // если не задано — использовать светлую тему let fontSize = localStorage.getItem("fontSize");
fontSize ??= 16; // если не задано — 16px console.log({ theme, fontSize });
Присваивает значение только если предшествующая цепочка существует (не null/undefined).let user = { profile: { name: "Иван" } }; // Попытка присвоить значение только если user.profile существует
user.profile?.name ??= "Гость"; // НЕ сработает — это не присваивание через ?.
user.profile?.age ??= 25; // НЕ сработает — age не существует, но ?. не создаёт свойства // А вот так:
user.profile?.age = 25; // ❌ Ошибка: нельзя присвоить, если user.profile не существует
На самом деле, ?.= — это оператор присваивания, а не объединения. Он работает следующим образом:let obj = {}; obj?.prop = 10; // ❌ ОШИБКА — SyntaxError: Invalid left-hand side expression // Правильно — только если объект существует:
let config = { settings: {} };
config.settings?.debug = true; // ✅ Работает — config.settings существует console.log(config.settings.debug); // true // Если объект отсутствует — ничего не происходит:
let data = null;
data?.value = "test"; // Ничего не произойдёт — ошибки нет
console.log(data); // null ⚠️ Важно: ?.= не создаёт свойства — он лишь пропускает присваивание, если левая часть null/undefined.
Он применяется только к существующим объектам и их вложенным свойствам.
function updateUser(user, newSettings) { user?.profile?.name = newSettings.name; user?.profile?.email = newSettings.email; user?.preferences?.theme = newSettings.theme;
} updateUser(null, { name: "Анна" }); // Ничего не сломается
updateUser({ profile: {} }, { name: "Анна" }); // profile.name = "Анна" — сработает ✅ Идеально подходит для работы с API-ответами, где структура может быть неполной. Не используйте ?.= для создания новых свойств в null/undefined объектах — это невозможно.
Не путайте ??= и ?.=: ??= — присваивает, если значение null/undefined ?.= — присваивает, только если путь существует ]]></description><link>материалы/подтемы/секция-1.-javascript/операторы-присваивания-javascript.html</link><guid isPermaLink="false">Материалы/Подтемы/Секция 1. JavaScript/Операторы присваивания JavaScript.md</guid><pubDate>Wed, 17 Sep 2025 18:41:36 GMT</pubDate></item><item><title><![CDATA[Операторы сравнения JavaScript]]></title><description><![CDATA[Операторы сравнения позволяют проверять отношения между значениями и возвращают логическое значение — true или false. В JavaScript важно понимать разницу между нестрогим и строгим сравнением, а также то, как язык приводит типы автоматически.Операторы == (равно) и != (не равно) выполняют приведение типов перед сравнением. Это означает, что JavaScript пытается преобразовать операнды к одному типу, чтобы сделать сравнение возможным.console.log(5 == "5"); // true — строка "5" приводится к числу 5
console.log(true == 1); // true — true приводится к 1
console.log(false == 0); // true — false приводится к 0
console.log("" == 0); // true — пустая строка приводится к 0
console.log(null == undefined); // true — особое правило: null и undefined равны друг другу
console.log("0" == false); // true — "0" → 0, false → 0 → 0 == 0
console.log([] == false); // true — пустой массив → "" → 0 → false → 0
Такие поведения могут привести к скрытым багам, особенно при обработке пользовательского ввода или данных из API.
✅ Правило: Избегайте == и != в production-коде.
Операторы === (строго равно) и !== (строго не равно) не выполняют приведение типов. Сравниваются и значение, и тип.console.log(5 === "5"); // false — разные типы: число и строка
console.log(true === 1); // false — boolean и number
console.log(5 === 5); // true — одинаковые тип и значение
console.log(null === undefined); // false — разные типы
console.log("" === 0); // false — строка не равна числу
Всегда используйте === и !==, если вам нужно точное совпадение.// Хорошо
if (userInput === "yes") { ... } // Плохо
if (userInput == "yes") { ... } // Может сработать на 1, true, "1"
Эти операторы сравнивают значения по величине. При сравнении разных типов JavaScript также применяет приведение, но по другим правилам.console.log(10 &gt; 5); // true
console.log(3 &lt;= 3); // true
Строки сравниваются по символам, в лексикографическом порядке (как в словаре):console.log("apple" &lt; "banana"); // true — 'a' &lt; 'b'
console.log("Z" &lt; "a"); // true — в ASCII 'Z' (90) &lt; 'a' (97)
console.log("10" &lt; "2"); // true — потому что "1" &lt; "2", сравнение по первому символу! ❗ Важно: "10" &lt; "2" даёт true, хотя числово 10 &gt; 2.
Это частая ошибка при сравнении строковых чисел.
Приведите их к числу:console.log(Number("10") &lt; Number("2")); // false
// или проще:
console.log(+ "10" &lt; + "2"); // false
]]></description><link>материалы/подтемы/секция-1.-javascript/операторы-сравнения-javascript.html</link><guid isPermaLink="false">Материалы/Подтемы/Секция 1. JavaScript/Операторы сравнения JavaScript.md</guid><pubDate>Wed, 17 Sep 2025 18:36:07 GMT</pubDate></item><item><title><![CDATA[Логические операторы JavaScript]]></title><description><![CDATA[Логические операторы — &amp;&amp; (И), || (ИЛИ) и ! (НЕ) — позволяют комбинировать и инвертировать логические значения. В JavaScript они работают не только с true и false, но и с любыми значениями, благодаря особенностям приведения типов и механизму короткого замыкания.Возвращает true, если оба операнда истинны.
Но в JavaScript он возвращает не булево значение, а один из операндов — первый ложный или последний истинный.console.log(true &amp;&amp; true); // true
console.log(true &amp;&amp; false); // false
console.log(5 &amp;&amp; "hello"); // "hello" — оба истинны, возвращён второй
console.log(0 &amp;&amp; "test"); // 0 — первый ложный, возвращён он же
console.log("" &amp;&amp; null); // "" — первый ложный
Если первый операнд — ложный, второй не вычисляется.function log() { console.log("Эта функция не вызовется"); return true;
} console.log(false &amp;&amp; log()); // false — функция log() НЕ была вызвана ✅ Это полезно для безопасного доступа к свойствам объектов:
const user = { profile: { name: "Alice" } }; // Безопасно: если user или user.profile отсутствуют — не будет ошибки
console.log(user &amp;&amp; user.profile &amp;&amp; user.profile.name); // "Alice" // Если бы user был undefined — выражение остановилось бы на первом шаге
Возвращает первый истинный операнд, или последний, если все ложные.console.log(true || false); // true
console.log(false || "world"); // "world"
console.log(0 || null || 5 || 10); // 5 — первый истинный
console.log("" || 0 || false); // false — все ложные, возвращён последний
Если первый операнд — истинный, второй не вычисляется.function log() { console.log("Эта функция вызовется только если нужно"); return "result";
} console.log(true || log()); // true — функция log() НЕ вызвана
function greet(name) { name = name || "Гость"; // если name пустой/ложный — использовать "Гость" console.log(`Привет, ${name}!`);
} greet(); // "Привет, Гость!"
greet(""); // "Привет, Гость!"
greet(null); // "Привет, Гость!"
greet("Анна"); // "Привет, Анна!"
greet(0); // "Привет, Гость!" — осторожно! ⚠️ Внимание: 0, "", null, undefined, NaN — всё это ложные значения.
Если вы ожидаете 0 как валидный ввод — такой подход сломается.
function greet(name) { name = name ?? "Гость"; // только null или undefined → заменяются console.log(`Привет, ${name}!`);
} greet(0); // "Привет, 0!" — правильно!
greet(undefined); // "Привет, Гость!" ✅ Рекомендация: в современных приложениях используйте ?? вместо || для установки значений по умолчанию, если вам важно отличать 0, false, "" от null/undefined.
Инвертирует значение операнда. Возвращает булево значение (true или false).console.log(!true); // false
console.log(!false); // true
console.log(!"hello"); // false — строка истинна
console.log(!0); // true — 0 ложен
console.log(!{}); // false — объект истинен
console.log(!!"text"); // true — двойное отрицание приводит к булеву значению
const isEmpty = !array.length; // true, если массив пуст
const hasUser = !!user; // true, если user существует и не null/undefined ✅ Двойное отрицание !!value — популярный способ явно преобразовать любое значение в булево.
Приоритет (с высшего к низшему):
! — НЕ (наиболее высокий)
&amp;&amp; — И
|| — ИЛИ (наименьший)
console.log(true || false &amp;&amp; false); // true
// Эквивалентно: true || (false &amp;&amp; false) → true || false → true
Чтобы избежать путаницы — всегда используйте скобки:console.log((true || false) &amp;&amp; false); // false
(Больше про приоритет операторов будет в этой же теме)]]></description><link>материалы/подтемы/секция-1.-javascript/логические-операторы-javascript.html</link><guid isPermaLink="false">Материалы/Подтемы/Секция 1. JavaScript/Логические операторы JavaScript.md</guid><pubDate>Wed, 17 Sep 2025 18:35:49 GMT</pubDate></item><item><title><![CDATA[Арифметические операторы JavaScript]]></title><description><![CDATA[Арифметические операторы — это основные инструменты для выполнения математических вычислений в JavaScript. Они работают с числами и возвращают числовые результаты.Пример использования остатка: const isEven = number =&gt; number % 2 === 0;
console.log(isEven(4)); // true
console.log(isEven(7)); // false
Оператор ** возводит первое число в степень, указанную вторым:console.log(2 ** 4); // 16 (2 × 2 × 2 × 2)
console.log(9 ** 0.5); // 3 (квадратный корень из 9)
Это удобно для расчётов: например, при вычислении площади квадрата или сложных процентов.Унарный плюс + преобразует значение в число:console.log(+"42"); // 42 (строка → число)
console.log(+"hello"); // NaN (непреводимая строка)
console.log(+true); // 1
console.log(+false); // 0
Унарный минус - меняет знак числа:console.log(-5); // -5
console.log(-(3 + 2)); // -5
console.log(-"10"); // -10 (сначала приведение к числу, потом отрицание)
Инкремент ++ увеличивает значение на 1, декремент -- уменьшает на 1.Различают две формы:Сначала изменяет значение, потом возвращает его:let a = 5;
console.log(++a); // 6 — сначала прибавили, потом вернули
console.log(a); // 6
Сначала возвращает текущее значение, потом изменяет:let b = 5;
console.log(b++); // 5 — вернули старое значение
console.log(b); // 6 — теперь уже увеличено 💡 Важно: в циклах и выражениях разница между i++ и ++i может привести к ошибкам, если не учитывать порядок.
JavaScript имеет специальные числовые значения, которые появляются при некорректных операциях.Появляется, когда операция не может быть выполнена:console.log(0 / 0); // NaN
console.log("abc" * 2); // NaN
console.log(NaN + 5); // NaN
console.log(NaN === NaN); // false — важно! NaN не равен самому себе
Для проверки на NaN используйте Number.isNaN():console.log(Number.isNaN(NaN)); // true
console.log(Number.isNaN("hello")); // false
Получается при делении на ноль или при переполнении:console.log(1 / 0); // Infinity
console.log(-1 / 0); // -Infinity
console.log(Number.MAX_VALUE * 2); // Infinity console.log(Infinity + 1); // Infinity
console.log(Infinity - Infinity); // NaN ⚠️ Не используйте == Infinity для проверки — лучше применять isFinite(): console.log(isFinite(1000)); // true
console.log(isFinite(Infinity)); // false ]]></description><link>материалы/подтемы/секция-1.-javascript/арифметические-операторы-javascript.html</link><guid isPermaLink="false">Материалы/Подтемы/Секция 1. JavaScript/Арифметические операторы JavaScript.md</guid><pubDate>Wed, 17 Sep 2025 18:25:57 GMT</pubDate></item><item><title><![CDATA[Определение оператора и операнда]]></title><description><![CDATA[Оператор — это символ или ключевое слово, которое выполняет определённое действие над данными.Операнд — это значение или переменная, над которой применяется оператор.Операторы классифицируются по количеству операндов, с которыми они работают:
Унарные операторы используют один операнд — например, отрицание !x или инкремент ++i.
Бинарные операторы работают с двумя операндами — например, сложение a + b или сравнение x &gt; y.
Тернарный оператор использует три операнда — единственный в JavaScript: условное выражение condition ? value1 : value2 (про него подробнее будет в следующей теме).]]></description><link>материалы/подтемы/секция-1.-javascript/определение-оператора-и-операнда.html</link><guid isPermaLink="false">Материалы/Подтемы/Секция 1. JavaScript/Определение оператора и операнда.md</guid><pubDate>Wed, 17 Sep 2025 18:22:00 GMT</pubDate></item><item><title><![CDATA[Тема №4. Node.JS, примитивные типы данных JavaScript]]></title><description><![CDATA[В этой теме вы познакомитесь с Node.js — средой выполнения JavaScript вне браузера, и углубитесь в изучение примитивных типов данных JavaScript — фундаментальных строительных блоков любого приложения. Вы узнаете, как Node.js расширяет возможности JavaScript для серверной разработки, и научитесь работать с основными типами: числа, строки, логические значения, null, undefined, symbol и bigint. Это знание необходимо для дальнейшего понимания структур данных, функций и работы с API в мобильных приложениях, использующих JavaScript/TypeScript.
<a data-href="Что такое Node.js" href="материалы/подтемы/секция-1.-javascript/что-такое-node.js.html" class="internal-link" target="_self" rel="noopener nofollow">Что такое Node.js</a>
<br><a data-href="Установка и базовое использование Node.js" href="материалы/подтемы/секция-1.-javascript/установка-и-базовое-использование-node.js.html" class="internal-link" target="_self" rel="noopener nofollow">Установка и базовое использование Node.js</a>
<br><a data-href="Примитивные типы данных JavaScript" href="материалы/подтемы/секция-1.-javascript/примитивные-типы-данных-javascript.html" class="internal-link" target="_self" rel="noopener nofollow">Примитивные типы данных JavaScript</a>
(Пусто)<br><a data-href="Тема №5. Операторы и операции в JavaScript" href="лекции/секция-1.-javascript/тема-№5.-операторы-и-операции-в-javascript.html" class="internal-link" target="_self" rel="noopener nofollow">Тема №5. Операторы и операции в JavaScript</a>]]></description><link>лекции/секция-1.-javascript/тема-№4.-node.js,-примитивные-типы-данных-javascript.html</link><guid isPermaLink="false">Лекции/Секция 1. JavaScript/Тема №4. Node.JS, примитивные типы данных JavaScript.md</guid><pubDate>Wed, 17 Sep 2025 17:43:23 GMT</pubDate></item><item><title><![CDATA[Примитивные типы данных JavaScript]]></title><description><![CDATA[Примитивные типы данных — это базовые, неструктурированные значения в JavaScript, которые не содержат свойств или методов сами по себе и не могут быть изменены после создания. Главная особенность примитивов — они передаются по значению: при присваивании или передаче в функцию копируется само значение, а не ссылка на него. Это означает, что если вы присвоите примитивную переменную другой переменной и измените одну из них — другая останется неизменной. Примитивы также не имеют внутреннего состояния — их нельзя расширить, добавить свойства или переопределить. Они являются фундаментом для всех операций в JavaScript и лежат в основе хранения и обработки любых данных — от чисел в расчётах до текста в интерфейсе мобильного приложения.В JavaScript все числа — это числа с плавающей запятой по стандарту IEEE 754. Это значит, что даже целые числа хранятся как дробные, и из-за особенностей двоичного представления могут возникать небольшие погрешности при вычислениях (например, 0.1 + 0.2 !== 0.3). JavaScript не разделяет целые и вещественные числа — всё объединено в один тип number. Поддерживаются положительные, отрицательные, ноль, а также специальные значения Infinity, -Infinity и NaN (Not a Number).Строка в JavaScript — это последовательность символов, заключённая в одинарные ('), двойные (") или обратные кавычки (`). Обратные кавычки позволяют использовать шаблонные строки — вставлять переменные через ${} и писать многострочный текст без экранирования. Например: `Привет, ${name}!`. Строки неизменяемы — любое изменение создаёт новую строку, а не модифицирует существующую.Логический тип представляет два возможных значения: true и false. Используется для условий, сравнений, флагов состояний (например, загружено ли приложение, авторизован ли пользователь). В JavaScript есть понятие «ложных» и «истинных» значений — например, 0, "", null, undefined воспринимаются как false в булевом контексте, но сами по себе они не являются boolean.null — это специальное значение, которое программист присваивает намеренно, чтобы указать: «здесь ничего нет». Это не ошибка и не неопределённость — это осознанное обозначение отсутствия данных. Например, если пользователь не выбрал аватар, можно установить avatarUrl: null. Несмотря на поведение typeof null === 'object' (историческая ошибка языка), null — это примитив.undefined означает, что переменная была объявлена, но ей ещё не присвоено значение. Это автоматическое состояние, которое присваивается переменной при объявлении через let или const без инициализации. Также возвращается, если функция не возвращает значение, или свойство объекта не существует. Отличие от null: undefined — это результат отсутствия действия, а null — результат преднамеренного действия.<img alt="Pasted image 20240923235323.png" src="материалы/файлы/pasted-image-20240923235323.png" target="_self">Symbol — это новый примитивный тип, появившийся в ES6, предназначенный для создания уникальных ключей свойств объектов. Каждый символ, созданный через Symbol(), гарантированно уникален, даже если у них одинаковое описание. Используется редко в базовой разработке, но важен для внутренней работы библиотек и предотвращения коллизий имён свойств. Не нужно запоминать детали — достаточно знать, что он существует и используется для скрытия и защиты ключей.bigint — это тип для работы с целыми числами, превышающими предел Number.MAX_SAFE_INTEGER (около 9 квадриллионов). Чтобы создать bigint, нужно добавить букву n в конец числа: 123456789012345678901234567890n. Он нужен для точных расчётов — например, при работе с финансовыми данными, хешами, криптографией или большими идентификаторами. С bigint нельзя выполнять операции с обычными числами — требуется явное приведение.Оператор typeof в JavaScript используется для определения типа значения на момент выполнения. Он возвращает строку с названием типа данных. Это важный инструмент для отладки, валидации входных данных и безопасной работы с переменными, особенно когда тип неизвестен заранее — например, при получении данных из API или пользовательского ввода.typeof 42; // "number"
typeof 3.14; // "number"
typeof -0; // "number"
typeof Infinity; // "number"
typeof NaN; // "number" typeof "Привет"; // "string"
typeof ''; // "string"
typeof `Шаблон ${1 + 2}`; // "string" typeof true; // "boolean"
typeof false; // "boolean" typeof null; // "object" — историческая ошибка языка typeof undefined; // "undefined" typeof Symbol('id'); // "symbol" typeof 12345678901234567890n; // "bigint" typeof function() {}; // "function" typeof {}; // "object"
typeof []; // "object" — массивы тоже объекты typeof null возвращает "object" — это известная ошибка в спецификации JavaScript, которая осталась ради совместимости.
typeof всегда возвращает строку, даже если значение не существует (например, typeof undeclaredVariable вернёт "undefined" без ошибки).
Для проверки массивов или объектов typeof недостаточен — лучше использовать Array.isArray() или instanceof.
При работе с JSON-ответами API часто приходят данные неизвестного типа. Например, поле userId может быть числом или строкой. Перед использованием его стоит проверить:if (typeof userId === 'string') { // обработать как строку
} else if (typeof userId === 'number') { // обработать как число
}
Преобразование типов — это процесс изменения значения одного типа данных в другой. В JavaScript, как в языке с динамической типизацией, это происходит постоянно — иногда намеренно, а иногда автоматически, что может приводить к неожиданным результатам. Различают два вида преобразований: явное (когда разработчик сам управляет процессом) и неявное (когда язык делает это автоматически на основе контекста).Явное преобразование — это когда разработчик сознательно и намеренно превращает значение из одного типа в другой с помощью специальных функций или операторов. Это безопасный и предсказуемый способ, который рекомендуется использовать в production-коде.// Число → строка
String(42); // "42"
(42).toString(); // "42"
42 + ""; // "42" — это уже неявное, но можно использовать и явно // Строка → число
Number("123"); // 123
Number("3.14"); // 3.14
Number("abc"); // NaN — некорректная строка
parseInt("42px"); // 42 — преобразует до первого нецифрового символа
parseFloat("3.14abc"); // 3.14 // Строка → булево
Boolean("hello"); // true
Boolean(""); // false — пустая строка — ложь
Boolean("0"); // true — любая непустая строка — истина, даже "false" // Число → булево
Boolean(0); // false
Boolean(-1); // true
Boolean(1); // true
Boolean(NaN); // false
Boolean(Infinity); // true // Любое значение → булево через двойное отрицание
!!"text"; // true
!!0; // false
!!null; // false // Объект → строка
String({}); // "[object Object]"
JSON.stringify({}); // "{}" — для структурированного представления При получении данных из формы (input.value всегда строка).
При работе с API, где типы могут быть неточными.
При необходимости гарантировать поведение — например, чтобы +"5" не вызывало путаницы.
В тестах и валидации входных данных. ✅ Правило: Если вы не уверены в типе — приведите его явно. Это делает код понятнее и надёжнее.
Неявное преобразование — это когда JavaScript автоматически меняет тип значения, чтобы выполнить операцию. Оно происходит при использовании операторов +, -, *, /, ==, if(), while() и других в контекстах, требующих другого типа. Это мощный механизм, но он часто вызывает ошибки у новичков, потому что поведение не всегда очевидно.Если хотя бы один операнд — строка, то оба приводятся к строке:"5" + 3; // "53" — строка + число → конкатенация
5 + "3"; // "53"
"Привет" + 123; // "Привет123"
true + "!" // "true!"
Если оба операнда — числа — выполняется математическое сложение:5 + 3; // 8
0.1 + 0.2; // 0.30000000000000004 — особенность IEEE 754
Математическое сложение так-же происходит если среди операндов нет строк, в таком случае операнды преобразуются в числа:5 + true; // 6 = 5 + 1
false + Infinity; // Infinity - что тоже является числом // 0 + бесконечность
Эти операторы всегда пытаются привести операнды к числам:"5" - "3"; // 2 — строки превратились в числа
"10" * "2"; // 20
"15" / "3"; // 5
"abc" - 1; // NaN — нельзя преобразовать "abc" в число
true - 1; // 0 — true → 1
false * 5; // 0 — false → 0
Оператор == выполняет неявное приведение типов перед сравнением — это главный источник ошибок:"" == 0; // true — пустая строка → 0
"0" == 0; // true — "0" → 0
false == 0; // true — false → 0
null == undefined;// true — особое правило: они равны друг другу
0 == false; // true — false → 0
"1" == true; // true — "1" → 1, true → 1
[] == 0; // true — пустой массив → "" → 0
[1] == 1; // true — [1] → "1" → 1
[1,2] == "1,2"; // true — массив → строка "1,2"
{} == "[object Object]"; // false — объекты сравниваются по ссылке, но при приведении к строке — да, но тут логика сложнее ⚠️ Важно: null == undefined — единственное исключение, где два разных примитива считаются равными.
Любое значение приводится к булевому типу:if ("0") { console.log("Это правда!"); } // сработает — непустая строка → true
if (0) { console.log("Не сработает"); } // не сработает — 0 → false
if ([]) { console.log("Это правда!"); } // сработает — массив → true
if ({}) { console.log("Это правда!"); } // сработает — объект → true
if (null) { console.log("Не сработает"); } // не сработает — null → false
if (undefined) { console.log("Не сработает"); } // не сработает 📌 Эти 6 значений называются falsy — всё остальное — truthy.
// Начинающий разработчик ожидает:
"5" == 5; // true — логично?
"5" === 5; // false — теперь понятно! // А вот так:
[] == ![]; // true — почему?
// Разбор:
// ![] → false (пустой массив → true → отрицание → false)
// [] == false → "" == false → 0 == 0 → true // Или:
" \t\n" == 0; // true — строка с пробелами → пустая после trim → 0
Такие случаи ведут к багам, которые сложно отследить. Особенно в мобильных приложениях, где данные приходят из сети и могут быть неожиданного типа.]]></description><link>материалы/подтемы/секция-1.-javascript/примитивные-типы-данных-javascript.html</link><guid isPermaLink="false">Материалы/Подтемы/Секция 1. JavaScript/Примитивные типы данных JavaScript.md</guid><pubDate>Wed, 17 Sep 2025 17:42:35 GMT</pubDate><enclosure url="." length="0" type="false"/><content:encoded>&lt;figure&gt;&lt;img src="."&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Pasted image 20250917202240]]></title><description><![CDATA[<img src="материалы/файлы/pasted-image-20250917202240.png" target="_self">]]></description><link>материалы/файлы/pasted-image-20250917202240.html</link><guid isPermaLink="false">Материалы/Файлы/Pasted image 20250917202240.png</guid><pubDate>Wed, 17 Sep 2025 17:22:40 GMT</pubDate><enclosure url="." length="0" type="false"/><content:encoded>&lt;figure&gt;&lt;img src="."&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Установка и базовое использование Node.js]]></title><description><![CDATA[Node.js можно установить двумя основными способами. Первый — через официальный установщик с сайта nodejs.org: он подходит для новичков и автоматически настраивает Node.js и npm (советую вам использовать этот способ). Второй — через nvm (Node Version Manager): это инструмент для управления несколькими версиями Node.js на одном компьютере, что особенно полезно при работе с разными проектами. На macOS и Linux nvm устанавливается через терминал командой curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash, на Windows — через nvm-windows. После установки nvm можно легко переключаться между версиями: nvm install 20, nvm use 20.После установки важно проверить, что Node.js и npm (менеджер пакетов) работают корректно. В терминале введите node -v — вы увидите текущую версию Node.js (например, v20.12.0). Затем введите npm -v — вы увидите версию npm (например, 10.5.0). Если обе команды возвращают номера версий — среда готова к работе. Если нет — перезагрузите терминал или проверьте путь установки.Чтобы запустить JavaScript-файл в Node.js, создайте файл с расширением .js (например, app.js), напишите в нём любой код — например, console.log('Привет, Node.js!'); — и сохраните. В терминале перейдите в папку с файлом и выполните команду node app.js. Node.js прочитает файл, выполнит его содержимое и выведет результат в консоль. Это простейший способ тестировать серверный код, не используя браузер.Так-же, для вас будет проще запускать его сразу из редактора кода.Нажимаем на f5 находясь в нужном файле.
В первый запуск у вас спросят выбрать способ дебагера, выбираем Node.js.
<img alt="Pasted image 20240928221620.png" src="материалы/файлы/pasted-image-20240928221620.png" target="_self">ПКМ по файлу.<br><img alt="Pasted image 20240928222139.png" src="материалы/файлы/pasted-image-20240928222139.png" target="_self">нажимаем кнопку Run "название скрипта"Дальше можем просто нажимать на кнопку "запуск"<br>
<img alt="Pasted image 20240928222237.png" src="материалы/файлы/pasted-image-20240928222237.png" target="_self">REPL (Read-Eval-Print Loop) — это интерактивная оболочка Node.js, которая позволяет сразу писать и выполнять JavaScript-код в терминале. Чтобы запустить её, введите node без аргументов. Вы увидите приглашение &gt; — теперь можете вводить выражения: 2 + 2, const name = 'Миша'; console.log(name);. Результат выводится мгновенно. Для выхода из REPL нажмите Ctrl + C дважды или введите .exit. REPL идеален для быстрой проверки синтаксиса, экспериментов с API или отладки небольших фрагментов кода.]]></description><link>материалы/подтемы/секция-1.-javascript/установка-и-базовое-использование-node.js.html</link><guid isPermaLink="false">Материалы/Подтемы/Секция 1. JavaScript/Установка и базовое использование Node.js.md</guid><pubDate>Wed, 17 Sep 2025 17:22:19 GMT</pubDate><enclosure url="." length="0" type="false"/><content:encoded>&lt;figure&gt;&lt;img src="."&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Что такое Node.js]]></title><description><![CDATA[Node.js — это среда выполнения JavaScript, которая позволяет запускать код на сервере, а не только в браузере. Она построена на движке V8 от Google и даёт JavaScript доступ к системным ресурсам: файловой системе, сети, процессам. Это делает JavaScript полноценным языком для создания серверных приложений, инструментов разработки и автоматизации — всё на том же языке, что и фронтенд.Node.js появился в 2009 году благодаря Райану Далю — разработчику, который задался вопросом: почему JavaScript, который так хорошо справляется с асинхронными событиями в браузере (клики, загрузки, запросы), не может делать то же самое на сервере? Он объединил движок V8, который быстро выполняет JavaScript, с библиотекой libuv — специальной системой для асинхронного ввода-вывода. В результате получилась первая среда, где сервер мог обрабатывать тысячи одновременных соединений без создания отдельного потока на каждое — это стало прорывом в производительности.JavaScript на сервере упрощает разработку. Если вы пишете мобильное приложение на React Native или используете JSON-API, то логика, данные и даже части валидации могут быть общими между клиентом и сервером. Нет необходимости учить два разных языка — JavaScript на фронтенде и, например, Java или Python на бэкенде. Это снижает сложность команды, ускоряет разработку и делает поддержку проще. Также огромная экосистема npm дарит готовые решения для любой задачи — от баз данных до авторизации.В браузере JavaScript работает в ограниченной среде: он может работать с DOM, отправлять запросы через fetch, хранить данные в localStorage, но не может читать файлы с диска или слушать порты. В Node.js этих ограничений нет. Вместо window и document вы получаете global, process, require, module. Вы можете использовать модули fs для работы с файлами, http для создания сервера, path для обработки путей, child_process для запуска команд. То есть — Node.js превращает JavaScript из языка «для страниц» в язык «для всего».Node.js — невидимый двигатель современной мобильной разработки.
— Backend для API: большинство мобильных приложений получают данные через REST или GraphQL. Эти API почти всегда пишут на Node.js (Express, NestJS, Fastify).
— Инструменты сборки: Webpack, Metro, Babel, Vite — все они написаны на Node.js и собирают ваш код в приложение для iOS и Android.
— CLI-инструменты: Expo CLI, Ionic CLI, Capacitor — они создают проекты, добавляют плагины, настраивают конфиги — и всё это работает на Node.js.
— CI/CD: когда вы заливаете код в GitHub, а система автоматически собирает APK/IPA и публикует его — за этим стоит скрипт на Node.js.
Даже если вы никогда не напишете строчку на Node.js — вы будете им пользоваться каждый день. Без него мобильная разработка была бы намного медленнее, сложнее и менее гибкой.]]></description><link>материалы/подтемы/секция-1.-javascript/что-такое-node.js.html</link><guid isPermaLink="false">Материалы/Подтемы/Секция 1. JavaScript/Что такое Node.js.md</guid><pubDate>Wed, 17 Sep 2025 17:18:03 GMT</pubDate></item><item><title><![CDATA[Практика №1. Простая веб-страница с HTML]]></title><description><![CDATA[В рамках этого задания вам необходимо добавить логику при нажатиях на кнопку к существующей веб-странице.Задания обязано быть сделано в собственной директории используя изначальный шаблон html файла из ресурсов index.html (может быть модернизирован) и внешний js файл в той же папке (создается самостоятельно).index.html&lt;!DOCTYPE html&gt;
&lt;html lang="ru"&gt;
&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;Изучаем JS в рамках html страницы&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt; Эта страница содержит JS код который выполняется на стороне клиента. &lt;br/&gt; &lt;button id="button-1"&gt; Эта кнопка выводит сообщение в консоль &lt;/button&gt; &lt;button id="button-2"&gt; Эта кнопка выводит оповещение в браузере &lt;/button&gt; &lt;br/&gt; &lt;button id="button-3"&gt; Эта кнопка меняет цвет фона на красный &lt;/button&gt; &lt;button id="button-4"&gt; Эта кнопка меняет цвет фона на белый &lt;/button&gt; &lt;br/&gt; &lt;textarea id="text-1"&gt; &lt;/textarea&gt; &lt;br/&gt; &lt;button id="button-5"&gt; Сложить число выше с числом 6 &lt;/button&gt; &lt;div id="answer"&gt; ТУТ БУДЕТ ОТВЕТ &lt;/div&gt; &lt;/body&gt;
&lt;/html&gt;
Необходимо добавить логику для кнопок:
Первые две кнопки должны выводить информацию в консоль и в качестве оповещения в браузере.
Кнопки 3-4 должны менять цвет фона в соответствии с текстом кнопки
Кнопка 5 должна получить текст из текстового поля text-1, получить число из строки при помощи функции parseFloat, и проверить на NaN при помощи функции isNaN. Если это число - сложить с числом 6 и записать ответ в div с id answer.
Вам необходимо добавить дополнительное поле ввода для 5 кнопки.
В итоге пользователь должен вписать два числа в два поля и в итоге получить ответ сложениях этих двух чисел.На выполнение выделяется 1 практическая пара.
Градация баллов после дедлайна:
1 пара: 50%
2 пара: 0%
]]></description><link>задания/секция-1.-javascript/практика-№1.-простая-веб-страница-с-html.html</link><guid isPermaLink="false">Задания/Секция 1. JavaScript/Практика №1. Простая веб-страница с HTML.md</guid><pubDate>Wed, 17 Sep 2025 13:54:47 GMT</pubDate></item><item><title><![CDATA[Pasted image 20240923235323]]></title><description><![CDATA[<img src="материалы/файлы/pasted-image-20240923235323.png" target="_self">]]></description><link>материалы/файлы/pasted-image-20240923235323.html</link><guid isPermaLink="false">Материалы/Файлы/Pasted image 20240923235323.png</guid><pubDate>Tue, 17 Jun 2025 04:41:31 GMT</pubDate><enclosure url="." length="0" type="false"/><content:encoded>&lt;figure&gt;&lt;img src="."&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Pasted image 20240928222139]]></title><description><![CDATA[<img src="материалы/файлы/pasted-image-20240928222139.png" target="_self">]]></description><link>материалы/файлы/pasted-image-20240928222139.html</link><guid isPermaLink="false">Материалы/Файлы/Pasted image 20240928222139.png</guid><pubDate>Tue, 17 Jun 2025 04:38:49 GMT</pubDate><enclosure url="." length="0" type="false"/><content:encoded>&lt;figure&gt;&lt;img src="."&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Pasted image 20240928221620]]></title><description><![CDATA[<img src="материалы/файлы/pasted-image-20240928221620.png" target="_self">]]></description><link>материалы/файлы/pasted-image-20240928221620.html</link><guid isPermaLink="false">Материалы/Файлы/Pasted image 20240928221620.png</guid><pubDate>Tue, 17 Jun 2025 04:38:27 GMT</pubDate><enclosure url="." length="0" type="false"/><content:encoded>&lt;figure&gt;&lt;img src="."&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Pasted image 20240928222237]]></title><description><![CDATA[<img src="материалы/файлы/pasted-image-20240928222237.png" target="_self">]]></description><link>материалы/файлы/pasted-image-20240928222237.html</link><guid isPermaLink="false">Материалы/Файлы/Pasted image 20240928222237.png</guid><pubDate>Tue, 17 Jun 2025 04:37:13 GMT</pubDate><enclosure url="." length="0" type="false"/><content:encoded>&lt;figure&gt;&lt;img src="."&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Тема №3. Использование JavaScript в браузере]]></title><description><![CDATA[В этой теме вы познакомитесь с практическим применением JavaScript в контексте веб-страниц: научитесь использовать консоль разработчика для тестирования кода, поймёте структуру HTML и роль DOM, освоите базовые способы взаимодействия с элементами страницы через JavaScript — получение, изменение содержимого и стилей. Вы создадите первую HTML-страницу с подключённым JavaScript, изучите корректные способы интеграции скриптов и назначения обработчиков событий, избегая устаревших практик.
<a data-href="Самое простое использование JavaScript" href="материалы/подтемы/секция-1.-javascript/самое-простое-использование-javascript.html" class="internal-link" target="_self" rel="noopener nofollow">Самое простое использование JavaScript</a>
<br><a data-href="Основные понятия веб страницы" href="материалы/подтемы/секция-1.-javascript/основные-понятия-веб-страницы.html" class="internal-link" target="_self" rel="noopener nofollow">Основные понятия веб страницы</a>
<br><a data-href="Базовая работа с элементами веб страницы через JavaScript" href="материалы/подтемы/секция-1.-javascript/базовая-работа-с-элементами-веб-страницы-через-javascript.html" class="internal-link" target="_self" rel="noopener nofollow">Базовая работа с элементами веб страницы через JavaScript</a>
<br><a data-href="Создание своей HTML страницы" href="материалы/подтемы/секция-1.-javascript/создание-своей-html-страницы.html" class="internal-link" target="_self" rel="noopener nofollow">Создание своей HTML страницы</a> <br><a data-href="Практика №1. Простая веб-страница с HTML" href="задания/секция-1.-javascript/практика-№1.-простая-веб-страница-с-html.html" class="internal-link" target="_self" rel="noopener nofollow">Практика №1. Простая веб-страница с HTML</a>
<br><a data-href="Тема №4. Node.JS, примитивные типы данных JavaScript" href=".html" class="internal-link" target="_self" rel="noopener nofollow">Тема №4. Node.JS, примитивные типы данных JavaScript</a>]]></description><link>лекции/секция-1.-javascript/тема-№3.-использование-javascript-в-браузере.html</link><guid isPermaLink="false">Лекции/Секция 1. JavaScript/Тема №3. Использование JavaScript в браузере.md</guid><pubDate>Fri, 12 Sep 2025 18:54:56 GMT</pubDate></item><item><title><![CDATA[Создание своей HTML страницы]]></title><description><![CDATA[Чтобы создать HTML-страницу, достаточно использовать любой текстовый редактор — даже Блокнот. Однако для эффективной разработки рекомендуется использовать современный редактор кода, такой как Visual Studio Code (VS Code).HTML-страница — это текстовый файл с расширением .html. Минимальная структура HTML-документа выглядит так:&lt;!DOCTYPE html&gt;
&lt;html lang="ru"&gt;
&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;Моя первая страница&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt; &lt;h1&gt;Привет, мир!&lt;/h1&gt;
&lt;/body&gt;
&lt;/html&gt;
Сохраните этот код в файл с именем, например, index.html. Откройте его в браузере — вы увидите заголовок «Привет, мир!». Это и есть ваша первая веб-страница.<a data-href="Как создавать файлы с определённым расширением" href="материалы/как-сделать/как-создавать-файлы-с-определённым-расширением.html" class="internal-link" target="_self" rel="noopener nofollow">Как создавать файлы с определённым расширением</a>JavaScript можно подключать к HTML-странице двумя основными способами: встроенно (внутри HTML-файла) или через внешний файл. Второй способ — единственно правильный для профессиональной разработки.JavaScript можно вставить прямо внутрь HTML-документа с помощью тега &lt;script&gt;:&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt; &lt;title&gt;Страница с встроенным JS&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt; &lt;h1&gt;Привет!&lt;/h1&gt; &lt;script&gt; alert("Это встроенный JavaScript!"); document.write("&lt;p&gt;Текст добавлен скриптом.&lt;/p&gt;"); &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
Почему это не рекомендуется:
Нарушает принцип разделения ответственности: структура (HTML), стиль (CSS) и логика (JS) должны быть разделены.
Сложно поддерживать и масштабировать код — особенно при росте проекта.
Затрудняется повторное использование кода между страницами.
Ухудшается читаемость и тестирование.
Может замедлять загрузку страницы, если скрипт большой.
Используйте этот способ только для быстрых экспериментов, демонстраций или очень простых примеров.Правильный и стандартный способ — создать отдельный файл с расширением .js и подключить его к HTML:
Создайте файл script.js в той же папке, что и index.html.
Напишите в нём JavaScript-код:
// script.js
alert("Это внешний JavaScript-файл!");
document.querySelector('h1').style.color = 'blue'; Подключите его в HTML перед закрывающим тегом &lt;/body&gt;:
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt; &lt;title&gt;Страница с внешним JS&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt; &lt;h1&gt;Привет!&lt;/h1&gt; &lt;script src="script.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
Преимущества:
Чистый, организованный код.
Возможность переиспользования одного файла на нескольких страницах.
Упрощённая отладка и версионный контроль (Git).
Лучшая производительность — браузер может кэшировать внешние скрипты.
JavaScript следует подключать в самом конце тела HTML-документа, перед закрывающим тегом &lt;/body&gt;.Когда браузер встречает тег &lt;script&gt; во время парсинга HTML, он приостанавливает загрузку и разбор DOM-дерева, чтобы загрузить и выполнить скрипт. Если скрипт подключен в &lt;head&gt; или в начале &lt;body&gt;, а он пытается взаимодействовать с элементами, которые ещё не загружены — возникнет ошибка:&lt;head&gt; &lt;script src="script.js"&gt;&lt;/script&gt; &lt;!-- ❌ Опасно! --&gt;
&lt;/head&gt;
&lt;body&gt; &lt;button id="myButton"&gt;Нажми меня&lt;/button&gt;
&lt;/body&gt;
Если в script.js написано:document.getElementById('myButton').addEventListener('click', () =&gt; { alert('Клик!');
});
— то скрипт выполнится до того, как кнопка появится в DOM, и getElementById вернёт null. Результат — ошибка в консоли.&lt;body&gt; &lt;button id="myButton"&gt;Нажми меня&lt;/button&gt; &lt;script src="script.js"&gt;&lt;/script&gt; &lt;!-- ✅ Безопасно: DOM уже построен --&gt;
&lt;/body&gt;
Теперь браузер сначала полностью загрузит и отрисует все элементы страницы, а только потом выполнит скрипт — и все запросы к DOM будут успешными.
Быстрая отрисовка контента: пользователь видит страницу быстрее, без задержек из-за загрузки скриптов.
Предсказуемое поведение: код работает только тогда, когда всё, к чему он обращается, уже существует.
Совместимость с современными практиками: так делают все крупные фреймворки и библиотеки. Если скрипт не зависит от DOM (например, модуль аналитики, который запускается сразу при загрузке страницы), его можно размещать в &lt;head&gt;.
Использование атрибута defer (в &lt;head&gt;) позволяет отложить выполнение скрипта до завершения парсинга HTML — это альтернатива размещению в конце, но требует понимания нюансов.
&lt;head&gt; &lt;script src="script.js" defer&gt;&lt;/script&gt; &lt;!-- ✅ Альтернатива, если нужно в head --&gt;
&lt;/head&gt; ✅ Рекомендация: Всегда подключайте JavaScript-файлы перед закрывающим тегом &lt;/body&gt;, если только вы точно не знаете, что делаете и почему используете defer или async. Это — базовое правило надёжной и предсказуемой работы JavaScript на веб-странице.
Чтобы реагировать на действия пользователя (например, нажатие кнопки), можно назначить обработчик события двумя способами: через атрибуты HTML или через JavaScript. Второй способ — единственный корректный для профессиональной разработки.Можно напрямую вписать JavaScript-код в атрибут onclick элемента:&lt;button onclick="alert('Кнопка нажата!')"&gt;Нажми меня&lt;/button&gt;
Или вызвать функцию:&lt;script&gt;
function handleClick() { alert('Функция вызвана через атрибут!');
}
&lt;/script&gt; &lt;button onclick="handleClick()"&gt;Нажми меня&lt;/button&gt;
Почему это не рекомендуется:
Смешивание ответственности: логика (JS) и структура (HTML) сливаются — нарушает принцип разделения.
Сложность поддержки: сложно отлаживать, тестировать и рефакторить код, особенно при росте проекта.
Уязвимость к ошибкам: если имя функции опечатано — ошибка не будет заметна до момента клика.
Не масштабируемо: невозможно динамически добавлять/удалять обработчики, работать с несколькими элементами, использовать замыкания.
Проблемы с безопасностью: в некоторых контекстах (CSP) использование onclick может быть заблокировано. ⚠️ Используйте этот способ только для быстрых экспериментов или учебных примеров — никогда в продакшене.
Правильный и стандартный способ — назначать обработчики событий из JavaScript, после того как DOM загружен:&lt;button id="myButton"&gt;Нажми меня&lt;/button&gt; &lt;script src="script.js"&gt;&lt;/script&gt;
// script.js
const button = document.getElementById('myButton'); button.addEventListener('click', function() { alert('Кнопка нажата через addEventListener!');
});
Преимущества:
Полное разделение логики и разметки.
Возможность назначать несколько обработчиков на один элемент.
Легко удалять обработчики через removeEventListener.
Поддержка современных возможностей JS: стрелочные функции, async/await, замыкания.
Удобно работать с динамически создаваемыми элементами.
Совместимость с системами сборки, тестирования и фреймворками.
Дополнительно — лучшая практика:document.addEventListener('DOMContentLoaded', () =&gt; { const button = document.getElementById('myButton'); if (button) { button.addEventListener('click', () =&gt; { console.log('Клик обработан надёжно'); }); }
});
Это гарантирует, что скрипт выполнится только после полной загрузки DOM, даже если он подключён в &lt;head&gt;.Представим, что у нас есть кнопка в HTML:&lt;button id="myButton"&gt;Нажми меня&lt;/button&gt;
Мы хотим, чтобы при нажатии на неё в консоль браузера выводилось сообщение: "Кнопка была нажата!"
Убедитесь, что у вас есть файл script.js, и он подключен в конце &lt;body&gt;:&lt;body&gt; &lt;button id="myButton"&gt;Нажми меня&lt;/button&gt; &lt;script src="script.js"&gt;&lt;/script&gt;
&lt;/body&gt;
В script.js напишите:const button = document.getElementById('myButton');
Эта строка говорит браузеру:
👉 «Найди элемент на странице, у которого атрибут id="myButton"» — и сохрани его в переменную button.Теперь добавьте эту строку:button.addEventListener('click', () =&gt; { console.log('Кнопка была нажата!');
});
Что здесь происходит (без функций):
addEventListener — это встроенная команда, которая привязывает действие к элементу.
'click' — это тип события, которое мы хотим отслеживать (нажатие).
() — это просто способ сказать: «здесь будет код, который выполнится при событии».
console.log(...) — это команда, которая выводит текст в окно разработчика (не на экран). ✅ Всё, что внутри { } — это просто набор команд, которые должны сработать, когда пользователь кликнет.
Когда пользователь кликает по кнопке — в консоли браузера появляется сообщение: Кнопка была нажата!
Этот шаблон — основа всего дальнейшего взаимодействия с пользователем. Его нужно запомнить как фиксированную формулу:
элемент.addEventListener('событие', () =&gt; { ... });
И заменять:
элемент — на нужный вам (button, input, div и т.д.)
'событие' — на нужное (click, mouseover, keydown и т.д.)
{ ... } — на то, что вы хотите сделать (вывести сообщение, изменить цвет, отправить данные)
]]></description><link>материалы/подтемы/секция-1.-javascript/создание-своей-html-страницы.html</link><guid isPermaLink="false">Материалы/Подтемы/Секция 1. JavaScript/Создание своей HTML страницы.md</guid><pubDate>Fri, 12 Sep 2025 18:54:37 GMT</pubDate></item><item><title><![CDATA[Как создавать файлы с определённым расширением]]></title><description><![CDATA[Самый простой способ - создать файл через "проводник".
<img alt="Pasted image 20250912214611.png" src="материалы/файлы/pasted-image-20250912214611.png" target="_self">
Но для этого нужно сначала включить опцию чтобы мы могли видеть расширение файлов (по умолчанию оно скрыто, особенно на компьютерах колледжа).<br>
<img alt="Pasted image 20250912214624.png" src="материалы/файлы/pasted-image-20250912214624.png" target="_self">
Ну а дальше уже все просто, например нам нужно создать js файл&nbsp;example.js<br>
<img alt="Pasted image 20250912214643.png" src="материалы/файлы/pasted-image-20250912214643.png" target="_self"><br>
<img alt="Pasted image 20250912214649.png" src="материалы/файлы/pasted-image-20250912214649.png" target="_self"><img alt="Pasted image 20250912214653.png" src="материалы/файлы/pasted-image-20250912214653.png" target="_self">]]></description><link>материалы/как-сделать/как-создавать-файлы-с-определённым-расширением.html</link><guid isPermaLink="false">Материалы/Как сделать/Как создавать файлы с определённым расширением.md</guid><pubDate>Fri, 12 Sep 2025 18:46:55 GMT</pubDate><enclosure url="." length="0" type="false"/><content:encoded>&lt;figure&gt;&lt;img src="."&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Pasted image 20250912214653]]></title><description><![CDATA[<img src="материалы/файлы/pasted-image-20250912214653.png" target="_self">]]></description><link>материалы/файлы/pasted-image-20250912214653.html</link><guid isPermaLink="false">Материалы/Файлы/Pasted image 20250912214653.png</guid><pubDate>Fri, 12 Sep 2025 18:46:53 GMT</pubDate><enclosure url="." length="0" type="false"/><content:encoded>&lt;figure&gt;&lt;img src="."&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Pasted image 20250912214649]]></title><description><![CDATA[<img src="материалы/файлы/pasted-image-20250912214649.png" target="_self">]]></description><link>материалы/файлы/pasted-image-20250912214649.html</link><guid isPermaLink="false">Материалы/Файлы/Pasted image 20250912214649.png</guid><pubDate>Fri, 12 Sep 2025 18:46:49 GMT</pubDate><enclosure url="." length="0" type="false"/><content:encoded>&lt;figure&gt;&lt;img src="."&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Pasted image 20250912214643]]></title><description><![CDATA[<img src="материалы/файлы/pasted-image-20250912214643.png" target="_self">]]></description><link>материалы/файлы/pasted-image-20250912214643.html</link><guid isPermaLink="false">Материалы/Файлы/Pasted image 20250912214643.png</guid><pubDate>Fri, 12 Sep 2025 18:46:43 GMT</pubDate><enclosure url="." length="0" type="false"/><content:encoded>&lt;figure&gt;&lt;img src="."&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Pasted image 20250912214624]]></title><description><![CDATA[<img src="материалы/файлы/pasted-image-20250912214624.png" target="_self">]]></description><link>материалы/файлы/pasted-image-20250912214624.html</link><guid isPermaLink="false">Материалы/Файлы/Pasted image 20250912214624.png</guid><pubDate>Fri, 12 Sep 2025 18:46:24 GMT</pubDate><enclosure url="." length="0" type="false"/><content:encoded>&lt;figure&gt;&lt;img src="."&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Pasted image 20250912214611]]></title><description><![CDATA[<img src="материалы/файлы/pasted-image-20250912214611.png" target="_self">]]></description><link>материалы/файлы/pasted-image-20250912214611.html</link><guid isPermaLink="false">Материалы/Файлы/Pasted image 20250912214611.png</guid><pubDate>Fri, 12 Sep 2025 18:46:11 GMT</pubDate><enclosure url="." length="0" type="false"/><content:encoded>&lt;figure&gt;&lt;img src="."&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Базовая работа с элементами веб страницы через JavaScript]]></title><description><![CDATA[В JavaScript для взаимодействия с HTML-элементами используются методы работы с DOM (Document Object Model). Основные способы получения элементов: document.getElementById(id) — возвращает элемент по уникальному атрибуту id.
Пример: const button = document.getElementById('submit-btn'); document.querySelector(selector) — возвращает первый элемент, соответствующий CSS-селектору.
Пример: const title = document.querySelector('h1'); или const item = document.querySelector('.item.active'); document.querySelectorAll(selector) — возвращает NodeList (массивоподобный объект) всех элементов, соответствующих селектору.
Пример: const buttons = document.querySelectorAll('button'); document.getElementsByTagName(name) — возвращает HTMLCollection элементов по тегу.
Пример: const paragraphs = document.getElementsByTagName('p'); document.getElementsByClassName(name) — возвращает HTMLCollection элементов по классу.
Пример: const items = document.getElementsByClassName('list-item'); ⚠️ Методы, возвращающие коллекции (HTMLCollection, NodeList), не являются настоящими массивами и не имеют методов массивов (например, .map(), .filter()). Для их использования можно преобразовать в массив через [...collection] или Array.from(collection).
После получения элемента можно изменять его атрибуты и содержимое: element.textContent — устанавливает или возвращает текстовое содержимое элемента (без HTML-разметки).
Пример: paragraph.textContent = 'Новый текст'; element.innerHTML — устанавливает или возвращает HTML-содержимое элемента (включая разметку).
Пример: div.innerHTML = '&lt;strong&gt;Жирный текст&lt;/strong&gt;'; element.setAttribute(name, value) — задаёт значение атрибута.
Пример: button.setAttribute('disabled', 'true'); element.getAttribute(name) — получает значение атрибута.
Пример: const type = input.getAttribute('type'); element.removeAttribute(name) — удаляет атрибут.
Пример: button.removeAttribute('disabled'); 💡 Используйте textContent для изменения текста — он безопаснее innerHTML, так как не выполняет HTML-код и защищает от XSS-атак.
Стили элемента можно менять напрямую через свойство style — оно представляет собой объект, содержащий все CSS-свойства в формате camelCase:
element.style.propertyName = 'value';
Примеры:
element.style.color = 'red';
element.style.fontSize = '20px';
element.style.backgroundColor = '#f0f0f0';
element.style.marginTop = '10px'; 🔍 Важно: CSS-свойства с дефисом (например, background-color) в JavaScript записываются в camelCase (backgroundColor).
Ограничения:
Стили, заданные через style, имеют приоритет над внешними CSS-правилами.
Нельзя установить несколько стилей одновременно — только по одному свойству.
Для сложных стилевых изменений рекомендуется использовать классы (classList):
element.classList.add('highlight');
element.classList.remove('hidden');
element.classList.toggle('active'); ✅ Использование classList предпочтительнее прямого изменения style — это позволяет отделять логику от стилей и поддерживать чистоту кода.
]]></description><link>материалы/подтемы/секция-1.-javascript/базовая-работа-с-элементами-веб-страницы-через-javascript.html</link><guid isPermaLink="false">Материалы/Подтемы/Секция 1. JavaScript/Базовая работа с элементами веб страницы через JavaScript.md</guid><pubDate>Fri, 12 Sep 2025 18:40:45 GMT</pubDate></item><item><title><![CDATA[Основные понятия веб страницы]]></title><description><![CDATA[Основные понятия веб-страницыВеб-страница — это документ, отображаемый в браузере, который состоит из трёх взаимосвязанных технологий: HTML, CSS и JavaScript. Каждая из них выполняет свою уникальную роль, и только их совместное использование позволяет создавать полноценные, интерактивные и визуально привлекательные приложения.HTML (HyperText Markup Language) — это язык гипертекстовой разметки, созданный для описания структуры веб-документов. Он не выполняет вычислений, не обрабатывает логику и не управляет поведением — его задача: обозначить смысл содержимого. Каждый элемент HTML — это маркер, который говорит браузеру: «Это заголовок», «Это абзац», «Это ссылка», «Это изображение».HTML работает на основе тегов — специальных ключевых слов, заключённых в угловые скобки: &lt;tag&gt;. Теги могут быть:
Парными — имеют открывающий и закрывающий тег: &lt;p&gt;Это параграф&lt;/p&gt; Самозакрывающимися — не содержат содержимого и закрываются сразу: &lt;img src="image.jpg" alt="Описание изображения" /&gt;
&lt;br /&gt; Каждый тег может иметь атрибуты — дополнительные параметры, уточняющие поведение или свойства элемента. Например:&lt;a href="https://example.com" target="_blank"&gt;Перейти&lt;/a&gt;
Здесь href указывает адрес ссылки, а target="_blank" — открывать её в новой вкладке.HTML5 — современная версия стандарта — ввела семантические теги, которые не только описывают внешний вид, но и передают значение контента:
&lt;header&gt; — шапка страницы или раздела
&lt;nav&gt; — навигационное меню
&lt;main&gt; — основное содержимое страницы
&lt;section&gt; — логический блок тематически связанного контента
&lt;article&gt; — самостоятельная сущность (например, статья, пост)
&lt;footer&gt; — подвал
Использование семантики улучшает:
Доступность — для пользователей с ограниченными возможностями (экранная речь корректно интерпретирует структуру),
SEO — поисковые системы лучше понимают и ранжируют содержимое,
Поддержку кода — разработчики быстрее ориентируются в структуре.
CSS (Cascading Style Sheets) — это язык, предназначенный для оформления HTML-документов. Он отвечает за то, как выглядит страница: цвета, размеры, расположение элементов, анимации, адаптивность под разные устройства.CSS работает через селекторы — правила, определяющие, к каким элементам применяются стили. Пример:h1 { color: #2c3e50; font-size: 2rem; text-align: center;
}
Здесь h1 — селектор, { ... } — набор свойств и их значений.CSS обладает ключевыми особенностями:
Каскадность (Cascading) — стили могут переопределяться. Если два правила влияют на один элемент, приоритет определяется по специфичности селектора, порядку объявления и использованию !important.
Наследование — некоторые свойства (например, font-family, color) автоматически передаются дочерним элементам.
Медиа-запросы — позволяют применять стили в зависимости от характеристик устройства: ширины экрана, ориентации, разрешения. Это основа адаптивного дизайна:
@media (max-width: 768px) { body { font-size: 14px; }
} CSS можно подключать тремя способами:
Внутренний стиль — внутри &lt;style&gt; в &lt;head&gt; (не рекомендуется для больших проектов).
Внешний файл — через &lt;link rel="stylesheet" href="styles.css"&gt; — лучшая практика.
Встроенный стиль — атрибут style внутри тега (&lt;p style="color:red;"&gt;) — используется крайне редко, только для экстренных случаев.
Важно: HTML отвечает за что — CSS — за как выглядит. Их разделение — фундаментальный принцип веб-разработки. Это позволяет:
Менять дизайн без трогания структуры,
Одинаковый HTML отображать по-разному на разных устройствах,
Ускорять загрузку за счёт кэширования CSS-файлов,
Облегчать командную разработку (дизайнеры работают с CSS, разработчики — с HTML и JS). В рамках дисциплины мы не будем изучать свойства CSS, поэтому они остаются на самообучение
Каждый валидный HTML-документ должен начинаться с DOCTYPE, чтобы браузер знал, какой стандарт использовать. Без него он может перейти в режим "quirks mode", где поведение становится непредсказуемым.&lt;!DOCTYPE html&gt;
— единственное объявление, необходимое для HTML5. Не требует закрывающего тега.Корневой элемент. Атрибут lang обязателен для доступности и SEO:&lt;html lang="ru"&gt;
Указывает язык содержимого — помогает экранной речи, переводчикам и поисковикам.Не отображается на странице, но содержит метаданные, необходимые для работы браузера и поисковых систем:
&lt;meta charset="UTF-8"&gt; — задаёт кодировку символов. UTF-8 поддерживает все языки мира — обязательный элемент.
&lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; — критически важен для мобильных устройств. Без него страница будет масштабироваться как на десктопе, что делает её нечитаемой на телефоне.
&lt;title&gt; — название вкладки браузера и заголовок в результатах поиска. Должен быть уникальным и описательным.
&lt;link&gt; — подключение внешних ресурсов: CSS, favicon, шрифтов.
&lt;script&gt; — подключение JavaScript (может находиться и в &lt;head&gt;, и в &lt;body&gt;, но это отдельная тема).
Пример полного &lt;head&gt;:&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;title&gt;Моя первая страница&lt;/title&gt; &lt;link rel="stylesheet" href="styles.css"&gt; &lt;link rel="icon" href="favicon.ico" type="image/x-icon"&gt;
&lt;/head&gt;
Содержит всё, что видит пользователь. Внутри могут быть любые элементы, включая:
Заголовки: &lt;h1&gt; до &lt;h6&gt; — иерархия важности. &lt;h1&gt; — главный заголовок страницы, только один.
Параграфы: &lt;p&gt; — для текстовых блоков.
Списки: &lt;ul&gt; — неупорядоченный (с точками),
&lt;ol&gt; — упорядоченный (с номерами),
&lt;li&gt; — элемент списка. Изображения: &lt;img src="..." alt="..."&gt; — alt обязателен для доступности и SEO.
Ссылки: &lt;a href="..."&gt;текст&lt;/a&gt; — href — адрес перехода.
Кнопки: &lt;button&gt;...&lt;/button&gt; — для взаимодействия.
Формы: &lt;form&gt;, &lt;input&gt;, &lt;label&gt; — для сбора данных.
Пример минимальной, но корректной структуры &lt;body&gt;:&lt;body&gt; &lt;header&gt; &lt;h1&gt;Добро пожаловать!&lt;/h1&gt; &lt;/header&gt; &lt;main&gt; &lt;p&gt;Это основной текст страницы.&lt;/p&gt; &lt;button id="myButton"&gt;Нажми меня&lt;/button&gt; &lt;/main&gt; &lt;footer&gt; &lt;p&gt;&amp;copy; 2025 Моя компания&lt;/p&gt; &lt;/footer&gt;
&lt;/body&gt;
HTML — дерево. Элементы должны быть правильно вложены:
✅ Правильно:&lt;p&gt;&lt;strong&gt;Жирный текст&lt;/strong&gt; внутри параграфа&lt;/p&gt;
❌ Неправильно:&lt;p&gt;&lt;strong&gt;Жирный текст&lt;/p&gt;&lt;/strong&gt; &lt;!-- Нарушена вложенность --&gt;
Браузеры пытаются исправить ошибки, но это приводит к непредсказуемому поведению, особенно в сложных случаях.
Используйте семантические теги вместо &lt;div&gt; там, где это возможно.
Не используйте &lt;h1&gt;–&lt;h6&gt; исключительно для изменения размера шрифта — используйте CSS.
Все изображения должны иметь alt — даже если пустой (alt=""), если они декоративные.
Для кнопок и ссылок используйте правильные теги: &lt;button&gt; — для действий, &lt;a&gt; — для переходов.
Поддерживайте чистую и читаемую структуру: отступы, переносы, комментарии (если нужно).
Всегда проверяйте валидность кода через <a data-tooltip-position="top" aria-label="https://validator.w3.org/" rel="noopener nofollow" class="external-link is-unresolved" href="https://validator.w3.org/" target="_self">validator.w3.org</a>.
DOM (Document Object Model — Модель объектов документа) — это программное представление веб-документа (обычно HTML или XML), созданное браузером в виде иерархического дерева объектов, где каждый элемент документа — это объект, доступный для манипуляций через JavaScript.DOM не является частью самого HTML-файла. Он динамически генерируется браузером при загрузке страницы: парсер читает HTML-код и превращает его в структуру из узлов (nodes), которые можно изменять, добавлять, удалять или запрашивать с помощью JavaScript.Каждый элемент HTML становится узлом (node) в DOM-дереве:
Элементные узлы — теги (&lt;div&gt;, &lt;p&gt;, &lt;button&gt; и т.д.)
Текстовые узлы — текст внутри тегов
Атрибутные узлы — атрибуты элементов (id, class, href)
Корневой узел — &lt;html&gt;
Дочерние и родительские узлы — элементы связаны отношениями «родитель–ребёнок»
Пример HTML:&lt;div id="container"&gt; &lt;h1&gt;Привет, мир!&lt;/h1&gt; &lt;p&gt;Это параграф.&lt;/p&gt;
&lt;/div&gt;
Соответствующее DOM-дерево:html
└── body └── div#container ├── h1 │ └── #text: "Привет, мир!" └── p └── #text: "Это параграф."
Каждый узел имеет свойства и методы, позволяющие взаимодействовать с ним. Например:
element.tagName — имя тега,
element.textContent — содержимое текста,
element.id, element.className — значения атрибутов,
element.appendChild(), element.removeChild() — управление дочерними узлами.
JavaScript не может напрямую работать с HTML-кодом файла. Он работает только с DOM-представлением, которое браузер создал в памяти. Это позволяет:
Динамически изменять содержимое страницы без перезагрузки (например, обновлять список задач, менять текст кнопки),
Реагировать на действия пользователя — клики, ввод текста, скроллинг,
Изменять стили элементов — через element.style,
Добавлять и удалять элементы — например, создавать новые карточки товаров по запросу,
Получать информацию о состоянии страницы — размер окна, положение элементов, состояние форм.
Без DOM JavaScript был бы бесполезен на веб-странице — он просто не имел бы «точки входа» в контент.]]></description><link>материалы/подтемы/секция-1.-javascript/основные-понятия-веб-страницы.html</link><guid isPermaLink="false">Материалы/Подтемы/Секция 1. JavaScript/Основные понятия веб страницы.md</guid><pubDate>Fri, 12 Sep 2025 18:38:42 GMT</pubDate></item><item><title><![CDATA[Самое простое использование JavaScript]]></title><description><![CDATA[Для быстрого тестирования и экспериментов с JavaScript можно использовать консоль разработчика — встроенную инструментальную панель в любом современном браузере (Chrome, Firefox, Edge, Safari). Открыть её можно сочетанием клавиш F12 или Ctrl+Shift+I (на macOS — Cmd+Option+I), затем перейти на вкладку Console.Консоль позволяет выполнять JavaScript-код прямо в браузере без создания HTML-файлов. Это идеальное место для проверки синтаксиса, отладки простых выражений и изучения поведения языка в реальном времени.
<img alt="Pasted image 20250912212732.png" src="материалы/файлы/pasted-image-20250912212732.png" target="_self">Для вывода информации в консоль используется функция console.log():console.log("Привет, мир!");
console.log(42);
console.log(true);
<br><img alt="Pasted image 20250912212810.png" src="материалы/файлы/pasted-image-20250912212810.png" target="_self">Эта команда — основной инструмент отладки на начальных этапах. Она выводит переданные значения в консоль, помогая увидеть, что происходит в коде. Можно передавать несколько аргументов:console.log("Значение переменной:", variableName);
Также доступны другие методы:
console.error() — для ошибок (выводится красным),
console.warn() — для предупреждений (жёлтый цвет),
console.table() — для удобного отображения массивов и объектов в виде таблицы.
Для показа пользователю простого сообщения используется функция alert():alert("Это сообщение от JavaScript!");
<br><img alt="Pasted image 20250912212840.png" src="материалы/файлы/pasted-image-20250912212840.png" target="_self">Она выводит модальное окно с текстом, которое блокирует взаимодействие с страницей до нажатия кнопки «ОК». Используется исключительно для учебных целей и быстрой обратной связи — в реальных приложениях alert() не применяется из-за плохого пользовательского опыта.
⚠️ Не используйте alert() в продакшене — он нарушает поток работы пользователя и не поддерживает стилизацию.
]]></description><link>материалы/подтемы/секция-1.-javascript/самое-простое-использование-javascript.html</link><guid isPermaLink="false">Материалы/Подтемы/Секция 1. JavaScript/Самое простое использование JavaScript.md</guid><pubDate>Fri, 12 Sep 2025 18:28:41 GMT</pubDate><enclosure url="." length="0" type="false"/><content:encoded>&lt;figure&gt;&lt;img src="."&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Pasted image 20250912212840]]></title><description><![CDATA[<img src="материалы/файлы/pasted-image-20250912212840.png" target="_self">]]></description><link>материалы/файлы/pasted-image-20250912212840.html</link><guid isPermaLink="false">Материалы/Файлы/Pasted image 20250912212840.png</guid><pubDate>Fri, 12 Sep 2025 18:28:40 GMT</pubDate><enclosure url="." length="0" type="false"/><content:encoded>&lt;figure&gt;&lt;img src="."&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Pasted image 20250912212810]]></title><description><![CDATA[<img src="материалы/файлы/pasted-image-20250912212810.png" target="_self">]]></description><link>материалы/файлы/pasted-image-20250912212810.html</link><guid isPermaLink="false">Материалы/Файлы/Pasted image 20250912212810.png</guid><pubDate>Fri, 12 Sep 2025 18:28:10 GMT</pubDate><enclosure url="." length="0" type="false"/><content:encoded>&lt;figure&gt;&lt;img src="."&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Pasted image 20250912212732]]></title><description><![CDATA[<img src="материалы/файлы/pasted-image-20250912212732.png" target="_self">]]></description><link>материалы/файлы/pasted-image-20250912212732.html</link><guid isPermaLink="false">Материалы/Файлы/Pasted image 20250912212732.png</guid><pubDate>Fri, 12 Sep 2025 18:27:32 GMT</pubDate><enclosure url="." length="0" type="false"/><content:encoded>&lt;figure&gt;&lt;img src="."&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[index]]></title><description><![CDATA[<a rel="noopener nofollow" class="external-link is-unresolved" href="https://t.me/+3RqHSkYzaXUyMTUy" target="_self">https://t.me/+3RqHSkYzaXUyMTUy</a><br><img alt="Pasted image 20250912205946.png" src="материалы/файлы/pasted-image-20250912205946.png" target="_self"><br><img alt="qrcod_72k5.png" src="материалы/файлы/qrcod_72k5.png" target="_self"><br><a data-href="Тема №1. Как создаются мобильные приложения" href="лекции/секция-1.-javascript/тема-№1.-как-создаются-мобильные-приложения.html" class="internal-link" target="_self" rel="noopener nofollow">Тема №1. Как создаются мобильные приложения</a>]]></description><link>index.html</link><guid isPermaLink="false">index.md</guid><pubDate>Fri, 12 Sep 2025 18:01:42 GMT</pubDate><enclosure url="." length="0" type="false"/><content:encoded>&lt;figure&gt;&lt;img src="."&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[qrcod_72k5]]></title><description><![CDATA[<img src="материалы/файлы/qrcod_72k5.png" target="_self">]]></description><link>материалы/файлы/qrcod_72k5.html</link><guid isPermaLink="false">Материалы/Файлы/qrcod_72k5.png</guid><pubDate>Fri, 12 Sep 2025 18:00:53 GMT</pubDate><enclosure url="материалы/файлы/qrcod_72k5.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="материалы/файлы/qrcod_72k5.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Pasted image 20250912205946]]></title><description><![CDATA[<img src="материалы/файлы/pasted-image-20250912205946.png" target="_self">]]></description><link>материалы/файлы/pasted-image-20250912205946.html</link><guid isPermaLink="false">Материалы/Файлы/Pasted image 20250912205946.png</guid><pubDate>Fri, 12 Sep 2025 17:59:46 GMT</pubDate><enclosure url="." length="0" type="false"/><content:encoded>&lt;figure&gt;&lt;img src="."&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Переменные в JavaScript]]></title><description><![CDATA[Переменная в JavaScript — это именованный контейнер для хранения данных, который позволяет обращаться к значению по его имени в процессе выполнения программы.Каждая переменная ассоциирована с определённым значением (число, строка, объект, функция и т.д.), которое может меняться во время работы приложения. Переменные позволяют сохранять промежуточные результаты, пользовательские данные, состояния интерфейса — всё, что требуется для динамического поведения приложения.let age = 25;
let userName = "Алексей";
let isActive = true;
Здесь:
age, userName, isActive — имена переменных.
25, "Алексей", true — значения, которые они хранят. Динамическая типизация — тип значения определяется автоматически при присваивании, и переменная может хранить значения разных типов в разное время.
let x = 10; // число
x = "привет"; // теперь строка — допустимо
x = [1, 2, 3]; // теперь массив — тоже допустимо Объявление и использование — переменную нужно объявить перед использованием (кроме случаев с var в нестрогом режиме, но это устаревшая практика).
Область видимости — определяет, где переменная доступна (блок, функция, глобально), зависит от ключевого слова (let, const, var).
Подробнее про эти особенности мы прочтём в следующих лекциях.При создании и использовании переменных необходимо следовать <a data-tooltip-position="top" aria-label="Правила наименования переменных в JavaScript" data-href="Правила наименования переменных в JavaScript" href="материалы/подтемы/секция-1.-javascript/правила-наименования-переменных-в-javascript.html" class="internal-link" target="_self" rel="noopener nofollow">правилам наименования переменных</a>.Работа с переменными включает три ключевых действия: объявление, инициализация и присваивание. Эти понятия тесно связаны, но не тождественны — их различие критически важно для понимания поведения кода.Объявление переменной — это создание её имени в области видимости. Оно сообщает интерпретатору: «Я хочу использовать эту метку для хранения значения».В JavaScript есть три ключевых слова для объявления:Примеры:var x; // объявление через var
let y; // объявление через let
const z; // Ошибка: const требует инициализации при объявлении
Ключевое отличие: const обязывает сразу присвоить значение — без этого возникает синтаксическая ошибка.
💡 Рекомендация: Всегда используйте const по умолчанию. Если знаете, что значение будет меняться — замените на let. Никогда не используйте var в современных проектах — он вносит путаницу из-за hoisting и функциональной области видимости.
Инициализация — это первое присваивание значения переменной в момент её создания. Это когда переменная получает своё начальное значение и становится доступной для использования.
Инициализация может совпадать с объявлением.
Она обязательна для const, опциональна для let и var.
Примеры:let age; // объявление — без инициализации (значение undefined)
age = 25; // присваивание — теперь переменная проинициализирована let score = 100; // объявление + инициализация в одной строке
const name = "Алекс"; // объявление + инициализация (обязательно!)
Инициализация = объявление + первое присваивание в одном действии.Присваивание — это операция изменения значения уже существующей переменной. Оно происходит после объявления (и, если нужно, после инициализации).
Для let — можно присваивать сколько угодно раз.
Для const — присваивание разрешено только один раз (при инициализации); любое последующее присваивание вызовет ошибку.
Присваивание не обязательно должно происходить сразу после объявления.
Примеры:let count;
count = 0; // первое присваивание (и одновременно инициализация)
count = count + 1; // второе присваивание — изменение значения
count = null; // присваивание — можно менять const PI = 3.14;
PI = 3.14159; // Ошибка: присваивание const после инициализации запрещено // Но! Если значение — объект или массив:
const user = { name: "Иван" };
user.name = "Петр"; // Разрешено — меняется содержимое объекта, а не ссылка
user = {}; // Ошибка — попытка изменить ссылку
Важно: const защищает ссылку, а не содержимое. Для объектов и массивов можно менять свойства — это не нарушает константность.В JavaScript, как и в любом языке программирования, читаемость и поддерживаемость кода важнее минимального количества строк. Создание дополнительной переменной для хранения промежуточного результата — это не расточительство, а практика, повышающая ясность кода.
Упрощает чтение: имя переменной может объяснять смысл действия, вместо того чтобы оставлять сложное выражение без контекста.
Облегчает отладку: можно легко поставить точку останова на конкретной переменной и увидеть её значение.
Снижает когнитивную нагрузку: другие разработчики (и вы сами через неделю) быстрее поймут логику.
Повышает переиспользуемость: если значение используется несколько раз — нет нужды повторять вычисление.
Без лишней переменной (менее читаемо):if (user.age &gt;= 18 &amp;&amp; user.status === 'active' &amp;&amp; user.country !== 'restricted') { enableAccess();
}
С лишней переменной (более понятно):const isAdult = user.age &gt;= 18;
const isActive = user.status === 'active';
const isAllowedCountry = user.country !== 'restricted'; if (isAdult &amp;&amp; isActive &amp;&amp; isAllowedCountry) { enableAccess();
}
Здесь имена переменных выполняют роль документации — они сразу говорят, что проверяется, а не как.Не стоит создавать переменные ради создания — только если они действительно улучшают понимание. Не нужно оборачивать простые литералы или очевидные значения, например:const five = 5; // Избыточно
return x + five; // Лучше:
return x + 5;
Но если значение получено в результате вычисления, преобразования или запроса — лучше сохранить его с осмысленным именем.Переменные используются для хранения данных, которые могут изменяться во время выполнения программы. Они позволяют:
Сохранять результаты вычислений;
Передавать данные между частями кода;
Управлять состоянием приложения (например, флаги, счётчики, пользовательские данные). Обращайтесь к переменной только после её объявления и инициализации. Попытка использовать let или const до объявления вызовет ошибку ReferenceError.
Не используйте переменные с неопределённым значением (undefined) без проверки — это источник багов.
Избегайте глобальных переменных. Всегда ограничивайте область видимости блоками ({}), функциями или модулями.
Используйте переменные для повторяющихся значений — это упрощает изменение параметров в будущем (например, таймауты, цвета, константы конфигурации).
const apiUrl = 'https://api.example.com/data';
const timeoutMs = 5000; fetch(apiUrl, { timeout: timeoutMs }) .then(response =&gt; response.json()) .then(data =&gt; { const processedData = data.map(item =&gt; item.toUpperCase()); displayResults(processedData); });
Здесь каждая переменная имеет чёткую роль:
apiUrl — централизованное управление адресом API;
timeoutMs — легко изменяемый параметр;
processedData — промежуточный результат, понятный по имени. Переиспользование одной переменной для разных целей:
let user = getUserById(123);
user = calculateDiscount(user); // Теперь user — не объект пользователя, а число. Путаница! Использование переменных без инициализации:
let result;
console.log(result + 10); // NaN — непредсказуемое поведение ]]></description><link>материалы/подтемы/секция-1.-javascript/переменные-в-javascript.html</link><guid isPermaLink="false">Материалы/Подтемы/Секция 1. JavaScript/Переменные в JavaScript.md</guid><pubDate>Fri, 12 Sep 2025 17:31:28 GMT</pubDate></item><item><title><![CDATA[Тема №2. Основы JavaScript]]></title><description><![CDATA[В этой теме вы познакомитесь с основами JavaScript — языком, лежащим в основе интерактивности современных веб- и мобильных приложений. Рассмотрите историю появления языка, его ключевые характеристики и области применения. Вы узнаете, как устроен простейший код на JavaScript, изучите базовые элементы синтаксиса, а также детально разберёте переменные — их объявление и правила именования. Всё это — фундамент для дальнейшего изучения разработки мобильных приложений на JavaScript-основах.
<a data-href="Что такое JavaScript, история появления" href="материалы/подтемы/секция-1.-javascript/что-такое-javascript,-история-появления.html" class="internal-link" target="_self" rel="noopener nofollow">Что такое JavaScript, история появления</a>
<br><a data-href="Базовое понимание синтаксиса JavaScript" href="материалы/подтемы/секция-1.-javascript/базовое-понимание-синтаксиса-javascript.html" class="internal-link" target="_self" rel="noopener nofollow">Базовое понимание синтаксиса JavaScript</a>
(Пусто)<br><a data-href="Тема №3. Использование JavaScript в браузере" href="лекции/секция-1.-javascript/тема-№3.-использование-javascript-в-браузере.html" class="internal-link" target="_self" rel="noopener nofollow">Тема №3. Использование JavaScript в браузере</a>]]></description><link>лекции/секция-1.-javascript/тема-№2.-основы-javascript.html</link><guid isPermaLink="false">Лекции/Секция 1. JavaScript/Тема №2. Основы JavaScript.md</guid><pubDate>Fri, 12 Sep 2025 17:28:46 GMT</pubDate></item><item><title><![CDATA[Правила наименования переменных в JavaScript]]></title><description><![CDATA[В JavaScript как и в любом другом языке программирования существуют строгие синтаксические правила для именования переменных: Имя должно начинаться с буквы (a–z, A–Z), символа подчёркивания (_) или знака доллара ($).
✅ Разрешено: name, _count, $element
❌ Запрещено: 2name, -value, 3dModel После первого символа можно использовать буквы, цифры (0–9), _ и $.
✅ Разрешено: userName1, total_price, API_KEY
❌ Запрещено: user-name, email@domain, my variable Имена чувствительны к регистру — name, Name и NAME — это три разные переменные. Нельзя использовать зарезервированные слова языка как имена переменных:
let, const, var, function, if, else, return, class, import, export, null, true, false, this, new, while, for, break, continue, try, catch, finally, throw, switch, case, default, typeof, instanceof, in, of, async, await, yield и другие.
❌ Запрещено: let = 5;, function = "test"; Нельзя использовать ключевые слова будущих версий ECMAScript, даже если они пока не используются (например, package, interface, private, protected, public, static).
❌ Лучше избегать: class, enum, implements, module, namespace, super Хотя JavaScript позволяет многое, следование общепринятым соглашениям делает код понятным, поддерживаемым и профессиональным: Используйте camelCase для имен переменных и функций.
✅ userName, isLoading, getTotalPrice
❌ user_name, User Name, usertotalprice Для констант (которые не меняются) используйте UPPER_SNAKE_CASE.
✅ MAX_USERS, API_URL, DEFAULT_TIMEOUT Выбирайте осмысленные, описательные имена — избегайте аббревиатур и однобуквенных имён, если контекст не очевиден.
✅ numberOfItems, currentUser, isFormValid
❌ n, x, tmp, data1, arr Используйте логические имена для булевых переменных — начинайте с is, has, can, should.
✅ isVisible, hasPermission, canSubmit, isLoading Избегайте двойных отрицаний — лучше isDisabled, чем isNotEnabled. Не используйте $ в начале имени без причины — хотя $ разрешён, он часто используется в библиотеках (например, jQuery) для обозначения объектов DOM. Используйте только если это часть вашей договорённости в проекте (например, const $button = document.querySelector('#btn');). Следуйте единому стилю в команде — согласуйте стиль именования в проекте (через ESLint, Prettier или внутренний гайдлайн). Не пишите имена на кириллице — даже если JavaScript это позволяет, это снижает читаемость для международной команды и может вызвать проблемы с инструментами/редакторами. 💡 Рекомендация: «Не жалейте создавать лишнюю переменную» — лучше сделать код более читаемым через понятные имена, чем экономить на количестве строк. Например: const isEmailValid = validateEmail(userInput); // Читаемо и понятно вместо const v = validateEmail(userInput); // Неясно, что такое v ]]></description><link>материалы/подтемы/секция-1.-javascript/правила-наименования-переменных-в-javascript.html</link><guid isPermaLink="false">Материалы/Подтемы/Секция 1. JavaScript/Правила наименования переменных в JavaScript.md</guid><pubDate>Fri, 12 Sep 2025 17:15:13 GMT</pubDate></item><item><title><![CDATA[Базовое понимание синтаксиса JavaScript]]></title><description><![CDATA[В рамках данной темы рассматриваются только базовые элементы синтаксиса JavaScript, необходимые для начала практической работы. Полный объём синтаксических конструкций — от операторов и структур управления до модулей, классов, асинхронности и деструктуризации — будет изучаться последовательно в последующих разделах курса. Настоящая часть служит фундаментом для понимания структуры кода, а не исчерпывающим руководством по языку.Комментарии не влияют на выполнение кода и предназначены исключительно для повышения читаемости и документирования.JavaScript поддерживает два типа комментариев: Однострочные — начинаются с //. Все, что следует после // до конца строки, игнорируется движком. // Это однострочный комментарий
let x = 5; // Можно писать и в конце строки Многострочные — заключаются между /* и */. Позволяют комментировать несколько строк или блоки кода. /*
Это многострочный комментарий
Используется для описания функций, модулей или временного отключения кода
*/
let y = 10;
JavaScript — язык, чувствительный к регистру. Это означает, что имена переменных, функций, ключевых слов и свойств различаются по написанию букв в верхнем и нижнем регистре.
Примеры: let name = "Анна";
let Name = "Иван"; // Это другая переменная
let NAME = "Олег"; // И ещё одна console.log(name); // "Анна"
console.log(Name); // "Иван"
console.log(NAME); // "Олег"
То же относится к ключевым словам: let — корректно, Let — ошибка (если не является именем переменной).
Также чувствительны к регистру названия свойств объектов: user.name ≠ user.Name.В JavaScript точки с запятой (;) используются для явного завершения инструкций. Хотя язык позволяет опускать их в большинстве случаев благодаря автоматической вставке точек с запятой (ASI — Automatic Semicolon Insertion), рекомендуется всегда использовать точки с запятой для предотвращения неочевидных ошибок. ]]></description><link>материалы/подтемы/секция-1.-javascript/базовое-понимание-синтаксиса-javascript.html</link><guid isPermaLink="false">Материалы/Подтемы/Секция 1. JavaScript/Базовое понимание синтаксиса JavaScript.md</guid><pubDate>Fri, 12 Sep 2025 17:06:48 GMT</pubDate></item><item><title><![CDATA[Что такое JavaScript, история появления]]></title><description><![CDATA[JavaScript — это динамический, интерпретируемый язык программирования, изначально разработанный для добавления интерактивности на веб-страницы. Он является одним из трёх основных технологий веб-разработки (наряду с HTML и CSS) и позволяет управлять поведением веб-приложений: обрабатывать события, изменять содержимое страницы, взаимодействовать с сервером и многое другое. Сегодня JavaScript работает не только в браузерах, но и на стороне сервера, в мобильных приложениях, десктопных программах и даже в устройствах Интернета вещей.Это мультипарадигмальный язык, что означает, он поддерживает несколько стилей (парадигм) программирования, и разработчик может выбирать подход, наиболее подходящий для решения задачи. Основные поддерживаемые парадигмы: Функциональное программирование — функции являются первоклассными объектами, можно передавать их как аргументы, возвращать из других функций, создавать замыкания. Поддерживаются чистые функции, иммутабельность, высшие порядки (map, filter, reduce). Объектно-ориентированное программирование (ООП) — через прототипы и (с ES6) синтаксис классов реализуется инкапсуляция, наследование и полиморфизм. Объекты могут динамически расширяться, свойства и методы добавляются во время выполнения. Процедурное программирование — код может быть написан как последовательность инструкций без явного использования классов или функций высшего порядка, что удобно для простых скриптов. JavaScript обладает следующими ключевыми особенностями: Динамическая типизация — тип переменной определяется во время выполнения. Интерпретируемость — код выполняется без предварительной компиляции. Поддержка функционального и объектно-ориентированного стилей — позволяет писать код разными способами. Асинхронность — через колбэки, промисы и async/await обеспечивает неблокирующее выполнение операций. Кроссплатформенность — работает в браузерах, Node.js, React Native, Flutter (через плагины) и других средах. Пример простого кода на JavaScript: alert("Привет, мир!"); let name = "Анна"; console.log("Здравствуйте, " + name + "!"); Этот код отобразит всплывающее окно с сообщением, сохранит имя в переменную и выведет приветствие в консоль браузера.
Веб-браузеры — интерактивные формы, анимации, динамическая загрузка контента. Фронтенд-фреймворки — React, Vue, Angular. Бэкенд — Node.js для серверной логики. Мобильные приложения — React Native, Ionic, NativeScript. Десктопные приложения — Electron. Игры — с использованием Canvas или WebGL. IoT — управление устройствами через JavaScript-среды (например, Johnny-Five).
В середине 1990-х годов веб был преимущественно статичным: HTML описывал структуру, CSS — оформление, но не было инструментов для взаимодействия с пользователем. Нужен был язык, который позволил бы браузерам выполнять простые действия — проверку форм, анимации, реакцию на клики — без обращения к серверу. Netscape Communications, одна из ведущих компаний того времени, решила создать такой язык.В 1995 году Брендан Эйх, работающий в Netscape, за десять дней разработал язык, первоначально названный Mocha, затем LiveScript, а в конце года — JavaScript. Название было выбрано в маркетинговых целях — чтобы ассоциироваться с популярным Java (несмотря на то, что языки принципиально различны). JavaScript был внедрён в браузер Netscape Navigator 2.0.В 1996 году Netscape передала язык в Ecma International для стандартизации. В 1997 году был принят стандарт ECMAScript 1 (ES1). С тех пор язык развивается под управлением Ecma TC39. Каждые 12 месяцев выпускается новая версия стандарта (ES6/ES2015, ES2020, ES2024 и т.д.), которые добавляют новые возможности: стрелочные функции, модули, классы, промисы, деструктуризацию и другие.Сегодня JavaScript — один из самых популярных языков программирования в мире (по данным Stack Overflow, GitHub и других источников). Его экосистема включает тысячи библиотек и фреймворков. Благодаря Node.js он стал универсальным языком, применяемым как на клиенте, так и на сервере. В мобильной разработке JavaScript используется в таких фреймворках, как React Native, позволяя создавать нативные приложения для iOS и Android на единой кодовой базе. Развитие продолжается: активно внедряются новые API, улучшается производительность движков (V8, SpiderMonkey), растёт поддержка TypeScript как надмножества JavaScript.]]></description><link>материалы/подтемы/секция-1.-javascript/что-такое-javascript,-история-появления.html</link><guid isPermaLink="false">Материалы/Подтемы/Секция 1. JavaScript/Что такое JavaScript, история появления.md</guid><pubDate>Fri, 12 Sep 2025 16:56:13 GMT</pubDate></item><item><title><![CDATA[Основные технологии для разработки мобильных приложений]]></title><description><![CDATA[Нативная разработка предполагает использование официальных языков программирования, сред разработки и фреймворков, предоставляемых производителями платформ — Apple и Google. Приложения компилируются напрямую в машинный код, обеспечивающий максимальную производительность и полный доступ к API устройства.Для разработки приложений под iOS используется Swift — язык, созданный Apple в 2014 году как современная замена Objective-C. Swift отличается чистым синтаксисом, безопасностью типов, поддержкой функционального программирования и высокой скоростью выполнения. Он активно развивается и является стандартом для новых проектов.Вместо него до сих пор встречается Objective-C — унаследованный от NeXTSTEP язык, который использовался в iOS до появления Swift. Он остаётся актуальным при поддержке старых проектов, но новые разработчики начинают с Swift.Инструмент разработки — Xcode, единственный официально поддерживаемый IDE от Apple. Он включает в себя редактор кода, симулятор устройств, инструменты отладки, профилирования производительности и систему управления версиями (Git). Xcode работает только на macOS, что делает разработку под iOS невозможной на Windows или Linux без виртуализации.Фреймворки интерфейса:
UIKit — традиционный фреймворк для создания пользовательских интерфейсов. Работает на основе иерархии представлений (UIView), требует детального описания макетов через код или Interface Builder. Подходит для сложных, детально настраиваемых интерфейсов.
SwiftUI — декларативный фреймворк, представленный в 2019 году. Позволяет описывать интерфейс как функцию состояния приложения — «что должно отображаться при данном состоянии», а не «как его построить». Упрощает разработку, обеспечивает автоматическую адаптацию под все размеры экранов и темы (светлая/тёмная), и полностью интегрирован с Swift. Считается будущим iOS-разработки.
Обе технологии работают с экосистемой Apple: Core Animation, Core Location, ARKit, HealthKit, Face ID, Push Notifications — всё доступно через единые API, документированные и стабильно поддерживающиеся Apple.Основным языком для Android сегодня является Kotlin — язык, разработанный JetBrains и официально объявленный Google предпочтительным для Android-разработки с 2019 года. Kotlin сочетает в себе функциональные и объектно-ориентированные парадигмы, обладает более безопасной системой типов (отсутствие null-pointer исключений по умолчанию), сжатым синтаксисом и полной совместимостью с Java.Java остаётся актуальной благодаря огромной базе legacy-приложений и корпоративных систем. Многие библиотеки, туториалы и инструкции всё ещё написаны на Java, но новые проекты рекомендуют начинать с Kotlin.Среда разработки — Android Studio, основанная на IntelliJ IDEA. Она предоставляет полноценный набор инструментов: эмулятор устройств, профайлер памяти и сети, анализатор производительности, инструменты для тестирования и поддержку Firebase. Работает на Windows, macOS и Linux — обеспечивает большую доступность, чем Xcode.Фреймворки интерфейса:
XML-разметка + View-система — классический подход. Интерфейс описывается в XML-файлах, а логика — в Kotlin/Java-классах. Требует явного связывания элементов UI с кодом (findViewById()), что создаёт больше шаблонного кода и потенциальных ошибок.
Jetpack Compose — современный декларативный фреймворк, аналог SwiftUI. Позволяет описывать интерфейс как функцию состояния, используя только Kotlin. Компоненты (Composables) перерисовываются автоматически при изменении данных. Упрощает создание динамических интерфейсов, снижает количество кода и повышает читаемость. С 2023 года считается основным стандартом для новых проектов.
Android также предлагает богатую экосистему Jetpack — набор библиотек (ViewModel, Room, Navigation, DataStore, WorkManager и др.), которые решают типовые задачи: управление жизненным циклом, работа с базами данных, фоновые задачи, маршрутизация между экранами — всё стандартизировано и поддерживается Google.Кроссплатформенные технологии позволяют писать один код, который компилируется в нативные приложения для iOS и Android. Отличие от гибридных — отсутствие WebView: вместо веб-страницы приложение использует настоящие нативные компоненты или собственные рендереры, что обеспечивает близкую к нативной производительность.Разработан Google и представлен в 2017 году. Основан на языке Dart — объектно-ориентированном языке с быстрой компиляцией и поддержкой JIT/AOT (Just-in-Time / Ahead-of-Time). Flutter компилирует код напрямую в нативный ARM-код, минуя виртуальную машину.Ключевая особенность — декларативная widget-архитектура. Весь интерфейс строится из деревьев виджетов — каждый элемент (кнопка, текст, список) — это виджет, который может быть изменён, вложен или переиспользован. Даже отступы и цвета — это виджеты.Flutter не использует нативные UI-компоненты iOS или Android. Вместо этого он рендерит собственные элементы с помощью графического движка Skia — то же, что используется в Chrome и Android. Это даёт:
Единый дизайн на всех платформах — приложение выглядит одинаково на iPhone и Samsung.
Высокую производительность — 60–120 FPS даже на сложных анимациях.
Гибкость дизайна — можно создавать уникальные интерфейсы, не привязанные к Material Design или Human Interface Guidelines.
Ограничения: больший размер приложения (включает рендер-движок), ограниченная интеграция с некоторыми нативными API без написания плагинов на Swift/Kotlin, менее «родной» UX на iOS, если не следовать гайдлайнам вручную.Flutter идеален для проектов с акцентом на дизайн: продукты с уникальной визуальной идентичностью, маркетплейсы, сервисы с частыми анимациями, MVP-стартапы, где важна скорость выхода на два рынка.Разработан Meta (ранее Facebook) в 2015 году. Основан на JavaScript и TypeScript — языках, уже знакомых миллионам веб-разработчиков. React Native использует принцип React — компонентный подход, где интерфейс строится из повторно используемых компонентов, реагирующих на изменения состояния.Архитектура React Native основана на JS-бриджe: JavaScript-код выполняется в отдельном потоке, а вызовы к нативным компонентам (кнопки, списки, камера) передаются через мост. Это позволяет использовать настоящие нативные UI-элементы, но создаёт задержки при частых взаимодействиях между JS и нативным кодом.Преимущества:
Высокая скорость разработки для команд с опытом в вебе.
Большое сообщество и множество готовых библиотек (npm).
Возможность частичного перехода: можно внедрять React Native-экраны в существующее нативное приложение.
Поддержка горячей перезагрузки (Hot Reload) — изменения видны мгновенно.
Ограничения:
Производительность ниже, чем у Flutter или нативных приложений — особенно при сложной анимации или работе с большим количеством данных.
Зависимость от сторонних библиотек для доступа к API — многие требуют установки и настройки нативных модулей (Native Modules).
Разница в поведении между iOS и Android — некоторые компоненты могут работать по-разному, требуя платформо-специфичного кода.
Сложность отладки: ошибки могут возникать как в JS, так и в нативном коде, затрудняя диагностику.
React Native популярен в компаниях, где есть команда веб-разработчиков, нуждающаяся в выходе на мобильный рынок без полного переобучения. Примеры: Facebook, Instagram, Skype, Walmart, Tesla.Разработан Microsoft, ранее известный как Xamarin Forms. Использует язык C# и фреймворк .NET — популярный в корпоративной разработке. В 2022 году Xamarin был объединён с .NET Multi-platform App UI (.NET MAUI) — современной версией, поддерживающей не только iOS и Android, но и Windows, macOS.Отличие от React Native и Flutter: Xamarin/.NET MAUI не использует мост. Код компилируется напрямую в нативный код через Mono или .NET runtime, что обеспечивает лучшую производительность и меньшие накладные расходы.Плюсы:
Полный доступ к нативным API через привязки (bindings) — почти все функции устройства доступны «из коробки».
Единая кодовая база для мобильных и десктопных приложений.
Интеграция с Visual Studio и Azure — удобна для корпоративных проектов.
Сильная типизация и безопасность C#.
Минусы:
Меньшее сообщество по сравнению с Flutter и React Native.
Более сложная настройка, особенно для новичков.
Менее гибкий UI — интерфейс часто выглядит «по-Windows», если не применять платформо-специфичные стили.
Медленнее развитие экосистемы по сравнению с Google и Meta.
.NET MAUI подходит для enterprise-решений: внутренние корпоративные приложения, ERP-системы, CRM, медицинские терминалы, приложения с интеграцией в облачные сервисы Microsoft (Azure, Office 365).]]></description><link>материалы/подтемы/секция-1.-javascript/основные-технологии-для-разработки-мобильных-приложений.html</link><guid isPermaLink="false">Материалы/Подтемы/Секция 1. JavaScript/Основные технологии для разработки мобильных приложений.md</guid><pubDate>Fri, 12 Sep 2025 16:11:15 GMT</pubDate></item><item><title><![CDATA[Основные типы мобильных приложений]]></title><description><![CDATA[Мобильное приложение — это не просто программа, запущенная на смартфоне. Его тип определяется тем, как оно создано, на чём работает и как взаимодействует с операционной системой и аппаратными компонентами устройства. Выбор типа приложения влияет на производительность, сроки разработки, стоимость поддержки и качество пользовательского опыта. Существует четыре основных типа: нативные, веб-приложения, гибридные и кроссплатформенные.Нативные приложения — это программы, разработанные специально для одной конкретной платформы с использованием официальных языков программирования, SDK и инструментов, предоставленных её создателем.Для iOS приложения пишутся на Swift или Objective-C с использованием фреймворков UIKit и SwiftUI, собираются в Xcode и компилируются напрямую в машинный код для архитектуры ARM процессоров Apple.
Для Android — на Kotlin или Java с использованием Android SDK, сборка происходит через Android Studio в APK или AAB-файлы, которые затем интерпретируются Android Runtime (ART).Преимущества: Максимальная производительность — код выполняется напрямую на устройстве без промежуточных слоёв. Полный доступ ко всем API устройства: камера, GPS, Bluetooth, сенсоры, биометрия, уведомления, фоновые задачи. Соответствие стандартам платформы (Human Interface Guidelines для iOS, Material Design для Android) — обеспечивает интуитивный и «родной» пользовательский опыт. Лучшая стабильность и поддержка обновлений ОС — разработчики получают ранний доступ к новым функциям через beta-версии SDK.
Ограничения: Требуется отдельная команда разработчиков для каждой платформы — удвоение затрат на разработку и тестирование. Дублирование логики и дизайна между версиями — увеличивает время выхода на рынок. Высокая зависимость от экосистемы: обновление API может потребовать переписывания значительной части кода.
Области применения:
Нативные приложения — стандарт для проектов, где важны скорость, надёжность и глубокая интеграция с устройством: банковские и финансовые приложения, игры, AR/VR-решения, медицинские системы, приложения с реальным временем (например, такси, доставка), корпоративные инструменты с высокими требованиями к безопасности.Веб-приложения — это сайты, спроектированные так, чтобы вести себя как мобильные приложения. Они работают в браузере, но могут быть добавлены на домашний экран, работать оффлайн и отправлять уведомления благодаря технологиям PWA.Основаны на стандартных веб-технологиях: HTML5, CSS3, JavaScript, а также Service Workers (для кэширования и работы без интернета), Web App Manifest (для определения иконки, имени, цвета темы) и Push API.Преимущества: Одна кодовая база — работает на всех устройствах с браузером (iOS, Android, даже десктоп). Нет необходимости проходить модерацию в магазинах приложений — публикация мгновенная. Низкие затраты на разработку и обслуживание. Не требует установки — пользователь сразу переходит по ссылке. Автоматическое обновление — изменения видны сразу после релиза.
Ограничения: Ограниченный доступ к аппаратным возможностям устройства: нет прямого доступа к контактам, файловой системе, Bluetooth Low Energy, NFC, гироскопу в некоторых случаях. Невозможность использовать многие нативные UI-компоненты — интерфейс выглядит как сайт, а не как приложение. Зависимость от браузера: производительность и совместимость различаются между Safari, Chrome, Firefox. Отсутствие в App Store и Google Play — потеря видимости, возможности рейтингов, рекомендаций и внутренних покупок через официальные каналы.
Области применения:
PWA подходят для контентных сервисов, информационных сайтов, электронной коммерции с простой логикой, корпоративных порталов, приложений с низким уровнем взаимодействия: онлайн-газеты, каталоги товаров, формы обратной связи, калькуляторы, лендинги. Особенно эффективны там, где важна скорость распространения и минимальные затраты — например, маркетинговые кампании или временные акции.Гибридные приложения — это веб-приложения, обёрнутые в «оболочку» нативного контейнера (WebView), который позволяет им запускаться как обычные мобильные приложения из магазинов. Они используют веб-технологии (HTML/CSS/JS), но имеют доступ к нативным API через плагины.Популярные фреймворки: Apache Cordova (ранее PhoneGap) и Ionic (основан на Angular/React/Vue + Cordova).Преимущества: Одна кодовая база для iOS и Android — снижение затрат на разработку. Возможность публикации в App Store и Google Play — как нативные приложения. Быстрая разработка для команд с опытом в вебе. Поддержка большинства базовых функций: камера, геолокация, уведомления, файловая система — через плагины.
Ограничения: Производительность ниже, чем у нативных — все операции проходят через WebView, что создаёт задержки, особенно при анимациях и сложной графике. Плагины часто устаревают или плохо документированы — могут вызывать баги на новых версиях ОС. UX редко достигает уровня «родного» приложения — интерфейс чувствуется как «веб-страница в обёртке». Ограниченный доступ к современным нативным функциям (например, Face ID, ARKit, Android Jetpack Compose).
Области применения:
Гибридные приложения подходят для прототипирования, MVP-проектов, внутренних корпоративных инструментов, приложений с простой логикой и минимальным взаимодействием с оборудованием: учётные системы, формы регистрации, CRM-клиенты, базовые лояльностные программы. Идеальны, когда бюджет ограничен, а сроки — жёсткие, и требуется быстрый выход на два рынка.Кроссплатформенные приложения — это приложения, написанные на одном языке и фреймворке, которые компилируются в нативный код для разных платформ. Это не обёртки, а генерация нативных компонентов на основе единого исходного кода.Популярные фреймворки: Flutter (Dart, от Google), React Native (JavaScript/TypeScript, от Meta), Xamarin (C#, от Microsoft), Kivy (Python, редко используется в коммерческой разработке).Отличие от гибридных: вместо WebView они используют настоящие нативные UI-компоненты (например, Flutter рисует собственные виджеты, React Native вызывает native UI элементы iOS/Android напрямую).Преимущества: Одна кодовая база — до 80–95% общего кода между iOS и Android. Производительность близка к нативной — особенно в Flutter и React Native с правильной оптимизацией. Доступ к большинству нативных API через библиотеки (например, Firebase, Mapbox, camera plugin). Современный UI — возможность создавать уникальный дизайн, не привязанный к стандартам платформы. Активное сообщество, регулярные обновления, хорошая документация.
Ограничения: Некоторые функции требуют написания нативного кода (Java/Kotlin, Swift/Objective-C) — если нужна глубокая интеграция с OS. Размер приложения больше, чем у чисто нативного (особенно в Flutter — включает движок рендеринга). Возможны баги на границах платформ — поведение одного и того же компонента может отличаться на iOS и Android. Обучение новому языку (Dart, TypeScript) требует времени для команд, привыкших к Java/Kotlin или Swift.
Области применения:
Кроссплатформенные решения — выбор большинства стартапов, компаний с ограниченным бюджетом, но амбициозными целями. Подходят для социальных сетей, мессенджеров, e-commerce, финтех-приложений, образовательных платформ, приложений с частыми обновлениями и необходимостью быстро масштабироваться. Примеры: Facebook, Instagram (частично), Uber Eats, Alibaba, Tencent.]]></description><link>материалы/подтемы/секция-1.-javascript/основные-типы-мобильных-приложений.html</link><guid isPermaLink="false">Материалы/Подтемы/Секция 1. JavaScript/Основные типы мобильных приложений.md</guid><pubDate>Fri, 12 Sep 2025 16:07:07 GMT</pubDate></item><item><title><![CDATA[Основные платформы мобильных приложений]]></title><description><![CDATA[Платформа мобильных приложений — это совокупность программного обеспечения, инструментов, стандартов и правил, которые определяют, как создаются, устанавливаются и работают мобильные приложения на конкретном устройстве. Это не просто операционная система (ОС), а целая экосистема: от ядра ОС и API-интерфейсов до магазинов приложений, систем подписок, политик безопасности и требований к разработчикам. Выбор платформы напрямую влияет на: доступные функции устройства (камера, GPS, биометрия); способы взаимодействия с пользователем; методы тестирования и отладки; стратегию монетизации и распространения; сроки и стоимость разработки. На сегодняшний день подавляющее большинство мобильных приложений создаётся для двух основных платформ — iOS и Android. Их доминирование обусловлено масштабами рынка, зрелостью инструментов и поддержкой со стороны крупнейших технологических компаний.iOS — экосистема Apple, работающая на устройствах iPhone, iPad и iPod touch. Закрытая, строго контролируемая платформа с единым стандартом качества, высокой безопасностью и стабильной производительностью. Основная аудитория — пользователи в развитых странах, с высоким уровнем дохода и лояльностью к бренду.Android — открытая операционная система от Google, используемая сотнями производителей (Samsung, Xiaomi, OnePlus, Motorola и др.). Обладает огромной фрагментацией устройств и версий, но обеспечивает максимальную доступность и гибкость для разработчиков и пользователей. Доминирует в развивающихся рынках и по объёму установленных устройств — более 70% глобального рынка смартфонов.Но, помимо iOS и Android, на протяжении истории мобильных технологий существовали и другие платформы, которые либо имели значительную долю рынка, либо обладали высоким потенциалом, но в итоге уступили место доминирующим системам.Windows Phone (Microsoft) — запущенная в 2010 году платформа, основанная на ядре Windows NT, предлагала уникальный пользовательский интерфейс с динамическими «живыми» плитками. Несмотря на техническую изящность и глубокую интеграцию с экосистемой Microsoft (Outlook, Office, OneDrive), она не смогла привлечь достаточное количество разработчиков. Отсутствие приложений, особенно популярных сервисов вроде Instagram или WhatsApp на ранних этапах, стало фатальным. Microsoft официально прекратила поддержку Windows Phone в 2017 году.BlackBerry OS / BlackBerry 10 — до середины 2000-х годов BlackBerry была синонимом корпоративной мобильности благодаря надёжной безопасности, физической клавиатуре и собственной сети Push Mail. Однако компания не сумела адекватно ответить на рост сенсорных экранов и экосистемы приложений. Попытка перезапуска с BlackBerry 10 в 2013 году, основанной на QNX, оказалась слишком поздней — к тому времени пользователи уже массово перешли на iOS и Android. В 2016 году BlackBerry перестала производить собственные устройства.Symbian — когда-то самая популярная мобильная ОС, особенно в Европе и Азии, Symbian использовалась Nokia, Samsung, Siemens и другими. Она доминировала на рынке до 2007 года, но её архитектура, унаследованная от эпохи кнопочных телефонов, не позволила эффективно адаптироваться к новым требованиям тачскринов и мультимедиа. После выхода iPhone и Android, Nokia в 2011 году перешла на Windows Phone, а Symbian была официально закрыта в 2014 году.WebOS (Palm, затем HP) — оригинальная и продвинутая система с многооконным интерфейсом, предшественник современных концепций многозадачности. Palm выпустила первые устройства на WebOS в 2009 году, а HP попыталась развивать платформу дальше, даже выпустив планшет TouchPad. Но недостаток приложений, маркетинговой поддержки и внутренние конфликты в HP привели к отказу от WebOS в 2011 году. Позже HP передала код проекта LG, который использовал его для своих смарт-телевизоров — но как мобильная ОС WebOS так и не возродилась.HarmonyOS (Huawei) — современный пример платформы, появившейся как ответ на геополитические ограничения. Разработанная Huawei в 2019 году после запрета Google на использование GMS (Google Mobile Services), HarmonyOS изначально позиционировалась как универсальная ОС для IoT-устройств, а позже — как замена Android на смартфонах. Хотя она технически совместима с Android-приложениями через App Pack, её глобальное распространение ограничено из-за отсутствия доступа к ключевым сервисам Google и западным приложениям. На сегодня — это важный региональный игрок (особенно в Китае), но не глобальная альтернатива iOS/Android.iOS и Android — две доминирующие мобильные платформы, отличающиеся не только архитектурой, но и философией разработки, подходом к безопасности, экосистеме и взаимодействию с пользователем. Их сравнение позволяет понять фундаментальные различия, которые влияют на процесс создания мобильных приложений.Языки программирования и инструменты разработки
iOS-приложения разрабатываются преимущественно на языке Swift (с 2014 года), а также на Objective-C — унаследованном от эпохи NeXTSTEP. Интегрированная среда разработки — Xcode, доступная исключительно на macOS. Это накладывает ограничения: разработка под iOS невозможна без устройства Apple или виртуальной машины с macOS.
Android-приложения пишутся на Kotlin (рекомендуемый язык с 2019 года) или Java (традиционный, но постепенно вытесняемый). Среда разработки — Android Studio, основанная на IntelliJ IDEA, работает на Windows, macOS и Linux, что обеспечивает большую доступность для разработчиков.Архитектура и управление ресурсами
iOS использует закрытую, унифицированную архитектуру: ограниченное количество моделей устройств с жёстко контролируемыми характеристиками (память, процессор, экран). Это позволяет оптимизировать приложения под конкретные аппаратные конфигурации, обеспечивая высокую производительность и стабильность.
Android, напротив, работает на тысячах устройств с разными процессорами, объёмами ОЗУ, плотностями пикселей и версиями ОС. Разработчику приходится учитывать фрагментацию — от старых смартфонов с Android 8 до новых с Android 14 — и применять адаптивные интерфейсы, проверять совместимость и использовать библиотеки поддержки (Android Support Library / AndroidX).Магазины приложений и политики распространения
Приложения для iOS распространяются исключительно через App Store — строго централизованный и контролируемый канал. Apple проводит ручную модерацию каждого приложения, требует соблюдения строгих гайдлайнов по дизайну, приватности и функциональности. Это повышает уровень безопасности для пользователей, но замедляет выпуск обновлений и ограничивает возможности монетизации (например, запрещены сторонние магазины и системы внутренних покупок вне App Store).
Android-приложения могут распространяться через Google Play, но также допускается установка из сторонних источников (APK-файлы). Google Play имеет автоматизированную модерацию, менее строгие требования, но более высокий риск распространения вредоносного ПО. Это делает Android более открытой, но требует от разработчика дополнительных мер по защите приложения и информированию пользователей о безопасности.Доля рынка и целевая аудитория
По количеству установленных устройств Android доминирует — около 70–75% глобального рынка смартфонов, особенно в Азии, Африке и Латинской Америке. При этом iOS занимает около 25–30%, но сосредоточена в странах с высоким уровнем дохода — США, Западная Европа, Япония, Австралия.
Это создаёт принципиально разные экономические модели: приложения для iOS чаще генерируют больше дохода на одного пользователя (высокий ARPU — Average Revenue Per User), тогда как Android обеспечивает больший охват аудитории, но с меньшей monetization. Для бизнес-приложений это означает выбор между качеством и количеством.Обновления и жизненный цикл устройств
Apple контролирует полный цикл — от железа до ПО — и обеспечивает массовые обновления ОС для устройств, выпущенных до 5–6 лет назад. Более 90% активных устройств iOS работают на последних двух версиях ОС.
Android-устройства получают обновления неравномерно: производители (Samsung, Xiaomi и др.) сами решают, какие модели поддерживают, а многие бюджетные устройства остаются на устаревших версиях (Android 8–10) годами. Это вынуждает разработчиков поддерживать совместимость с множеством версий API, увеличивая сложность тестирования и развертывания.Безопасность и приватность
iOS позиционируется как более безопасная платформа благодаря изолированной среде выполнения приложений (sandboxing), строгому контролю доступа к данным (персональные файлы, камера, микрофон), шифрованию данных на уровне ОС и обязательному использованию App Transport Security.
Android предоставляет аналогичные механизмы, но их реализация зависит от производителя. Многие OEM-производители добавляют собственные сервисы, фоновые процессы и права, которые могут компрометировать приватность. Кроме того, открытость Android делает его более уязвимым к вредоносным APK-файлам, загружаемым вне Google Play.Интеграция с экосистемой
iOS тесно интегрирован с другими продуктами Apple: iCloud, AirDrop, Handoff, Continuity, Apple Watch, HomeKit. Это позволяет создавать кросс-устройственные приложения с единым пользовательским опытом.
Android интегрируется с сервисами Google: Gmail, Google Maps, Drive, Firebase, Google Assistant, Wear OS. Эти сервисы предоставляют мощные инструменты для разработчиков — особенно для аналитики (Firebase), push-уведомлений, облачного хранения и машинного обучения. Однако интеграция с другими устройствами (TV, часы, авто) менее унифицирована, чем в Apple.]]></description><link>материалы/подтемы/секция-1.-javascript/основные-платформы-мобильных-приложений.html</link><guid isPermaLink="false">Материалы/Подтемы/Секция 1. JavaScript/Основные платформы мобильных приложений.md</guid><pubDate>Fri, 12 Sep 2025 15:58:25 GMT</pubDate></item><item><title><![CDATA[Тема №1. Как создаются мобильные приложения]]></title><description><![CDATA[Вводная тема, посвящённая базовым понятиям разработки мобильных приложений. <a data-href="Основные платформы мобильных приложений" href="материалы/подтемы/секция-1.-javascript/основные-платформы-мобильных-приложений.html" class="internal-link" target="_self" rel="noopener nofollow">Основные платформы мобильных приложений</a>
<br><a data-href="Основные типы мобильных приложений" href="материалы/подтемы/секция-1.-javascript/основные-типы-мобильных-приложений.html" class="internal-link" target="_self" rel="noopener nofollow">Основные типы мобильных приложений</a>
<br><a data-href="Основные технологии для разработки мобильных приложений" href="материалы/подтемы/секция-1.-javascript/основные-технологии-для-разработки-мобильных-приложений.html" class="internal-link" target="_self" rel="noopener nofollow">Основные технологии для разработки мобильных приложений</a>
(Пусто)<br><a data-href="Тема №2. Основы JavaScript" href="лекции/секция-1.-javascript/тема-№2.-основы-javascript.html" class="internal-link" target="_self" rel="noopener nofollow">Тема №2. Основы JavaScript</a>]]></description><link>лекции/секция-1.-javascript/тема-№1.-как-создаются-мобильные-приложения.html</link><guid isPermaLink="false">Лекции/Секция 1. JavaScript/Тема №1. Как создаются мобильные приложения.md</guid><pubDate>Fri, 12 Sep 2025 15:40:20 GMT</pubDate></item><item><title><![CDATA[Pasted image 20250906080710]]></title><description><![CDATA[<img src="pasted-image-20250906080710.png" target="_self">]]></description><link>pasted-image-20250906080710.html</link><guid isPermaLink="false">Pasted image 20250906080710.png</guid><pubDate>Sat, 06 Sep 2025 05:07:10 GMT</pubDate><enclosure url="." length="0" type="false"/><content:encoded>&lt;figure&gt;&lt;img src="."&gt;&lt;/figure&gt;</content:encoded></item></channel></rss>