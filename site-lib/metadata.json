{"createdTime":1756485330350,"shownInTree":["задания/секция-1.-javascript/практика-№1.-простая-веб-страница-с-html.html","лекции/секция-1.-javascript/тема-№1.-как-создаются-мобильные-приложения.html","лекции/секция-1.-javascript/тема-№2.-основы-javascript.html","лекции/секция-1.-javascript/тема-№3.-использование-javascript-в-браузере.html","лекции/секция-1.-javascript/тема-№4.-node.js,-примитивные-типы-данных-javascript.html","лекции/секция-1.-javascript/тема-№5.-операторы-и-операции-в-javascript.html","лекции/секция-1.-javascript/тема-№6.-git,-github.html","материалы/как-сделать/как-создавать-файлы-с-определённым-расширением.html","материалы/подтемы/секция-1.-javascript/тема-№6/базовые-команды-git.html","материалы/подтемы/секция-1.-javascript/тема-№6/базовые-понятия-git.html","материалы/подтемы/секция-1.-javascript/тема-№6/основные-понятия-git.html","материалы/подтемы/секция-1.-javascript/тема-№6/работа-с-ветками-git.html","материалы/подтемы/секция-1.-javascript/тема-№6/работа-с-удалёнными-репозиториями.html","материалы/подтемы/секция-1.-javascript/тема-№6/рекомендации-по-использованию-git.html","материалы/подтемы/секция-1.-javascript/тема-№6/файл-.gitignore.html","материалы/подтемы/секция-1.-javascript/тема-№6/что-такое-git.html","материалы/подтемы/секция-1.-javascript/тема-№6/что-такое-github.html","материалы/подтемы/секция-1.-javascript/арифметические-операторы-javascript.html","материалы/подтемы/секция-1.-javascript/базовая-работа-с-элементами-веб-страницы-через-javascript.html","материалы/подтемы/секция-1.-javascript/базовое-понимание-синтаксиса-javascript.html","материалы/подтемы/секция-1.-javascript/логические-операторы-javascript.html","материалы/подтемы/секция-1.-javascript/операторы-присваивания-javascript.html","материалы/подтемы/секция-1.-javascript/операторы-работы-с-битами.html","материалы/подтемы/секция-1.-javascript/операторы-сравнения-javascript.html","материалы/подтемы/секция-1.-javascript/определение-оператора-и-операнда.html","материалы/подтемы/секция-1.-javascript/основные-платформы-мобильных-приложений.html","материалы/подтемы/секция-1.-javascript/основные-понятия-веб-страницы.html","материалы/подтемы/секция-1.-javascript/основные-технологии-для-разработки-мобильных-приложений.html","материалы/подтемы/секция-1.-javascript/основные-типы-мобильных-приложений.html","материалы/подтемы/секция-1.-javascript/переменные-в-javascript.html","материалы/подтемы/секция-1.-javascript/правила-наименования-переменных-в-javascript.html","материалы/подтемы/секция-1.-javascript/примитивные-типы-данных-javascript.html","материалы/подтемы/секция-1.-javascript/приоритет-операторов-и-ассоциативность.html","материалы/подтемы/секция-1.-javascript/самое-простое-использование-javascript.html","материалы/подтемы/секция-1.-javascript/создание-своей-html-страницы.html","материалы/подтемы/секция-1.-javascript/установка-и-базовое-использование-node.js.html","материалы/подтемы/секция-1.-javascript/что-такое-javascript,-история-появления.html","материалы/подтемы/секция-1.-javascript/что-такое-node.js.html","материалы/файлы/pasted-image-20240923235323.png","материалы/файлы/pasted-image-20240923235323.html","материалы/файлы/pasted-image-20240928221620.png","материалы/файлы/pasted-image-20240928221620.html","материалы/файлы/pasted-image-20240928222139.png","материалы/файлы/pasted-image-20240928222139.html","материалы/файлы/pasted-image-20240928222237.png","материалы/файлы/pasted-image-20240928222237.html","материалы/файлы/pasted-image-20250912205946.png","материалы/файлы/pasted-image-20250912205946.html","материалы/файлы/pasted-image-20250912212732.png","материалы/файлы/pasted-image-20250912212732.html","материалы/файлы/pasted-image-20250912212810.png","материалы/файлы/pasted-image-20250912212810.html","материалы/файлы/pasted-image-20250912212840.png","материалы/файлы/pasted-image-20250912212840.html","материалы/файлы/pasted-image-20250912214611.png","материалы/файлы/pasted-image-20250912214611.html","материалы/файлы/pasted-image-20250912214624.png","материалы/файлы/pasted-image-20250912214624.html","материалы/файлы/pasted-image-20250912214643.png","материалы/файлы/pasted-image-20250912214643.html","материалы/файлы/pasted-image-20250912214649.png","материалы/файлы/pasted-image-20250912214649.html","материалы/файлы/pasted-image-20250912214653.png","материалы/файлы/pasted-image-20250912214653.html","материалы/файлы/pasted-image-20250917202240.png","материалы/файлы/pasted-image-20250917202240.html","материалы/файлы/qrcod_72k5.png","материалы/файлы/qrcod_72k5.html","index.html"],"attachments":["site-lib/scripts/graph-wasm.wasm","site-lib/fonts/94f2f163d4b698242fef.otf","site-lib/fonts/72505e6a122c6acd5471.woff2","site-lib/fonts/2d5198822ab091ce4305.woff2","site-lib/fonts/c8ba52b05a9ef10f4758.woff2","site-lib/fonts/cb10ffd7684cd9836a05.woff2","site-lib/fonts/b5f0f109bc88052d4000.woff2","site-lib/fonts/cbe0ae49c52c920fd563.woff2","site-lib/fonts/535a6cf662596b3bd6a6.woff2","site-lib/fonts/70cc7ff27245e82ad414.ttf","site-lib/fonts/454577c22304619db035.ttf","site-lib/fonts/52ac8f3034507f1d9e53.ttf","site-lib/fonts/05b618077343fbbd92b7.ttf","site-lib/fonts/4bb6ac751d1c5478ff3a.woff2","site-lib/media/6155340132a851f6089e.svg","site-lib/media/2308ab1944a6bfa5c5b8.svg","site-lib/html/file-tree-content.html","site-lib/scripts/webpage.js","site-lib/scripts/graph-wasm.js","site-lib/scripts/graph-render-worker.js","site-lib/media/favicon.png","site-lib/styles/obsidian.css","site-lib/styles/global-variable-styles.css","site-lib/styles/main-styles.css","site-lib/rss.xml","site-lib/fonts/293fd13dbca5a3e450ef.woff2","site-lib/fonts/085cb93e613ba3d40d2b.woff2","материалы/файлы/pasted-image-20250912205946.png","материалы/файлы/pasted-image-20250912212732.png","материалы/файлы/pasted-image-20250912212810.png","материалы/файлы/pasted-image-20250912212840.png","материалы/файлы/pasted-image-20250912214611.png","материалы/файлы/pasted-image-20250912214624.png","материалы/файлы/pasted-image-20250912214643.png","материалы/файлы/pasted-image-20250912214649.png","материалы/файлы/pasted-image-20250912214653.png","материалы/файлы/qrcod_72k5.png","материалы/файлы/pasted-image-20240923235323.png","материалы/файлы/pasted-image-20240928221620.png","материалы/файлы/pasted-image-20240928222139.png","материалы/файлы/pasted-image-20240928222237.png","материалы/файлы/pasted-image-20250917202240.png"],"allFiles":["лекции/секция-1.-javascript/тема-№6.-git,-github.html","материалы/подтемы/секция-1.-javascript/тема-№6/рекомендации-по-использованию-git.html","материалы/подтемы/секция-1.-javascript/тема-№6/файл-.gitignore.html","материалы/подтемы/секция-1.-javascript/тема-№6/работа-с-удалёнными-репозиториями.html","материалы/подтемы/секция-1.-javascript/тема-№6/что-такое-github.html","материалы/подтемы/секция-1.-javascript/тема-№6/работа-с-ветками-git.html","материалы/подтемы/секция-1.-javascript/тема-№6/что-такое-git.html","материалы/подтемы/секция-1.-javascript/тема-№6/основные-понятия-git.html","материалы/подтемы/секция-1.-javascript/тема-№6/базовые-команды-git.html","материалы/подтемы/секция-1.-javascript/тема-№6/базовые-понятия-git.html","лекции/секция-1.-javascript/тема-№5.-операторы-и-операции-в-javascript.html","материалы/подтемы/секция-1.-javascript/приоритет-операторов-и-ассоциативность.html","материалы/подтемы/секция-1.-javascript/операторы-работы-с-битами.html","материалы/подтемы/секция-1.-javascript/операторы-присваивания-javascript.html","материалы/подтемы/секция-1.-javascript/операторы-сравнения-javascript.html","материалы/подтемы/секция-1.-javascript/логические-операторы-javascript.html","материалы/подтемы/секция-1.-javascript/арифметические-операторы-javascript.html","материалы/подтемы/секция-1.-javascript/определение-оператора-и-операнда.html","лекции/секция-1.-javascript/тема-№4.-node.js,-примитивные-типы-данных-javascript.html","материалы/подтемы/секция-1.-javascript/примитивные-типы-данных-javascript.html","материалы/файлы/pasted-image-20250917202240.png","материалы/файлы/pasted-image-20250917202240.html","материалы/подтемы/секция-1.-javascript/установка-и-базовое-использование-node.js.html","материалы/подтемы/секция-1.-javascript/что-такое-node.js.html","задания/секция-1.-javascript/практика-№1.-простая-веб-страница-с-html.html","лекции/секция-1.-javascript/тема-№3.-использование-javascript-в-браузере.html","материалы/подтемы/секция-1.-javascript/создание-своей-html-страницы.html","материалы/как-сделать/как-создавать-файлы-с-определённым-расширением.html","материалы/файлы/pasted-image-20250912214653.png","материалы/файлы/pasted-image-20250912214653.html","материалы/файлы/pasted-image-20250912214649.png","материалы/файлы/pasted-image-20250912214649.html","материалы/файлы/pasted-image-20250912214643.png","материалы/файлы/pasted-image-20250912214643.html","материалы/файлы/pasted-image-20250912214624.png","материалы/файлы/pasted-image-20250912214624.html","материалы/файлы/pasted-image-20250912214611.png","материалы/файлы/pasted-image-20250912214611.html","материалы/подтемы/секция-1.-javascript/базовая-работа-с-элементами-веб-страницы-через-javascript.html","материалы/подтемы/секция-1.-javascript/основные-понятия-веб-страницы.html","материалы/подтемы/секция-1.-javascript/самое-простое-использование-javascript.html","материалы/файлы/pasted-image-20250912212840.png","материалы/файлы/pasted-image-20250912212840.html","материалы/файлы/pasted-image-20250912212810.png","материалы/файлы/pasted-image-20250912212810.html","материалы/файлы/pasted-image-20250912212732.png","материалы/файлы/pasted-image-20250912212732.html","index.html","материалы/файлы/qrcod_72k5.png","материалы/файлы/qrcod_72k5.html","материалы/файлы/pasted-image-20250912205946.png","материалы/файлы/pasted-image-20250912205946.html","материалы/подтемы/секция-1.-javascript/переменные-в-javascript.html","лекции/секция-1.-javascript/тема-№2.-основы-javascript.html","материалы/подтемы/секция-1.-javascript/правила-наименования-переменных-в-javascript.html","материалы/подтемы/секция-1.-javascript/базовое-понимание-синтаксиса-javascript.html","материалы/подтемы/секция-1.-javascript/что-такое-javascript,-история-появления.html","материалы/подтемы/секция-1.-javascript/основные-технологии-для-разработки-мобильных-приложений.html","материалы/подтемы/секция-1.-javascript/основные-типы-мобильных-приложений.html","материалы/подтемы/секция-1.-javascript/основные-платформы-мобильных-приложений.html","лекции/секция-1.-javascript/тема-№1.-как-создаются-мобильные-приложения.html","материалы/файлы/pasted-image-20240923235323.png","материалы/файлы/pasted-image-20240923235323.html","материалы/файлы/pasted-image-20240928222139.png","материалы/файлы/pasted-image-20240928222139.html","материалы/файлы/pasted-image-20240928221620.png","материалы/файлы/pasted-image-20240928221620.html","материалы/файлы/pasted-image-20240928222237.png","материалы/файлы/pasted-image-20240928222237.html","site-lib/scripts/graph-wasm.wasm","site-lib/fonts/94f2f163d4b698242fef.otf","site-lib/fonts/72505e6a122c6acd5471.woff2","site-lib/fonts/2d5198822ab091ce4305.woff2","site-lib/fonts/c8ba52b05a9ef10f4758.woff2","site-lib/fonts/cb10ffd7684cd9836a05.woff2","site-lib/fonts/293fd13dbca5a3e450ef.woff2","site-lib/fonts/085cb93e613ba3d40d2b.woff2","site-lib/fonts/b5f0f109bc88052d4000.woff2","site-lib/fonts/cbe0ae49c52c920fd563.woff2","site-lib/fonts/535a6cf662596b3bd6a6.woff2","site-lib/fonts/70cc7ff27245e82ad414.ttf","site-lib/fonts/454577c22304619db035.ttf","site-lib/fonts/52ac8f3034507f1d9e53.ttf","site-lib/fonts/05b618077343fbbd92b7.ttf","site-lib/fonts/4bb6ac751d1c5478ff3a.woff2","site-lib/media/6155340132a851f6089e.svg","site-lib/media/2308ab1944a6bfa5c5b8.svg","site-lib/html/file-tree-content.html","site-lib/scripts/webpage.js","site-lib/scripts/graph-wasm.js","site-lib/scripts/graph-render-worker.js","site-lib/media/favicon.png","site-lib/styles/obsidian.css","site-lib/styles/global-variable-styles.css","site-lib/styles/main-styles.css"],"webpages":{"index.html":{"title":"index","icon":"","description":"<a rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://t.me/+3RqHSkYzaXUyMTUy\" target=\"_self\">https://t.me/+3RqHSkYzaXUyMTUy</a><br><img alt=\"Pasted image 20250912205946.png\" src=\"материалы/файлы/pasted-image-20250912205946.png\" target=\"_self\"><br><img alt=\"qrcod_72k5.png\" src=\"материалы/файлы/qrcod_72k5.png\" target=\"_self\"><br><a data-href=\"Тема №1. Как создаются мобильные приложения\" href=\"лекции/секция-1.-javascript/тема-№1.-как-создаются-мобильные-приложения.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Тема №1. Как создаются мобильные приложения</a>","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Разработка мобильных приложений","level":1,"id":"Разработка_мобильных_приложений_0"},{"heading":"Ссылка в канал","level":2,"id":"Ссылка_в_канал_0"},{"heading":"Ссылка на этот же сайт","level":2,"id":"Ссылка_на_этот_же_сайт_0"},{"heading":"Лекции начинаются тут","level":2,"id":"Лекции_начинаются_тут_0"}],"links":["лекции/секция-1.-javascript/тема-№1.-как-создаются-мобильные-приложения.html"],"author":"","coverImageURL":".","fullURL":"index.html","pathToRoot":".","attachments":["материалы/файлы/pasted-image-20250912205946.html","материалы/файлы/qrcod_72k5.html"],"createdTime":1756485072721,"modifiedTime":1757700102590,"sourceSize":361,"sourcePath":"index.md","exportPath":"index.html","showInTree":true,"treeOrder":35,"backlinks":[],"type":"markdown"},"задания/секция-1.-javascript/практика-№1.-простая-веб-страница-с-html.html":{"title":"Практика №1. Простая веб-страница с HTML","icon":"","description":"В рамках этого задания вам необходимо добавить логику при нажатиях на кнопку к существующей веб-странице.Задания обязано быть сделано в собственной директории используя изначальный шаблон html файла из ресурсов index.html (может быть модернизирован) и внешний js файл в той же папке (создается самостоятельно).index.html&lt;!DOCTYPE html&gt;\n&lt;html lang=\"ru\"&gt;\n&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;Изучаем JS в рамках html страницы&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt; Эта страница содержит JS код который выполняется на стороне клиента. &lt;br/&gt; &lt;button id=\"button-1\"&gt; Эта кнопка выводит сообщение в консоль &lt;/button&gt; &lt;button id=\"button-2\"&gt; Эта кнопка выводит оповещение в браузере &lt;/button&gt; &lt;br/&gt; &lt;button id=\"button-3\"&gt; Эта кнопка меняет цвет фона на красный &lt;/button&gt; &lt;button id=\"button-4\"&gt; Эта кнопка меняет цвет фона на белый &lt;/button&gt; &lt;br/&gt; &lt;textarea id=\"text-1\"&gt; &lt;/textarea&gt; &lt;br/&gt; &lt;button id=\"button-5\"&gt; Сложить число выше с числом 6 &lt;/button&gt; &lt;div id=\"answer\"&gt; ТУТ БУДЕТ ОТВЕТ &lt;/div&gt; &lt;/body&gt;\n&lt;/html&gt;\nНеобходимо добавить логику для кнопок:\nПервые две кнопки должны выводить информацию в консоль и в качестве оповещения в браузере.\nКнопки 3-4 должны менять цвет фона в соответствии с текстом кнопки\nКнопка 5 должна получить текст из текстового поля text-1, получить число из строки при помощи функции parseFloat, и проверить на NaN при помощи функции isNaN. Если это число - сложить с числом 6 и записать ответ в div с id answer.\nВам необходимо добавить дополнительное поле ввода для 5 кнопки.\nВ итоге пользователь должен вписать два числа в два поля и в итоге получить ответ сложениях этих двух чисел.На выполнение выделяется 1 практическая пара.\nГрадация баллов после дедлайна:\n1 пара: 50%\n2 пара: 0%\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Общее описание","level":2,"id":"Общее_описание_0"},{"heading":"Ресурсы","level":2,"id":"Ресурсы_0"},{"heading":"Техническое задание","level":2,"id":"Техническое_задание_0"},{"heading":"Дополнительная часть","level":2,"id":"Дополнительная_часть_0"},{"heading":"Время на выполнение","level":2,"id":"Время_на_выполнение_0"},{"heading":"Баллы","level":2,"id":"Баллы_0"}],"links":[],"author":"","coverImageURL":"","fullURL":"задания/секция-1.-javascript/практика-№1.-простая-веб-страница-с-html.html","pathToRoot":"../..","attachments":[],"createdTime":1757703305096,"modifiedTime":1758117287788,"sourceSize":3318,"sourcePath":"Задания/Секция 1. JavaScript/Практика №1. Простая веб-страница с HTML.md","exportPath":"задания/секция-1.-javascript/практика-№1.-простая-веб-страница-с-html.html","showInTree":true,"treeOrder":2,"backlinks":["лекции/секция-1.-javascript/тема-№3.-использование-javascript-в-браузере.html"],"type":"markdown"},"лекции/секция-1.-javascript/тема-№1.-как-создаются-мобильные-приложения.html":{"title":"Тема №1. Как создаются мобильные приложения","icon":"","description":"Вводная тема, посвящённая базовым понятиям разработки мобильных приложений. <a data-href=\"Основные платформы мобильных приложений\" href=\"материалы/подтемы/секция-1.-javascript/основные-платформы-мобильных-приложений.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Основные платформы мобильных приложений</a>\n<br><a data-href=\"Основные типы мобильных приложений\" href=\"материалы/подтемы/секция-1.-javascript/основные-типы-мобильных-приложений.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Основные типы мобильных приложений</a>\n<br><a data-href=\"Основные технологии для разработки мобильных приложений\" href=\"материалы/подтемы/секция-1.-javascript/основные-технологии-для-разработки-мобильных-приложений.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Основные технологии для разработки мобильных приложений</a>\n(Пусто)<br><a data-href=\"Тема №2. Основы JavaScript\" href=\"лекции/секция-1.-javascript/тема-№2.-основы-javascript.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Тема №2. Основы JavaScript</a>","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Описание темы","level":2,"id":"Описание_темы_0"},{"heading":"План темы","level":2,"id":"План_темы_0"},{"heading":"Задания связанные с темой","level":2,"id":"Задания_связанные_с_темой_0"},{"heading":"Следующая тема","level":2,"id":"Следующая_тема_0"}],"links":["материалы/подтемы/секция-1.-javascript/основные-платформы-мобильных-приложений.html","материалы/подтемы/секция-1.-javascript/основные-типы-мобильных-приложений.html","материалы/подтемы/секция-1.-javascript/основные-технологии-для-разработки-мобильных-приложений.html","лекции/секция-1.-javascript/тема-№2.-основы-javascript.html"],"author":"","coverImageURL":"","fullURL":"лекции/секция-1.-javascript/тема-№1.-как-создаются-мобильные-приложения.html","pathToRoot":"../..","attachments":[],"createdTime":1757689990276,"modifiedTime":1757691620658,"sourceSize":608,"sourcePath":"Лекции/Секция 1. JavaScript/Тема №1. Как создаются мобильные приложения.md","exportPath":"лекции/секция-1.-javascript/тема-№1.-как-создаются-мобильные-приложения.html","showInTree":true,"treeOrder":5,"backlinks":["index.html"],"type":"markdown"},"лекции/секция-1.-javascript/тема-№2.-основы-javascript.html":{"title":"Тема №2. Основы JavaScript","icon":"","description":"В этой теме вы познакомитесь с основами JavaScript — языком, лежащим в основе интерактивности современных веб- и мобильных приложений. Рассмотрите историю появления языка, его ключевые характеристики и области применения. Вы узнаете, как устроен простейший код на JavaScript, изучите базовые элементы синтаксиса, а также детально разберёте переменные — их объявление и правила именования. Всё это — фундамент для дальнейшего изучения разработки мобильных приложений на JavaScript-основах.\n<a data-href=\"Что такое JavaScript, история появления\" href=\"материалы/подтемы/секция-1.-javascript/что-такое-javascript,-история-появления.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Что такое JavaScript, история появления</a>\n<br><a data-href=\"Базовое понимание синтаксиса JavaScript\" href=\"материалы/подтемы/секция-1.-javascript/базовое-понимание-синтаксиса-javascript.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Базовое понимание синтаксиса JavaScript</a>\n(Пусто)<br><a data-href=\"Тема №3. Использование JavaScript в браузере\" href=\"лекции/секция-1.-javascript/тема-№3.-использование-javascript-в-браузере.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Тема №3. Использование JavaScript в браузере</a>","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Описание темы","level":2,"id":"Описание_темы_0"},{"heading":"План темы","level":2,"id":"План_темы_0"},{"heading":"Задания связанные с темой","level":2,"id":"Задания_связанные_с_темой_0"},{"heading":"Следующая тема","level":2,"id":"Следующая_тема_0"}],"links":["материалы/подтемы/секция-1.-javascript/что-такое-javascript,-история-появления.html","материалы/подтемы/секция-1.-javascript/базовое-понимание-синтаксиса-javascript.html","лекции/секция-1.-javascript/тема-№3.-использование-javascript-в-браузере.html"],"author":"","coverImageURL":"","fullURL":"лекции/секция-1.-javascript/тема-№2.-основы-javascript.html","pathToRoot":"../..","attachments":[],"createdTime":1757690497891,"modifiedTime":1757698126020,"sourceSize":1252,"sourcePath":"Лекции/Секция 1. JavaScript/Тема №2. Основы JavaScript.md","exportPath":"лекции/секция-1.-javascript/тема-№2.-основы-javascript.html","showInTree":true,"treeOrder":6,"backlinks":["лекции/секция-1.-javascript/тема-№1.-как-создаются-мобильные-приложения.html"],"type":"markdown"},"лекции/секция-1.-javascript/тема-№3.-использование-javascript-в-браузере.html":{"title":"Тема №3. Использование JavaScript в браузере","icon":"","description":"В этой теме вы познакомитесь с практическим применением JavaScript в контексте веб-страниц: научитесь использовать консоль разработчика для тестирования кода, поймёте структуру HTML и роль DOM, освоите базовые способы взаимодействия с элементами страницы через JavaScript — получение, изменение содержимого и стилей. Вы создадите первую HTML-страницу с подключённым JavaScript, изучите корректные способы интеграции скриптов и назначения обработчиков событий, избегая устаревших практик.\n<a data-href=\"Самое простое использование JavaScript\" href=\"материалы/подтемы/секция-1.-javascript/самое-простое-использование-javascript.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Самое простое использование JavaScript</a>\n<br><a data-href=\"Основные понятия веб страницы\" href=\"материалы/подтемы/секция-1.-javascript/основные-понятия-веб-страницы.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Основные понятия веб страницы</a>\n<br><a data-href=\"Базовая работа с элементами веб страницы через JavaScript\" href=\"материалы/подтемы/секция-1.-javascript/базовая-работа-с-элементами-веб-страницы-через-javascript.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Базовая работа с элементами веб страницы через JavaScript</a>\n<br><a data-href=\"Создание своей HTML страницы\" href=\"материалы/подтемы/секция-1.-javascript/создание-своей-html-страницы.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Создание своей HTML страницы</a> <br><a data-href=\"Практика №1. Простая веб-страница с HTML\" href=\"задания/секция-1.-javascript/практика-№1.-простая-веб-страница-с-html.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Практика №1. Простая веб-страница с HTML</a>\n<br><a data-href=\"Тема №4. Node.JS, примитивные типы данных JavaScript\" href=\".html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Тема №4. Node.JS, примитивные типы данных JavaScript</a>","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Описание темы","level":2,"id":"Описание_темы_0"},{"heading":"План темы","level":2,"id":"План_темы_0"},{"heading":"Задания связанные с темой","level":2,"id":"Задания_связанные_с_темой_0"},{"heading":"Следующая тема","level":2,"id":"Следующая_тема_0"}],"links":["материалы/подтемы/секция-1.-javascript/самое-простое-использование-javascript.html","материалы/подтемы/секция-1.-javascript/основные-понятия-веб-страницы.html","материалы/подтемы/секция-1.-javascript/базовая-работа-с-элементами-веб-страницы-через-javascript.html","материалы/подтемы/секция-1.-javascript/создание-своей-html-страницы.html","задания/секция-1.-javascript/практика-№1.-простая-веб-страница-с-html.html",".html"],"author":"","coverImageURL":"","fullURL":"лекции/секция-1.-javascript/тема-№3.-использование-javascript-в-браузере.html","pathToRoot":"../..","attachments":[],"createdTime":1757695287075,"modifiedTime":1757703296437,"sourceSize":1462,"sourcePath":"Лекции/Секция 1. JavaScript/Тема №3. Использование JavaScript в браузере.md","exportPath":"лекции/секция-1.-javascript/тема-№3.-использование-javascript-в-браузере.html","showInTree":true,"treeOrder":7,"backlinks":["лекции/секция-1.-javascript/тема-№2.-основы-javascript.html"],"type":"markdown"},"материалы/как-сделать/как-создавать-файлы-с-определённым-расширением.html":{"title":"Как создавать файлы с определённым расширением","icon":"","description":"Самый простой способ - создать файл через \"проводник\".\n<img alt=\"Pasted image 20250912214611.png\" src=\"материалы/файлы/pasted-image-20250912214611.png\" target=\"_self\">\nНо для этого нужно сначала включить опцию чтобы мы могли видеть расширение файлов (по умолчанию оно скрыто, особенно на компьютерах колледжа).<br>\n<img alt=\"Pasted image 20250912214624.png\" src=\"материалы/файлы/pasted-image-20250912214624.png\" target=\"_self\">\nНу а дальше уже все просто, например нам нужно создать js файл&nbsp;example.js<br>\n<img alt=\"Pasted image 20250912214643.png\" src=\"материалы/файлы/pasted-image-20250912214643.png\" target=\"_self\"><br>\n<img alt=\"Pasted image 20250912214649.png\" src=\"материалы/файлы/pasted-image-20250912214649.png\" target=\"_self\"><img alt=\"Pasted image 20250912214653.png\" src=\"материалы/файлы/pasted-image-20250912214653.png\" target=\"_self\">","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"","coverImageURL":".","fullURL":"материалы/как-сделать/как-создавать-файлы-с-определённым-расширением.html","pathToRoot":"../..","attachments":["материалы/файлы/pasted-image-20250912214611.html","материалы/файлы/pasted-image-20250912214624.html","материалы/файлы/pasted-image-20250912214643.html","материалы/файлы/pasted-image-20250912214649.html","материалы/файлы/pasted-image-20250912214653.html"],"createdTime":1757702748102,"modifiedTime":1757702815939,"sourceSize":667,"sourcePath":"Материалы/Как сделать/Как создавать файлы с определённым расширением.md","exportPath":"материалы/как-сделать/как-создавать-файлы-с-определённым-расширением.html","showInTree":true,"treeOrder":10,"backlinks":["материалы/подтемы/секция-1.-javascript/создание-своей-html-страницы.html"],"type":"markdown"},"материалы/подтемы/секция-1.-javascript/базовая-работа-с-элементами-веб-страницы-через-javascript.html":{"title":"Базовая работа с элементами веб страницы через JavaScript","icon":"","description":"В JavaScript для взаимодействия с HTML-элементами используются методы работы с DOM (Document Object Model). Основные способы получения элементов: document.getElementById(id) — возвращает элемент по уникальному атрибуту id.\nПример: const button = document.getElementById('submit-btn'); document.querySelector(selector) — возвращает первый элемент, соответствующий CSS-селектору.\nПример: const title = document.querySelector('h1'); или const item = document.querySelector('.item.active'); document.querySelectorAll(selector) — возвращает NodeList (массивоподобный объект) всех элементов, соответствующих селектору.\nПример: const buttons = document.querySelectorAll('button'); document.getElementsByTagName(name) — возвращает HTMLCollection элементов по тегу.\nПример: const paragraphs = document.getElementsByTagName('p'); document.getElementsByClassName(name) — возвращает HTMLCollection элементов по классу.\nПример: const items = document.getElementsByClassName('list-item'); ⚠️ Методы, возвращающие коллекции (HTMLCollection, NodeList), не являются настоящими массивами и не имеют методов массивов (например, .map(), .filter()). Для их использования можно преобразовать в массив через [...collection] или Array.from(collection).\nПосле получения элемента можно изменять его атрибуты и содержимое: element.textContent — устанавливает или возвращает текстовое содержимое элемента (без HTML-разметки).\nПример: paragraph.textContent = 'Новый текст'; element.innerHTML — устанавливает или возвращает HTML-содержимое элемента (включая разметку).\nПример: div.innerHTML = '&lt;strong&gt;Жирный текст&lt;/strong&gt;'; element.setAttribute(name, value) — задаёт значение атрибута.\nПример: button.setAttribute('disabled', 'true'); element.getAttribute(name) — получает значение атрибута.\nПример: const type = input.getAttribute('type'); element.removeAttribute(name) — удаляет атрибут.\nПример: button.removeAttribute('disabled'); 💡 Используйте textContent для изменения текста — он безопаснее innerHTML, так как не выполняет HTML-код и защищает от XSS-атак.\nСтили элемента можно менять напрямую через свойство style — оно представляет собой объект, содержащий все CSS-свойства в формате camelCase:\nelement.style.propertyName = 'value';\nПримеры:\nelement.style.color = 'red';\nelement.style.fontSize = '20px';\nelement.style.backgroundColor = '#f0f0f0';\nelement.style.marginTop = '10px'; 🔍 Важно: CSS-свойства с дефисом (например, background-color) в JavaScript записываются в camelCase (backgroundColor).\nОграничения:\nСтили, заданные через style, имеют приоритет над внешними CSS-правилами.\nНельзя установить несколько стилей одновременно — только по одному свойству.\nДля сложных стилевых изменений рекомендуется использовать классы (classList):\nelement.classList.add('highlight');\nelement.classList.remove('hidden');\nelement.classList.toggle('active'); ✅ Использование classList предпочтительнее прямого изменения style — это позволяет отделять логику от стилей и поддерживать чистоту кода.\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Получение элементов","level":3,"id":"Получение_элементов_0"},{"heading":"Изменение свойств элемента","level":3,"id":"Изменение_свойств_элемента_0"},{"heading":"Изменение CSS стилей элемента","level":3,"id":"Изменение_CSS_стилей_элемента_0"}],"links":[],"author":"","coverImageURL":"","fullURL":"материалы/подтемы/секция-1.-javascript/базовая-работа-с-элементами-веб-страницы-через-javascript.html","pathToRoot":"../../..","attachments":[],"createdTime":1757702424568,"modifiedTime":1757702445919,"sourceSize":4668,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Базовая работа с элементами веб страницы через JavaScript.md","exportPath":"материалы/подтемы/секция-1.-javascript/базовая-работа-с-элементами-веб-страницы-через-javascript.html","showInTree":true,"treeOrder":13,"backlinks":["лекции/секция-1.-javascript/тема-№3.-использование-javascript-в-браузере.html"],"type":"markdown"},"материалы/подтемы/секция-1.-javascript/базовое-понимание-синтаксиса-javascript.html":{"title":"Базовое понимание синтаксиса JavaScript","icon":"","description":"В рамках данной темы рассматриваются только базовые элементы синтаксиса JavaScript, необходимые для начала практической работы. Полный объём синтаксических конструкций — от операторов и структур управления до модулей, классов, асинхронности и деструктуризации — будет изучаться последовательно в последующих разделах курса. Настоящая часть служит фундаментом для понимания структуры кода, а не исчерпывающим руководством по языку.Комментарии не влияют на выполнение кода и предназначены исключительно для повышения читаемости и документирования.JavaScript поддерживает два типа комментариев: Однострочные — начинаются с //. Все, что следует после // до конца строки, игнорируется движком. // Это однострочный комментарий\nlet x = 5; // Можно писать и в конце строки Многострочные — заключаются между /* и */. Позволяют комментировать несколько строк или блоки кода. /*\nЭто многострочный комментарий\nИспользуется для описания функций, модулей или временного отключения кода\n*/\nlet y = 10;\nJavaScript — язык, чувствительный к регистру. Это означает, что имена переменных, функций, ключевых слов и свойств различаются по написанию букв в верхнем и нижнем регистре.\nПримеры: let name = \"Анна\";\nlet Name = \"Иван\"; // Это другая переменная\nlet NAME = \"Олег\"; // И ещё одна console.log(name); // \"Анна\"\nconsole.log(Name); // \"Иван\"\nconsole.log(NAME); // \"Олег\"\nТо же относится к ключевым словам: let — корректно, Let — ошибка (если не является именем переменной).\nТакже чувствительны к регистру названия свойств объектов: user.name ≠ user.Name.В JavaScript точки с запятой (;) используются для явного завершения инструкций. Хотя язык позволяет опускать их в большинстве случаев благодаря автоматической вставке точек с запятой (ASI — Automatic Semicolon Insertion), рекомендуется всегда использовать точки с запятой для предотвращения неочевидных ошибок. ","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Комментарии JS","level":2,"id":"Комментарии_JS_0"},{"heading":"Чувствительность к регистру","level":2,"id":"Чувствительность_к_регистру_0"},{"heading":"Точки с запятой <code>;</code>","level":2,"id":"Точки_с_запятой_`;`_0"},{"heading":"<a data-href=\"Переменные в JavaScript\" href=\"Переменные в JavaScript\" class=\"internal-link\" target=\"_blank\" rel=\"noopener nofollow\">Переменные в JavaScript</a>","level":2,"id":"[[Переменные_в_JavaScript]]_0"}],"links":["материалы/подтемы/секция-1.-javascript/переменные-в-javascript.html"],"author":"","coverImageURL":"","fullURL":"материалы/подтемы/секция-1.-javascript/базовое-понимание-синтаксиса-javascript.html","pathToRoot":"../../..","attachments":[],"createdTime":1757696307916,"modifiedTime":1757696808206,"sourceSize":3470,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Базовое понимание синтаксиса JavaScript.md","exportPath":"материалы/подтемы/секция-1.-javascript/базовое-понимание-синтаксиса-javascript.html","showInTree":true,"treeOrder":14,"backlinks":["лекции/секция-1.-javascript/тема-№2.-основы-javascript.html"],"type":"markdown"},"материалы/подтемы/секция-1.-javascript/основные-платформы-мобильных-приложений.html":{"title":"Основные платформы мобильных приложений","icon":"","description":"Платформа мобильных приложений — это совокупность программного обеспечения, инструментов, стандартов и правил, которые определяют, как создаются, устанавливаются и работают мобильные приложения на конкретном устройстве. Это не просто операционная система (ОС), а целая экосистема: от ядра ОС и API-интерфейсов до магазинов приложений, систем подписок, политик безопасности и требований к разработчикам. Выбор платформы напрямую влияет на: доступные функции устройства (камера, GPS, биометрия); способы взаимодействия с пользователем; методы тестирования и отладки; стратегию монетизации и распространения; сроки и стоимость разработки. На сегодняшний день подавляющее большинство мобильных приложений создаётся для двух основных платформ — iOS и Android. Их доминирование обусловлено масштабами рынка, зрелостью инструментов и поддержкой со стороны крупнейших технологических компаний.iOS — экосистема Apple, работающая на устройствах iPhone, iPad и iPod touch. Закрытая, строго контролируемая платформа с единым стандартом качества, высокой безопасностью и стабильной производительностью. Основная аудитория — пользователи в развитых странах, с высоким уровнем дохода и лояльностью к бренду.Android — открытая операционная система от Google, используемая сотнями производителей (Samsung, Xiaomi, OnePlus, Motorola и др.). Обладает огромной фрагментацией устройств и версий, но обеспечивает максимальную доступность и гибкость для разработчиков и пользователей. Доминирует в развивающихся рынках и по объёму установленных устройств — более 70% глобального рынка смартфонов.Но, помимо iOS и Android, на протяжении истории мобильных технологий существовали и другие платформы, которые либо имели значительную долю рынка, либо обладали высоким потенциалом, но в итоге уступили место доминирующим системам.Windows Phone (Microsoft) — запущенная в 2010 году платформа, основанная на ядре Windows NT, предлагала уникальный пользовательский интерфейс с динамическими «живыми» плитками. Несмотря на техническую изящность и глубокую интеграцию с экосистемой Microsoft (Outlook, Office, OneDrive), она не смогла привлечь достаточное количество разработчиков. Отсутствие приложений, особенно популярных сервисов вроде Instagram или WhatsApp на ранних этапах, стало фатальным. Microsoft официально прекратила поддержку Windows Phone в 2017 году.BlackBerry OS / BlackBerry 10 — до середины 2000-х годов BlackBerry была синонимом корпоративной мобильности благодаря надёжной безопасности, физической клавиатуре и собственной сети Push Mail. Однако компания не сумела адекватно ответить на рост сенсорных экранов и экосистемы приложений. Попытка перезапуска с BlackBerry 10 в 2013 году, основанной на QNX, оказалась слишком поздней — к тому времени пользователи уже массово перешли на iOS и Android. В 2016 году BlackBerry перестала производить собственные устройства.Symbian — когда-то самая популярная мобильная ОС, особенно в Европе и Азии, Symbian использовалась Nokia, Samsung, Siemens и другими. Она доминировала на рынке до 2007 года, но её архитектура, унаследованная от эпохи кнопочных телефонов, не позволила эффективно адаптироваться к новым требованиям тачскринов и мультимедиа. После выхода iPhone и Android, Nokia в 2011 году перешла на Windows Phone, а Symbian была официально закрыта в 2014 году.WebOS (Palm, затем HP) — оригинальная и продвинутая система с многооконным интерфейсом, предшественник современных концепций многозадачности. Palm выпустила первые устройства на WebOS в 2009 году, а HP попыталась развивать платформу дальше, даже выпустив планшет TouchPad. Но недостаток приложений, маркетинговой поддержки и внутренние конфликты в HP привели к отказу от WebOS в 2011 году. Позже HP передала код проекта LG, который использовал его для своих смарт-телевизоров — но как мобильная ОС WebOS так и не возродилась.HarmonyOS (Huawei) — современный пример платформы, появившейся как ответ на геополитические ограничения. Разработанная Huawei в 2019 году после запрета Google на использование GMS (Google Mobile Services), HarmonyOS изначально позиционировалась как универсальная ОС для IoT-устройств, а позже — как замена Android на смартфонах. Хотя она технически совместима с Android-приложениями через App Pack, её глобальное распространение ограничено из-за отсутствия доступа к ключевым сервисам Google и западным приложениям. На сегодня — это важный региональный игрок (особенно в Китае), но не глобальная альтернатива iOS/Android.iOS и Android — две доминирующие мобильные платформы, отличающиеся не только архитектурой, но и философией разработки, подходом к безопасности, экосистеме и взаимодействию с пользователем. Их сравнение позволяет понять фундаментальные различия, которые влияют на процесс создания мобильных приложений.Языки программирования и инструменты разработки\niOS-приложения разрабатываются преимущественно на языке Swift (с 2014 года), а также на Objective-C — унаследованном от эпохи NeXTSTEP. Интегрированная среда разработки — Xcode, доступная исключительно на macOS. Это накладывает ограничения: разработка под iOS невозможна без устройства Apple или виртуальной машины с macOS.\nAndroid-приложения пишутся на Kotlin (рекомендуемый язык с 2019 года) или Java (традиционный, но постепенно вытесняемый). Среда разработки — Android Studio, основанная на IntelliJ IDEA, работает на Windows, macOS и Linux, что обеспечивает большую доступность для разработчиков.Архитектура и управление ресурсами\niOS использует закрытую, унифицированную архитектуру: ограниченное количество моделей устройств с жёстко контролируемыми характеристиками (память, процессор, экран). Это позволяет оптимизировать приложения под конкретные аппаратные конфигурации, обеспечивая высокую производительность и стабильность.\nAndroid, напротив, работает на тысячах устройств с разными процессорами, объёмами ОЗУ, плотностями пикселей и версиями ОС. Разработчику приходится учитывать фрагментацию — от старых смартфонов с Android 8 до новых с Android 14 — и применять адаптивные интерфейсы, проверять совместимость и использовать библиотеки поддержки (Android Support Library / AndroidX).Магазины приложений и политики распространения\nПриложения для iOS распространяются исключительно через App Store — строго централизованный и контролируемый канал. Apple проводит ручную модерацию каждого приложения, требует соблюдения строгих гайдлайнов по дизайну, приватности и функциональности. Это повышает уровень безопасности для пользователей, но замедляет выпуск обновлений и ограничивает возможности монетизации (например, запрещены сторонние магазины и системы внутренних покупок вне App Store).\nAndroid-приложения могут распространяться через Google Play, но также допускается установка из сторонних источников (APK-файлы). Google Play имеет автоматизированную модерацию, менее строгие требования, но более высокий риск распространения вредоносного ПО. Это делает Android более открытой, но требует от разработчика дополнительных мер по защите приложения и информированию пользователей о безопасности.Доля рынка и целевая аудитория\nПо количеству установленных устройств Android доминирует — около 70–75% глобального рынка смартфонов, особенно в Азии, Африке и Латинской Америке. При этом iOS занимает около 25–30%, но сосредоточена в странах с высоким уровнем дохода — США, Западная Европа, Япония, Австралия.\nЭто создаёт принципиально разные экономические модели: приложения для iOS чаще генерируют больше дохода на одного пользователя (высокий ARPU — Average Revenue Per User), тогда как Android обеспечивает больший охват аудитории, но с меньшей monetization. Для бизнес-приложений это означает выбор между качеством и количеством.Обновления и жизненный цикл устройств\nApple контролирует полный цикл — от железа до ПО — и обеспечивает массовые обновления ОС для устройств, выпущенных до 5–6 лет назад. Более 90% активных устройств iOS работают на последних двух версиях ОС.\nAndroid-устройства получают обновления неравномерно: производители (Samsung, Xiaomi и др.) сами решают, какие модели поддерживают, а многие бюджетные устройства остаются на устаревших версиях (Android 8–10) годами. Это вынуждает разработчиков поддерживать совместимость с множеством версий API, увеличивая сложность тестирования и развертывания.Безопасность и приватность\niOS позиционируется как более безопасная платформа благодаря изолированной среде выполнения приложений (sandboxing), строгому контролю доступа к данным (персональные файлы, камера, микрофон), шифрованию данных на уровне ОС и обязательному использованию App Transport Security.\nAndroid предоставляет аналогичные механизмы, но их реализация зависит от производителя. Многие OEM-производители добавляют собственные сервисы, фоновые процессы и права, которые могут компрометировать приватность. Кроме того, открытость Android делает его более уязвимым к вредоносным APK-файлам, загружаемым вне Google Play.Интеграция с экосистемой\niOS тесно интегрирован с другими продуктами Apple: iCloud, AirDrop, Handoff, Continuity, Apple Watch, HomeKit. Это позволяет создавать кросс-устройственные приложения с единым пользовательским опытом.\nAndroid интегрируется с сервисами Google: Gmail, Google Maps, Drive, Firebase, Google Assistant, Wear OS. Эти сервисы предоставляют мощные инструменты для разработчиков — особенно для аналитики (Firebase), push-уведомлений, облачного хранения и машинного обучения. Однако интеграция с другими устройствами (TV, часы, авто) менее унифицирована, чем в Apple.","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Что означает платформа мобильных приложений","level":2,"id":"Что_означает_платформа_мобильных_приложений_0"},{"heading":"Существующие платформы","level":2,"id":"Существующие_платформы_0"},{"heading":"Сравнительная характеристика iOS и Android","level":2,"id":"Сравнительная_характеристика_iOS_и_Android_0"}],"links":[],"author":"","coverImageURL":"","fullURL":"материалы/подтемы/секция-1.-javascript/основные-платформы-мобильных-приложений.html","pathToRoot":"../../..","attachments":[],"createdTime":1757691090963,"modifiedTime":1757692705650,"sourceSize":16719,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Основные платформы мобильных приложений.md","exportPath":"материалы/подтемы/секция-1.-javascript/основные-платформы-мобильных-приложений.html","showInTree":true,"treeOrder":15,"backlinks":["лекции/секция-1.-javascript/тема-№1.-как-создаются-мобильные-приложения.html"],"type":"markdown"},"материалы/подтемы/секция-1.-javascript/основные-понятия-веб-страницы.html":{"title":"Основные понятия веб страницы","icon":"","description":"Основные понятия веб-страницыВеб-страница — это документ, отображаемый в браузере, который состоит из трёх взаимосвязанных технологий: HTML, CSS и JavaScript. Каждая из них выполняет свою уникальную роль, и только их совместное использование позволяет создавать полноценные, интерактивные и визуально привлекательные приложения.HTML (HyperText Markup Language) — это язык гипертекстовой разметки, созданный для описания структуры веб-документов. Он не выполняет вычислений, не обрабатывает логику и не управляет поведением — его задача: обозначить смысл содержимого. Каждый элемент HTML — это маркер, который говорит браузеру: «Это заголовок», «Это абзац», «Это ссылка», «Это изображение».HTML работает на основе тегов — специальных ключевых слов, заключённых в угловые скобки: &lt;tag&gt;. Теги могут быть:\nПарными — имеют открывающий и закрывающий тег: &lt;p&gt;Это параграф&lt;/p&gt; Самозакрывающимися — не содержат содержимого и закрываются сразу: &lt;img src=\"image.jpg\" alt=\"Описание изображения\" /&gt;\n&lt;br /&gt; Каждый тег может иметь атрибуты — дополнительные параметры, уточняющие поведение или свойства элемента. Например:&lt;a href=\"https://example.com\" target=\"_blank\"&gt;Перейти&lt;/a&gt;\nЗдесь href указывает адрес ссылки, а target=\"_blank\" — открывать её в новой вкладке.HTML5 — современная версия стандарта — ввела семантические теги, которые не только описывают внешний вид, но и передают значение контента:\n&lt;header&gt; — шапка страницы или раздела\n&lt;nav&gt; — навигационное меню\n&lt;main&gt; — основное содержимое страницы\n&lt;section&gt; — логический блок тематически связанного контента\n&lt;article&gt; — самостоятельная сущность (например, статья, пост)\n&lt;footer&gt; — подвал\nИспользование семантики улучшает:\nДоступность — для пользователей с ограниченными возможностями (экранная речь корректно интерпретирует структуру),\nSEO — поисковые системы лучше понимают и ранжируют содержимое,\nПоддержку кода — разработчики быстрее ориентируются в структуре.\nCSS (Cascading Style Sheets) — это язык, предназначенный для оформления HTML-документов. Он отвечает за то, как выглядит страница: цвета, размеры, расположение элементов, анимации, адаптивность под разные устройства.CSS работает через селекторы — правила, определяющие, к каким элементам применяются стили. Пример:h1 { color: #2c3e50; font-size: 2rem; text-align: center;\n}\nЗдесь h1 — селектор, { ... } — набор свойств и их значений.CSS обладает ключевыми особенностями:\nКаскадность (Cascading) — стили могут переопределяться. Если два правила влияют на один элемент, приоритет определяется по специфичности селектора, порядку объявления и использованию !important.\nНаследование — некоторые свойства (например, font-family, color) автоматически передаются дочерним элементам.\nМедиа-запросы — позволяют применять стили в зависимости от характеристик устройства: ширины экрана, ориентации, разрешения. Это основа адаптивного дизайна:\n@media (max-width: 768px) { body { font-size: 14px; }\n} CSS можно подключать тремя способами:\nВнутренний стиль — внутри &lt;style&gt; в &lt;head&gt; (не рекомендуется для больших проектов).\nВнешний файл — через &lt;link rel=\"stylesheet\" href=\"styles.css\"&gt; — лучшая практика.\nВстроенный стиль — атрибут style внутри тега (&lt;p style=\"color:red;\"&gt;) — используется крайне редко, только для экстренных случаев.\nВажно: HTML отвечает за что — CSS — за как выглядит. Их разделение — фундаментальный принцип веб-разработки. Это позволяет:\nМенять дизайн без трогания структуры,\nОдинаковый HTML отображать по-разному на разных устройствах,\nУскорять загрузку за счёт кэширования CSS-файлов,\nОблегчать командную разработку (дизайнеры работают с CSS, разработчики — с HTML и JS). В рамках дисциплины мы не будем изучать свойства CSS, поэтому они остаются на самообучение\nКаждый валидный HTML-документ должен начинаться с DOCTYPE, чтобы браузер знал, какой стандарт использовать. Без него он может перейти в режим \"quirks mode\", где поведение становится непредсказуемым.&lt;!DOCTYPE html&gt;\n— единственное объявление, необходимое для HTML5. Не требует закрывающего тега.Корневой элемент. Атрибут lang обязателен для доступности и SEO:&lt;html lang=\"ru\"&gt;\nУказывает язык содержимого — помогает экранной речи, переводчикам и поисковикам.Не отображается на странице, но содержит метаданные, необходимые для работы браузера и поисковых систем:\n&lt;meta charset=\"UTF-8\"&gt; — задаёт кодировку символов. UTF-8 поддерживает все языки мира — обязательный элемент.\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; — критически важен для мобильных устройств. Без него страница будет масштабироваться как на десктопе, что делает её нечитаемой на телефоне.\n&lt;title&gt; — название вкладки браузера и заголовок в результатах поиска. Должен быть уникальным и описательным.\n&lt;link&gt; — подключение внешних ресурсов: CSS, favicon, шрифтов.\n&lt;script&gt; — подключение JavaScript (может находиться и в &lt;head&gt;, и в &lt;body&gt;, но это отдельная тема).\nПример полного &lt;head&gt;:&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;Моя первая страница&lt;/title&gt; &lt;link rel=\"stylesheet\" href=\"styles.css\"&gt; &lt;link rel=\"icon\" href=\"favicon.ico\" type=\"image/x-icon\"&gt;\n&lt;/head&gt;\nСодержит всё, что видит пользователь. Внутри могут быть любые элементы, включая:\nЗаголовки: &lt;h1&gt; до &lt;h6&gt; — иерархия важности. &lt;h1&gt; — главный заголовок страницы, только один.\nПараграфы: &lt;p&gt; — для текстовых блоков.\nСписки: &lt;ul&gt; — неупорядоченный (с точками),\n&lt;ol&gt; — упорядоченный (с номерами),\n&lt;li&gt; — элемент списка. Изображения: &lt;img src=\"...\" alt=\"...\"&gt; — alt обязателен для доступности и SEO.\nСсылки: &lt;a href=\"...\"&gt;текст&lt;/a&gt; — href — адрес перехода.\nКнопки: &lt;button&gt;...&lt;/button&gt; — для взаимодействия.\nФормы: &lt;form&gt;, &lt;input&gt;, &lt;label&gt; — для сбора данных.\nПример минимальной, но корректной структуры &lt;body&gt;:&lt;body&gt; &lt;header&gt; &lt;h1&gt;Добро пожаловать!&lt;/h1&gt; &lt;/header&gt; &lt;main&gt; &lt;p&gt;Это основной текст страницы.&lt;/p&gt; &lt;button id=\"myButton\"&gt;Нажми меня&lt;/button&gt; &lt;/main&gt; &lt;footer&gt; &lt;p&gt;&amp;copy; 2025 Моя компания&lt;/p&gt; &lt;/footer&gt;\n&lt;/body&gt;\nHTML — дерево. Элементы должны быть правильно вложены:\n✅ Правильно:&lt;p&gt;&lt;strong&gt;Жирный текст&lt;/strong&gt; внутри параграфа&lt;/p&gt;\n❌ Неправильно:&lt;p&gt;&lt;strong&gt;Жирный текст&lt;/p&gt;&lt;/strong&gt; &lt;!-- Нарушена вложенность --&gt;\nБраузеры пытаются исправить ошибки, но это приводит к непредсказуемому поведению, особенно в сложных случаях.\nИспользуйте семантические теги вместо &lt;div&gt; там, где это возможно.\nНе используйте &lt;h1&gt;–&lt;h6&gt; исключительно для изменения размера шрифта — используйте CSS.\nВсе изображения должны иметь alt — даже если пустой (alt=\"\"), если они декоративные.\nДля кнопок и ссылок используйте правильные теги: &lt;button&gt; — для действий, &lt;a&gt; — для переходов.\nПоддерживайте чистую и читаемую структуру: отступы, переносы, комментарии (если нужно).\nВсегда проверяйте валидность кода через <a data-tooltip-position=\"top\" aria-label=\"https://validator.w3.org/\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://validator.w3.org/\" target=\"_self\">validator.w3.org</a>.\nDOM (Document Object Model — Модель объектов документа) — это программное представление веб-документа (обычно HTML или XML), созданное браузером в виде иерархического дерева объектов, где каждый элемент документа — это объект, доступный для манипуляций через JavaScript.DOM не является частью самого HTML-файла. Он динамически генерируется браузером при загрузке страницы: парсер читает HTML-код и превращает его в структуру из узлов (nodes), которые можно изменять, добавлять, удалять или запрашивать с помощью JavaScript.Каждый элемент HTML становится узлом (node) в DOM-дереве:\nЭлементные узлы — теги (&lt;div&gt;, &lt;p&gt;, &lt;button&gt; и т.д.)\nТекстовые узлы — текст внутри тегов\nАтрибутные узлы — атрибуты элементов (id, class, href)\nКорневой узел — &lt;html&gt;\nДочерние и родительские узлы — элементы связаны отношениями «родитель–ребёнок»\nПример HTML:&lt;div id=\"container\"&gt; &lt;h1&gt;Привет, мир!&lt;/h1&gt; &lt;p&gt;Это параграф.&lt;/p&gt;\n&lt;/div&gt;\nСоответствующее DOM-дерево:html\n└── body └── div#container ├── h1 │ └── #text: \"Привет, мир!\" └── p └── #text: \"Это параграф.\"\nКаждый узел имеет свойства и методы, позволяющие взаимодействовать с ним. Например:\nelement.tagName — имя тега,\nelement.textContent — содержимое текста,\nelement.id, element.className — значения атрибутов,\nelement.appendChild(), element.removeChild() — управление дочерними узлами.\nJavaScript не может напрямую работать с HTML-кодом файла. Он работает только с DOM-представлением, которое браузер создал в памяти. Это позволяет:\nДинамически изменять содержимое страницы без перезагрузки (например, обновлять список задач, менять текст кнопки),\nРеагировать на действия пользователя — клики, ввод текста, скроллинг,\nИзменять стили элементов — через element.style,\nДобавлять и удалять элементы — например, создавать новые карточки товаров по запросу,\nПолучать информацию о состоянии страницы — размер окна, положение элементов, состояние форм.\nБез DOM JavaScript был бы бесполезен на веб-странице — он просто не имел бы «точки входа» в контент.","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Что такое HTML, CSS","level":2,"id":"Что_такое_HTML,_CSS_0"},{"heading":"Структура HTML","level":2,"id":"Структура_HTML_0"},{"heading":"<code>&lt;html&gt;</code>","level":3,"id":"`<html>`_0"},{"heading":"<code>&lt;head&gt;</code>","level":3,"id":"`<head>`_0"},{"heading":"<code>&lt;body&gt;</code>","level":3,"id":"`<body>`_0"},{"heading":"Вложенность и иерархия","level":3,"id":"Вложенность_и_иерархия_0"},{"heading":"Рекомендации по структуре","level":3,"id":"Рекомендации_по_структуре_0"},{"heading":"Что такое DOM","level":2,"id":"Что_такое_DOM_0"},{"heading":"Структура DOM как дерева","level":3,"id":"Структура_DOM_как_дерева_0"},{"heading":"Зачем нужен DOM?","level":3,"id":"Зачем_нужен_DOM?_0"}],"links":[],"author":"","coverImageURL":"","fullURL":"материалы/подтемы/секция-1.-javascript/основные-понятия-веб-страницы.html","pathToRoot":"../../..","attachments":[],"createdTime":1757701920807,"modifiedTime":1757702322322,"sourceSize":15642,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Основные понятия веб страницы.md","exportPath":"материалы/подтемы/секция-1.-javascript/основные-понятия-веб-страницы.html","showInTree":true,"treeOrder":16,"backlinks":["лекции/секция-1.-javascript/тема-№3.-использование-javascript-в-браузере.html"],"type":"markdown"},"материалы/подтемы/секция-1.-javascript/основные-технологии-для-разработки-мобильных-приложений.html":{"title":"Основные технологии для разработки мобильных приложений","icon":"","description":"Нативная разработка предполагает использование официальных языков программирования, сред разработки и фреймворков, предоставляемых производителями платформ — Apple и Google. Приложения компилируются напрямую в машинный код, обеспечивающий максимальную производительность и полный доступ к API устройства.Для разработки приложений под iOS используется Swift — язык, созданный Apple в 2014 году как современная замена Objective-C. Swift отличается чистым синтаксисом, безопасностью типов, поддержкой функционального программирования и высокой скоростью выполнения. Он активно развивается и является стандартом для новых проектов.Вместо него до сих пор встречается Objective-C — унаследованный от NeXTSTEP язык, который использовался в iOS до появления Swift. Он остаётся актуальным при поддержке старых проектов, но новые разработчики начинают с Swift.Инструмент разработки — Xcode, единственный официально поддерживаемый IDE от Apple. Он включает в себя редактор кода, симулятор устройств, инструменты отладки, профилирования производительности и систему управления версиями (Git). Xcode работает только на macOS, что делает разработку под iOS невозможной на Windows или Linux без виртуализации.Фреймворки интерфейса:\nUIKit — традиционный фреймворк для создания пользовательских интерфейсов. Работает на основе иерархии представлений (UIView), требует детального описания макетов через код или Interface Builder. Подходит для сложных, детально настраиваемых интерфейсов.\nSwiftUI — декларативный фреймворк, представленный в 2019 году. Позволяет описывать интерфейс как функцию состояния приложения — «что должно отображаться при данном состоянии», а не «как его построить». Упрощает разработку, обеспечивает автоматическую адаптацию под все размеры экранов и темы (светлая/тёмная), и полностью интегрирован с Swift. Считается будущим iOS-разработки.\nОбе технологии работают с экосистемой Apple: Core Animation, Core Location, ARKit, HealthKit, Face ID, Push Notifications — всё доступно через единые API, документированные и стабильно поддерживающиеся Apple.Основным языком для Android сегодня является Kotlin — язык, разработанный JetBrains и официально объявленный Google предпочтительным для Android-разработки с 2019 года. Kotlin сочетает в себе функциональные и объектно-ориентированные парадигмы, обладает более безопасной системой типов (отсутствие null-pointer исключений по умолчанию), сжатым синтаксисом и полной совместимостью с Java.Java остаётся актуальной благодаря огромной базе legacy-приложений и корпоративных систем. Многие библиотеки, туториалы и инструкции всё ещё написаны на Java, но новые проекты рекомендуют начинать с Kotlin.Среда разработки — Android Studio, основанная на IntelliJ IDEA. Она предоставляет полноценный набор инструментов: эмулятор устройств, профайлер памяти и сети, анализатор производительности, инструменты для тестирования и поддержку Firebase. Работает на Windows, macOS и Linux — обеспечивает большую доступность, чем Xcode.Фреймворки интерфейса:\nXML-разметка + View-система — классический подход. Интерфейс описывается в XML-файлах, а логика — в Kotlin/Java-классах. Требует явного связывания элементов UI с кодом (findViewById()), что создаёт больше шаблонного кода и потенциальных ошибок.\nJetpack Compose — современный декларативный фреймворк, аналог SwiftUI. Позволяет описывать интерфейс как функцию состояния, используя только Kotlin. Компоненты (Composables) перерисовываются автоматически при изменении данных. Упрощает создание динамических интерфейсов, снижает количество кода и повышает читаемость. С 2023 года считается основным стандартом для новых проектов.\nAndroid также предлагает богатую экосистему Jetpack — набор библиотек (ViewModel, Room, Navigation, DataStore, WorkManager и др.), которые решают типовые задачи: управление жизненным циклом, работа с базами данных, фоновые задачи, маршрутизация между экранами — всё стандартизировано и поддерживается Google.Кроссплатформенные технологии позволяют писать один код, который компилируется в нативные приложения для iOS и Android. Отличие от гибридных — отсутствие WebView: вместо веб-страницы приложение использует настоящие нативные компоненты или собственные рендереры, что обеспечивает близкую к нативной производительность.Разработан Google и представлен в 2017 году. Основан на языке Dart — объектно-ориентированном языке с быстрой компиляцией и поддержкой JIT/AOT (Just-in-Time / Ahead-of-Time). Flutter компилирует код напрямую в нативный ARM-код, минуя виртуальную машину.Ключевая особенность — декларативная widget-архитектура. Весь интерфейс строится из деревьев виджетов — каждый элемент (кнопка, текст, список) — это виджет, который может быть изменён, вложен или переиспользован. Даже отступы и цвета — это виджеты.Flutter не использует нативные UI-компоненты iOS или Android. Вместо этого он рендерит собственные элементы с помощью графического движка Skia — то же, что используется в Chrome и Android. Это даёт:\nЕдиный дизайн на всех платформах — приложение выглядит одинаково на iPhone и Samsung.\nВысокую производительность — 60–120 FPS даже на сложных анимациях.\nГибкость дизайна — можно создавать уникальные интерфейсы, не привязанные к Material Design или Human Interface Guidelines.\nОграничения: больший размер приложения (включает рендер-движок), ограниченная интеграция с некоторыми нативными API без написания плагинов на Swift/Kotlin, менее «родной» UX на iOS, если не следовать гайдлайнам вручную.Flutter идеален для проектов с акцентом на дизайн: продукты с уникальной визуальной идентичностью, маркетплейсы, сервисы с частыми анимациями, MVP-стартапы, где важна скорость выхода на два рынка.Разработан Meta (ранее Facebook) в 2015 году. Основан на JavaScript и TypeScript — языках, уже знакомых миллионам веб-разработчиков. React Native использует принцип React — компонентный подход, где интерфейс строится из повторно используемых компонентов, реагирующих на изменения состояния.Архитектура React Native основана на JS-бриджe: JavaScript-код выполняется в отдельном потоке, а вызовы к нативным компонентам (кнопки, списки, камера) передаются через мост. Это позволяет использовать настоящие нативные UI-элементы, но создаёт задержки при частых взаимодействиях между JS и нативным кодом.Преимущества:\nВысокая скорость разработки для команд с опытом в вебе.\nБольшое сообщество и множество готовых библиотек (npm).\nВозможность частичного перехода: можно внедрять React Native-экраны в существующее нативное приложение.\nПоддержка горячей перезагрузки (Hot Reload) — изменения видны мгновенно.\nОграничения:\nПроизводительность ниже, чем у Flutter или нативных приложений — особенно при сложной анимации или работе с большим количеством данных.\nЗависимость от сторонних библиотек для доступа к API — многие требуют установки и настройки нативных модулей (Native Modules).\nРазница в поведении между iOS и Android — некоторые компоненты могут работать по-разному, требуя платформо-специфичного кода.\nСложность отладки: ошибки могут возникать как в JS, так и в нативном коде, затрудняя диагностику.\nReact Native популярен в компаниях, где есть команда веб-разработчиков, нуждающаяся в выходе на мобильный рынок без полного переобучения. Примеры: Facebook, Instagram, Skype, Walmart, Tesla.Разработан Microsoft, ранее известный как Xamarin Forms. Использует язык C# и фреймворк .NET — популярный в корпоративной разработке. В 2022 году Xamarin был объединён с .NET Multi-platform App UI (.NET MAUI) — современной версией, поддерживающей не только iOS и Android, но и Windows, macOS.Отличие от React Native и Flutter: Xamarin/.NET MAUI не использует мост. Код компилируется напрямую в нативный код через Mono или .NET runtime, что обеспечивает лучшую производительность и меньшие накладные расходы.Плюсы:\nПолный доступ к нативным API через привязки (bindings) — почти все функции устройства доступны «из коробки».\nЕдиная кодовая база для мобильных и десктопных приложений.\nИнтеграция с Visual Studio и Azure — удобна для корпоративных проектов.\nСильная типизация и безопасность C#.\nМинусы:\nМеньшее сообщество по сравнению с Flutter и React Native.\nБолее сложная настройка, особенно для новичков.\nМенее гибкий UI — интерфейс часто выглядит «по-Windows», если не применять платформо-специфичные стили.\nМедленнее развитие экосистемы по сравнению с Google и Meta.\n.NET MAUI подходит для enterprise-решений: внутренние корпоративные приложения, ERP-системы, CRM, медицинские терминалы, приложения с интеграцией в облачные сервисы Microsoft (Azure, Office 365).","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Нативная разработка","level":2,"id":"Нативная_разработка_0"},{"heading":"iOS: Swift, Objective-C, Xcode, UIKit, SwiftUI","level":3,"id":"iOS_Swift,_Objective-C,_Xcode,_UIKit,_SwiftUI_0"},{"heading":"Android: Kotlin, Java, Android Studio, Jetpack Compose, XML-разметка","level":3,"id":"Android_Kotlin,_Java,_Android_Studio,_Jetpack_Compose,_XML-разметка_0"},{"heading":"Кроссплатформенная разработка","level":2,"id":"Кроссплатформенная_разработка_0"},{"heading":"Flutter: Dart, widget-архитектура, рендеринг на Skia","level":3,"id":"Flutter_Dart,_widget-архитектура,_рендеринг_на_Skia_0"},{"heading":"React Native: JavaScript/TypeScript, Bridge-механизм, native modules","level":3,"id":"React_Native_JavaScript/TypeScript,_Bridge-механизм,_native_modules_0"},{"heading":"Xamarin (.NET MAUI): C#, .NET, прямая компиляция в нативный код","level":3,"id":"Xamarin_(.NET_MAUI)_C#,_.NET,_прямая_компиляция_в_нативный_код_0"}],"links":[],"author":"","coverImageURL":"","fullURL":"материалы/подтемы/секция-1.-javascript/основные-технологии-для-разработки-мобильных-приложений.html","pathToRoot":"../../..","attachments":[],"createdTime":1757691441508,"modifiedTime":1757693475052,"sourceSize":15238,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Основные технологии для разработки мобильных приложений.md","exportPath":"материалы/подтемы/секция-1.-javascript/основные-технологии-для-разработки-мобильных-приложений.html","showInTree":true,"treeOrder":17,"backlinks":["лекции/секция-1.-javascript/тема-№1.-как-создаются-мобильные-приложения.html"],"type":"markdown"},"материалы/подтемы/секция-1.-javascript/основные-типы-мобильных-приложений.html":{"title":"Основные типы мобильных приложений","icon":"","description":"Мобильное приложение — это не просто программа, запущенная на смартфоне. Его тип определяется тем, как оно создано, на чём работает и как взаимодействует с операционной системой и аппаратными компонентами устройства. Выбор типа приложения влияет на производительность, сроки разработки, стоимость поддержки и качество пользовательского опыта. Существует четыре основных типа: нативные, веб-приложения, гибридные и кроссплатформенные.Нативные приложения — это программы, разработанные специально для одной конкретной платформы с использованием официальных языков программирования, SDK и инструментов, предоставленных её создателем.Для iOS приложения пишутся на Swift или Objective-C с использованием фреймворков UIKit и SwiftUI, собираются в Xcode и компилируются напрямую в машинный код для архитектуры ARM процессоров Apple.\nДля Android — на Kotlin или Java с использованием Android SDK, сборка происходит через Android Studio в APK или AAB-файлы, которые затем интерпретируются Android Runtime (ART).Преимущества: Максимальная производительность — код выполняется напрямую на устройстве без промежуточных слоёв. Полный доступ ко всем API устройства: камера, GPS, Bluetooth, сенсоры, биометрия, уведомления, фоновые задачи. Соответствие стандартам платформы (Human Interface Guidelines для iOS, Material Design для Android) — обеспечивает интуитивный и «родной» пользовательский опыт. Лучшая стабильность и поддержка обновлений ОС — разработчики получают ранний доступ к новым функциям через beta-версии SDK.\nОграничения: Требуется отдельная команда разработчиков для каждой платформы — удвоение затрат на разработку и тестирование. Дублирование логики и дизайна между версиями — увеличивает время выхода на рынок. Высокая зависимость от экосистемы: обновление API может потребовать переписывания значительной части кода.\nОбласти применения:\nНативные приложения — стандарт для проектов, где важны скорость, надёжность и глубокая интеграция с устройством: банковские и финансовые приложения, игры, AR/VR-решения, медицинские системы, приложения с реальным временем (например, такси, доставка), корпоративные инструменты с высокими требованиями к безопасности.Веб-приложения — это сайты, спроектированные так, чтобы вести себя как мобильные приложения. Они работают в браузере, но могут быть добавлены на домашний экран, работать оффлайн и отправлять уведомления благодаря технологиям PWA.Основаны на стандартных веб-технологиях: HTML5, CSS3, JavaScript, а также Service Workers (для кэширования и работы без интернета), Web App Manifest (для определения иконки, имени, цвета темы) и Push API.Преимущества: Одна кодовая база — работает на всех устройствах с браузером (iOS, Android, даже десктоп). Нет необходимости проходить модерацию в магазинах приложений — публикация мгновенная. Низкие затраты на разработку и обслуживание. Не требует установки — пользователь сразу переходит по ссылке. Автоматическое обновление — изменения видны сразу после релиза.\nОграничения: Ограниченный доступ к аппаратным возможностям устройства: нет прямого доступа к контактам, файловой системе, Bluetooth Low Energy, NFC, гироскопу в некоторых случаях. Невозможность использовать многие нативные UI-компоненты — интерфейс выглядит как сайт, а не как приложение. Зависимость от браузера: производительность и совместимость различаются между Safari, Chrome, Firefox. Отсутствие в App Store и Google Play — потеря видимости, возможности рейтингов, рекомендаций и внутренних покупок через официальные каналы.\nОбласти применения:\nPWA подходят для контентных сервисов, информационных сайтов, электронной коммерции с простой логикой, корпоративных порталов, приложений с низким уровнем взаимодействия: онлайн-газеты, каталоги товаров, формы обратной связи, калькуляторы, лендинги. Особенно эффективны там, где важна скорость распространения и минимальные затраты — например, маркетинговые кампании или временные акции.Гибридные приложения — это веб-приложения, обёрнутые в «оболочку» нативного контейнера (WebView), который позволяет им запускаться как обычные мобильные приложения из магазинов. Они используют веб-технологии (HTML/CSS/JS), но имеют доступ к нативным API через плагины.Популярные фреймворки: Apache Cordova (ранее PhoneGap) и Ionic (основан на Angular/React/Vue + Cordova).Преимущества: Одна кодовая база для iOS и Android — снижение затрат на разработку. Возможность публикации в App Store и Google Play — как нативные приложения. Быстрая разработка для команд с опытом в вебе. Поддержка большинства базовых функций: камера, геолокация, уведомления, файловая система — через плагины.\nОграничения: Производительность ниже, чем у нативных — все операции проходят через WebView, что создаёт задержки, особенно при анимациях и сложной графике. Плагины часто устаревают или плохо документированы — могут вызывать баги на новых версиях ОС. UX редко достигает уровня «родного» приложения — интерфейс чувствуется как «веб-страница в обёртке». Ограниченный доступ к современным нативным функциям (например, Face ID, ARKit, Android Jetpack Compose).\nОбласти применения:\nГибридные приложения подходят для прототипирования, MVP-проектов, внутренних корпоративных инструментов, приложений с простой логикой и минимальным взаимодействием с оборудованием: учётные системы, формы регистрации, CRM-клиенты, базовые лояльностные программы. Идеальны, когда бюджет ограничен, а сроки — жёсткие, и требуется быстрый выход на два рынка.Кроссплатформенные приложения — это приложения, написанные на одном языке и фреймворке, которые компилируются в нативный код для разных платформ. Это не обёртки, а генерация нативных компонентов на основе единого исходного кода.Популярные фреймворки: Flutter (Dart, от Google), React Native (JavaScript/TypeScript, от Meta), Xamarin (C#, от Microsoft), Kivy (Python, редко используется в коммерческой разработке).Отличие от гибридных: вместо WebView они используют настоящие нативные UI-компоненты (например, Flutter рисует собственные виджеты, React Native вызывает native UI элементы iOS/Android напрямую).Преимущества: Одна кодовая база — до 80–95% общего кода между iOS и Android. Производительность близка к нативной — особенно в Flutter и React Native с правильной оптимизацией. Доступ к большинству нативных API через библиотеки (например, Firebase, Mapbox, camera plugin). Современный UI — возможность создавать уникальный дизайн, не привязанный к стандартам платформы. Активное сообщество, регулярные обновления, хорошая документация.\nОграничения: Некоторые функции требуют написания нативного кода (Java/Kotlin, Swift/Objective-C) — если нужна глубокая интеграция с OS. Размер приложения больше, чем у чисто нативного (особенно в Flutter — включает движок рендеринга). Возможны баги на границах платформ — поведение одного и того же компонента может отличаться на iOS и Android. Обучение новому языку (Dart, TypeScript) требует времени для команд, привыкших к Java/Kotlin или Swift.\nОбласти применения:\nКроссплатформенные решения — выбор большинства стартапов, компаний с ограниченным бюджетом, но амбициозными целями. Подходят для социальных сетей, мессенджеров, e-commerce, финтех-приложений, образовательных платформ, приложений с частыми обновлениями и необходимостью быстро масштабироваться. Примеры: Facebook, Instagram (частично), Uber Eats, Alibaba, Tencent.","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Нативные приложения","level":3,"id":"Нативные_приложения_0"},{"heading":"Веб-приложения (Progressive Web Apps — PWA)","level":3,"id":"Веб-приложения_(Progressive_Web_Apps_—_PWA)_0"},{"heading":"Гибридные приложения","level":3,"id":"Гибридные_приложения_0"},{"heading":"Кроссплатформенные приложения","level":3,"id":"Кроссплатформенные_приложения_0"},{"heading":"Сравнительная таблица ключевых параметров","level":3,"id":"Сравнительная_таблица_ключевых_параметров_0"}],"links":[],"author":"","coverImageURL":"","fullURL":"материалы/подтемы/секция-1.-javascript/основные-типы-мобильных-приложений.html","pathToRoot":"../../..","attachments":[],"createdTime":1757691037215,"modifiedTime":1757693227523,"sourceSize":15196,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Основные типы мобильных приложений.md","exportPath":"материалы/подтемы/секция-1.-javascript/основные-типы-мобильных-приложений.html","showInTree":true,"treeOrder":18,"backlinks":["лекции/секция-1.-javascript/тема-№1.-как-создаются-мобильные-приложения.html"],"type":"markdown"},"материалы/подтемы/секция-1.-javascript/переменные-в-javascript.html":{"title":"Переменные в JavaScript","icon":"","description":"Переменная в JavaScript — это именованный контейнер для хранения данных, который позволяет обращаться к значению по его имени в процессе выполнения программы.Каждая переменная ассоциирована с определённым значением (число, строка, объект, функция и т.д.), которое может меняться во время работы приложения. Переменные позволяют сохранять промежуточные результаты, пользовательские данные, состояния интерфейса — всё, что требуется для динамического поведения приложения.let age = 25;\nlet userName = \"Алексей\";\nlet isActive = true;\nЗдесь:\nage, userName, isActive — имена переменных.\n25, \"Алексей\", true — значения, которые они хранят. Динамическая типизация — тип значения определяется автоматически при присваивании, и переменная может хранить значения разных типов в разное время.\nlet x = 10; // число\nx = \"привет\"; // теперь строка — допустимо\nx = [1, 2, 3]; // теперь массив — тоже допустимо Объявление и использование — переменную нужно объявить перед использованием (кроме случаев с var в нестрогом режиме, но это устаревшая практика).\nОбласть видимости — определяет, где переменная доступна (блок, функция, глобально), зависит от ключевого слова (let, const, var).\nПодробнее про эти особенности мы прочтём в следующих лекциях.При создании и использовании переменных необходимо следовать <a data-tooltip-position=\"top\" aria-label=\"Правила наименования переменных в JavaScript\" data-href=\"Правила наименования переменных в JavaScript\" href=\"материалы/подтемы/секция-1.-javascript/правила-наименования-переменных-в-javascript.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">правилам наименования переменных</a>.Работа с переменными включает три ключевых действия: объявление, инициализация и присваивание. Эти понятия тесно связаны, но не тождественны — их различие критически важно для понимания поведения кода.Объявление переменной — это создание её имени в области видимости. Оно сообщает интерпретатору: «Я хочу использовать эту метку для хранения значения».В JavaScript есть три ключевых слова для объявления:Примеры:var x; // объявление через var\nlet y; // объявление через let\nconst z; // Ошибка: const требует инициализации при объявлении\nКлючевое отличие: const обязывает сразу присвоить значение — без этого возникает синтаксическая ошибка.\n💡 Рекомендация: Всегда используйте const по умолчанию. Если знаете, что значение будет меняться — замените на let. Никогда не используйте var в современных проектах — он вносит путаницу из-за hoisting и функциональной области видимости.\nИнициализация — это первое присваивание значения переменной в момент её создания. Это когда переменная получает своё начальное значение и становится доступной для использования.\nИнициализация может совпадать с объявлением.\nОна обязательна для const, опциональна для let и var.\nПримеры:let age; // объявление — без инициализации (значение undefined)\nage = 25; // присваивание — теперь переменная проинициализирована let score = 100; // объявление + инициализация в одной строке\nconst name = \"Алекс\"; // объявление + инициализация (обязательно!)\nИнициализация = объявление + первое присваивание в одном действии.Присваивание — это операция изменения значения уже существующей переменной. Оно происходит после объявления (и, если нужно, после инициализации).\nДля let — можно присваивать сколько угодно раз.\nДля const — присваивание разрешено только один раз (при инициализации); любое последующее присваивание вызовет ошибку.\nПрисваивание не обязательно должно происходить сразу после объявления.\nПримеры:let count;\ncount = 0; // первое присваивание (и одновременно инициализация)\ncount = count + 1; // второе присваивание — изменение значения\ncount = null; // присваивание — можно менять const PI = 3.14;\nPI = 3.14159; // Ошибка: присваивание const после инициализации запрещено // Но! Если значение — объект или массив:\nconst user = { name: \"Иван\" };\nuser.name = \"Петр\"; // Разрешено — меняется содержимое объекта, а не ссылка\nuser = {}; // Ошибка — попытка изменить ссылку\nВажно: const защищает ссылку, а не содержимое. Для объектов и массивов можно менять свойства — это не нарушает константность.В JavaScript, как и в любом языке программирования, читаемость и поддерживаемость кода важнее минимального количества строк. Создание дополнительной переменной для хранения промежуточного результата — это не расточительство, а практика, повышающая ясность кода.\nУпрощает чтение: имя переменной может объяснять смысл действия, вместо того чтобы оставлять сложное выражение без контекста.\nОблегчает отладку: можно легко поставить точку останова на конкретной переменной и увидеть её значение.\nСнижает когнитивную нагрузку: другие разработчики (и вы сами через неделю) быстрее поймут логику.\nПовышает переиспользуемость: если значение используется несколько раз — нет нужды повторять вычисление.\nБез лишней переменной (менее читаемо):if (user.age &gt;= 18 &amp;&amp; user.status === 'active' &amp;&amp; user.country !== 'restricted') { enableAccess();\n}\nС лишней переменной (более понятно):const isAdult = user.age &gt;= 18;\nconst isActive = user.status === 'active';\nconst isAllowedCountry = user.country !== 'restricted'; if (isAdult &amp;&amp; isActive &amp;&amp; isAllowedCountry) { enableAccess();\n}\nЗдесь имена переменных выполняют роль документации — они сразу говорят, что проверяется, а не как.Не стоит создавать переменные ради создания — только если они действительно улучшают понимание. Не нужно оборачивать простые литералы или очевидные значения, например:const five = 5; // Избыточно\nreturn x + five; // Лучше:\nreturn x + 5;\nНо если значение получено в результате вычисления, преобразования или запроса — лучше сохранить его с осмысленным именем.Переменные используются для хранения данных, которые могут изменяться во время выполнения программы. Они позволяют:\nСохранять результаты вычислений;\nПередавать данные между частями кода;\nУправлять состоянием приложения (например, флаги, счётчики, пользовательские данные). Обращайтесь к переменной только после её объявления и инициализации. Попытка использовать let или const до объявления вызовет ошибку ReferenceError.\nНе используйте переменные с неопределённым значением (undefined) без проверки — это источник багов.\nИзбегайте глобальных переменных. Всегда ограничивайте область видимости блоками ({}), функциями или модулями.\nИспользуйте переменные для повторяющихся значений — это упрощает изменение параметров в будущем (например, таймауты, цвета, константы конфигурации).\nconst apiUrl = 'https://api.example.com/data';\nconst timeoutMs = 5000; fetch(apiUrl, { timeout: timeoutMs }) .then(response =&gt; response.json()) .then(data =&gt; { const processedData = data.map(item =&gt; item.toUpperCase()); displayResults(processedData); });\nЗдесь каждая переменная имеет чёткую роль:\napiUrl — централизованное управление адресом API;\ntimeoutMs — легко изменяемый параметр;\nprocessedData — промежуточный результат, понятный по имени. Переиспользование одной переменной для разных целей:\nlet user = getUserById(123);\nuser = calculateDiscount(user); // Теперь user — не объект пользователя, а число. Путаница! Использование переменных без инициализации:\nlet result;\nconsole.log(result + 10); // NaN — непредсказуемое поведение ","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Пример:","level":3,"id":"Пример_0"},{"heading":"Ключевые особенности:","level":3,"id":"Ключевые_особенности_0"},{"heading":"Названия переменных","level":2,"id":"Названия_переменных_0"},{"heading":"Работа с переменными: объявление, инициализация и присваивание","level":2,"id":"Работа_с_переменными_объявление,_инициализация_и_присваивание_0"},{"heading":"Объявление","level":3,"id":"Объявление_0"},{"heading":"Инициализация","level":3,"id":"Инициализация_0"},{"heading":"Присваивание","level":3,"id":"Присваивание_0"},{"heading":"Рекомендация: не жалеть создавать лишнюю переменную","level":2,"id":"Рекомендация_не_жалеть_создавать_лишнюю_переменную_0"},{"heading":"Почему это полезно:","level":3,"id":"Почему_это_полезно_0"},{"heading":"Пример до и после:","level":3,"id":"Пример_до_и_после_0"},{"heading":"Важно:","level":3,"id":"Важно_0"},{"heading":"Использование переменных в коде","level":2,"id":"Использование_переменных_в_коде_0"},{"heading":"Правила использования:","level":4,"id":"Правила_использования_0"},{"heading":"Пример правильного использования:","level":4,"id":"Пример_правильного_использования_0"},{"heading":"Ошибки, которых следует избегать:","level":4,"id":"Ошибки,_которых_следует_избегать_0"}],"links":["материалы/подтемы/секция-1.-javascript/правила-наименования-переменных-в-javascript.html"],"author":"","coverImageURL":"","fullURL":"материалы/подтемы/секция-1.-javascript/переменные-в-javascript.html","pathToRoot":"../../..","attachments":[],"createdTime":1757696813511,"modifiedTime":1757698288236,"sourceSize":13815,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Переменные в JavaScript.md","exportPath":"материалы/подтемы/секция-1.-javascript/переменные-в-javascript.html","showInTree":true,"treeOrder":19,"backlinks":["материалы/подтемы/секция-1.-javascript/базовое-понимание-синтаксиса-javascript.html"],"type":"markdown"},"материалы/подтемы/секция-1.-javascript/правила-наименования-переменных-в-javascript.html":{"title":"Правила наименования переменных в JavaScript","icon":"","description":"В JavaScript как и в любом другом языке программирования существуют строгие синтаксические правила для именования переменных: Имя должно начинаться с буквы (a–z, A–Z), символа подчёркивания (_) или знака доллара ($).\n✅ Разрешено: name, _count, $element\n❌ Запрещено: 2name, -value, 3dModel После первого символа можно использовать буквы, цифры (0–9), _ и $.\n✅ Разрешено: userName1, total_price, API_KEY\n❌ Запрещено: user-name, email@domain, my variable Имена чувствительны к регистру — name, Name и NAME — это три разные переменные. Нельзя использовать зарезервированные слова языка как имена переменных:\nlet, const, var, function, if, else, return, class, import, export, null, true, false, this, new, while, for, break, continue, try, catch, finally, throw, switch, case, default, typeof, instanceof, in, of, async, await, yield и другие.\n❌ Запрещено: let = 5;, function = \"test\"; Нельзя использовать ключевые слова будущих версий ECMAScript, даже если они пока не используются (например, package, interface, private, protected, public, static).\n❌ Лучше избегать: class, enum, implements, module, namespace, super Хотя JavaScript позволяет многое, следование общепринятым соглашениям делает код понятным, поддерживаемым и профессиональным: Используйте camelCase для имен переменных и функций.\n✅ userName, isLoading, getTotalPrice\n❌ user_name, User Name, usertotalprice Для констант (которые не меняются) используйте UPPER_SNAKE_CASE.\n✅ MAX_USERS, API_URL, DEFAULT_TIMEOUT Выбирайте осмысленные, описательные имена — избегайте аббревиатур и однобуквенных имён, если контекст не очевиден.\n✅ numberOfItems, currentUser, isFormValid\n❌ n, x, tmp, data1, arr Используйте логические имена для булевых переменных — начинайте с is, has, can, should.\n✅ isVisible, hasPermission, canSubmit, isLoading Избегайте двойных отрицаний — лучше isDisabled, чем isNotEnabled. Не используйте $ в начале имени без причины — хотя $ разрешён, он часто используется в библиотеках (например, jQuery) для обозначения объектов DOM. Используйте только если это часть вашей договорённости в проекте (например, const $button = document.querySelector('#btn');). Следуйте единому стилю в команде — согласуйте стиль именования в проекте (через ESLint, Prettier или внутренний гайдлайн). Не пишите имена на кириллице — даже если JavaScript это позволяет, это снижает читаемость для международной команды и может вызвать проблемы с инструментами/редакторами. 💡 Рекомендация: «Не жалейте создавать лишнюю переменную» — лучше сделать код более читаемым через понятные имена, чем экономить на количестве строк. Например: const isEmailValid = validateEmail(userInput); // Читаемо и понятно вместо const v = validateEmail(userInput); // Неясно, что такое v ","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Требования к названию","level":2,"id":"Требования_к_названию_0"},{"heading":"Рекомендации","level":2,"id":"Рекомендации_0"}],"links":[],"author":"","coverImageURL":"","fullURL":"материалы/подтемы/секция-1.-javascript/правила-наименования-переменных-в-javascript.html","pathToRoot":"../../..","attachments":[],"createdTime":1757697173629,"modifiedTime":1757697313673,"sourceSize":4650,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Правила наименования переменных в JavaScript.md","exportPath":"материалы/подтемы/секция-1.-javascript/правила-наименования-переменных-в-javascript.html","showInTree":true,"treeOrder":20,"backlinks":["материалы/подтемы/секция-1.-javascript/переменные-в-javascript.html"],"type":"markdown"},"материалы/подтемы/секция-1.-javascript/самое-простое-использование-javascript.html":{"title":"Самое простое использование JavaScript","icon":"","description":"Для быстрого тестирования и экспериментов с JavaScript можно использовать консоль разработчика — встроенную инструментальную панель в любом современном браузере (Chrome, Firefox, Edge, Safari). Открыть её можно сочетанием клавиш F12 или Ctrl+Shift+I (на macOS — Cmd+Option+I), затем перейти на вкладку Console.Консоль позволяет выполнять JavaScript-код прямо в браузере без создания HTML-файлов. Это идеальное место для проверки синтаксиса, отладки простых выражений и изучения поведения языка в реальном времени.\n<img alt=\"Pasted image 20250912212732.png\" src=\"материалы/файлы/pasted-image-20250912212732.png\" target=\"_self\">Для вывода информации в консоль используется функция console.log():console.log(\"Привет, мир!\");\nconsole.log(42);\nconsole.log(true);\n<br><img alt=\"Pasted image 20250912212810.png\" src=\"материалы/файлы/pasted-image-20250912212810.png\" target=\"_self\">Эта команда — основной инструмент отладки на начальных этапах. Она выводит переданные значения в консоль, помогая увидеть, что происходит в коде. Можно передавать несколько аргументов:console.log(\"Значение переменной:\", variableName);\nТакже доступны другие методы:\nconsole.error() — для ошибок (выводится красным),\nconsole.warn() — для предупреждений (жёлтый цвет),\nconsole.table() — для удобного отображения массивов и объектов в виде таблицы.\nДля показа пользователю простого сообщения используется функция alert():alert(\"Это сообщение от JavaScript!\");\n<br><img alt=\"Pasted image 20250912212840.png\" src=\"материалы/файлы/pasted-image-20250912212840.png\" target=\"_self\">Она выводит модальное окно с текстом, которое блокирует взаимодействие с страницей до нажатия кнопки «ОК». Используется исключительно для учебных целей и быстрой обратной связи — в реальных приложениях alert() не применяется из-за плохого пользовательского опыта.\n⚠️ Не используйте alert() в продакшене — он нарушает поток работы пользователя и не поддерживает стилизацию.\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Консоль разработчика в браузере","level":2,"id":"Консоль_разработчика_в_браузере_0"},{"heading":"Базовые команды","level":2,"id":"Базовые_команды_0"},{"heading":"Вывод в консоль","level":3,"id":"Вывод_в_консоль_0"},{"heading":"Оповещение в браузере","level":3,"id":"Оповещение_в_браузере_0"}],"links":[],"author":"","coverImageURL":".","fullURL":"материалы/подтемы/секция-1.-javascript/самое-простое-использование-javascript.html","pathToRoot":"../../..","attachments":["материалы/файлы/pasted-image-20250912212732.html","материалы/файлы/pasted-image-20250912212810.html","материалы/файлы/pasted-image-20250912212840.html"],"createdTime":1757701551028,"modifiedTime":1757701721219,"sourceSize":3060,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Самое простое использование JavaScript.md","exportPath":"материалы/подтемы/секция-1.-javascript/самое-простое-использование-javascript.html","showInTree":true,"treeOrder":21,"backlinks":["лекции/секция-1.-javascript/тема-№3.-использование-javascript-в-браузере.html"],"type":"markdown"},"материалы/подтемы/секция-1.-javascript/создание-своей-html-страницы.html":{"title":"Создание своей HTML страницы","icon":"","description":"Чтобы создать HTML-страницу, достаточно использовать любой текстовый редактор — даже Блокнот. Однако для эффективной разработки рекомендуется использовать современный редактор кода, такой как Visual Studio Code (VS Code).HTML-страница — это текстовый файл с расширением .html. Минимальная структура HTML-документа выглядит так:&lt;!DOCTYPE html&gt;\n&lt;html lang=\"ru\"&gt;\n&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;Моя первая страница&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt; &lt;h1&gt;Привет, мир!&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nСохраните этот код в файл с именем, например, index.html. Откройте его в браузере — вы увидите заголовок «Привет, мир!». Это и есть ваша первая веб-страница.<a data-href=\"Как создавать файлы с определённым расширением\" href=\"материалы/как-сделать/как-создавать-файлы-с-определённым-расширением.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Как создавать файлы с определённым расширением</a>JavaScript можно подключать к HTML-странице двумя основными способами: встроенно (внутри HTML-файла) или через внешний файл. Второй способ — единственно правильный для профессиональной разработки.JavaScript можно вставить прямо внутрь HTML-документа с помощью тега &lt;script&gt;:&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt; &lt;title&gt;Страница с встроенным JS&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt; &lt;h1&gt;Привет!&lt;/h1&gt; &lt;script&gt; alert(\"Это встроенный JavaScript!\"); document.write(\"&lt;p&gt;Текст добавлен скриптом.&lt;/p&gt;\"); &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nПочему это не рекомендуется:\nНарушает принцип разделения ответственности: структура (HTML), стиль (CSS) и логика (JS) должны быть разделены.\nСложно поддерживать и масштабировать код — особенно при росте проекта.\nЗатрудняется повторное использование кода между страницами.\nУхудшается читаемость и тестирование.\nМожет замедлять загрузку страницы, если скрипт большой.\nИспользуйте этот способ только для быстрых экспериментов, демонстраций или очень простых примеров.Правильный и стандартный способ — создать отдельный файл с расширением .js и подключить его к HTML:\nСоздайте файл script.js в той же папке, что и index.html.\nНапишите в нём JavaScript-код:\n// script.js\nalert(\"Это внешний JavaScript-файл!\");\ndocument.querySelector('h1').style.color = 'blue'; Подключите его в HTML перед закрывающим тегом &lt;/body&gt;:\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt; &lt;title&gt;Страница с внешним JS&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt; &lt;h1&gt;Привет!&lt;/h1&gt; &lt;script src=\"script.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nПреимущества:\nЧистый, организованный код.\nВозможность переиспользования одного файла на нескольких страницах.\nУпрощённая отладка и версионный контроль (Git).\nЛучшая производительность — браузер может кэшировать внешние скрипты.\nJavaScript следует подключать в самом конце тела HTML-документа, перед закрывающим тегом &lt;/body&gt;.Когда браузер встречает тег &lt;script&gt; во время парсинга HTML, он приостанавливает загрузку и разбор DOM-дерева, чтобы загрузить и выполнить скрипт. Если скрипт подключен в &lt;head&gt; или в начале &lt;body&gt;, а он пытается взаимодействовать с элементами, которые ещё не загружены — возникнет ошибка:&lt;head&gt; &lt;script src=\"script.js\"&gt;&lt;/script&gt; &lt;!-- ❌ Опасно! --&gt;\n&lt;/head&gt;\n&lt;body&gt; &lt;button id=\"myButton\"&gt;Нажми меня&lt;/button&gt;\n&lt;/body&gt;\nЕсли в script.js написано:document.getElementById('myButton').addEventListener('click', () =&gt; { alert('Клик!');\n});\n— то скрипт выполнится до того, как кнопка появится в DOM, и getElementById вернёт null. Результат — ошибка в консоли.&lt;body&gt; &lt;button id=\"myButton\"&gt;Нажми меня&lt;/button&gt; &lt;script src=\"script.js\"&gt;&lt;/script&gt; &lt;!-- ✅ Безопасно: DOM уже построен --&gt;\n&lt;/body&gt;\nТеперь браузер сначала полностью загрузит и отрисует все элементы страницы, а только потом выполнит скрипт — и все запросы к DOM будут успешными.\nБыстрая отрисовка контента: пользователь видит страницу быстрее, без задержек из-за загрузки скриптов.\nПредсказуемое поведение: код работает только тогда, когда всё, к чему он обращается, уже существует.\nСовместимость с современными практиками: так делают все крупные фреймворки и библиотеки. Если скрипт не зависит от DOM (например, модуль аналитики, который запускается сразу при загрузке страницы), его можно размещать в &lt;head&gt;.\nИспользование атрибута defer (в &lt;head&gt;) позволяет отложить выполнение скрипта до завершения парсинга HTML — это альтернатива размещению в конце, но требует понимания нюансов.\n&lt;head&gt; &lt;script src=\"script.js\" defer&gt;&lt;/script&gt; &lt;!-- ✅ Альтернатива, если нужно в head --&gt;\n&lt;/head&gt; ✅ Рекомендация: Всегда подключайте JavaScript-файлы перед закрывающим тегом &lt;/body&gt;, если только вы точно не знаете, что делаете и почему используете defer или async. Это — базовое правило надёжной и предсказуемой работы JavaScript на веб-странице.\nЧтобы реагировать на действия пользователя (например, нажатие кнопки), можно назначить обработчик события двумя способами: через атрибуты HTML или через JavaScript. Второй способ — единственный корректный для профессиональной разработки.Можно напрямую вписать JavaScript-код в атрибут onclick элемента:&lt;button onclick=\"alert('Кнопка нажата!')\"&gt;Нажми меня&lt;/button&gt;\nИли вызвать функцию:&lt;script&gt;\nfunction handleClick() { alert('Функция вызвана через атрибут!');\n}\n&lt;/script&gt; &lt;button onclick=\"handleClick()\"&gt;Нажми меня&lt;/button&gt;\nПочему это не рекомендуется:\nСмешивание ответственности: логика (JS) и структура (HTML) сливаются — нарушает принцип разделения.\nСложность поддержки: сложно отлаживать, тестировать и рефакторить код, особенно при росте проекта.\nУязвимость к ошибкам: если имя функции опечатано — ошибка не будет заметна до момента клика.\nНе масштабируемо: невозможно динамически добавлять/удалять обработчики, работать с несколькими элементами, использовать замыкания.\nПроблемы с безопасностью: в некоторых контекстах (CSP) использование onclick может быть заблокировано. ⚠️ Используйте этот способ только для быстрых экспериментов или учебных примеров — никогда в продакшене.\nПравильный и стандартный способ — назначать обработчики событий из JavaScript, после того как DOM загружен:&lt;button id=\"myButton\"&gt;Нажми меня&lt;/button&gt; &lt;script src=\"script.js\"&gt;&lt;/script&gt;\n// script.js\nconst button = document.getElementById('myButton'); button.addEventListener('click', function() { alert('Кнопка нажата через addEventListener!');\n});\nПреимущества:\nПолное разделение логики и разметки.\nВозможность назначать несколько обработчиков на один элемент.\nЛегко удалять обработчики через removeEventListener.\nПоддержка современных возможностей JS: стрелочные функции, async/await, замыкания.\nУдобно работать с динамически создаваемыми элементами.\nСовместимость с системами сборки, тестирования и фреймворками.\nДополнительно — лучшая практика:document.addEventListener('DOMContentLoaded', () =&gt; { const button = document.getElementById('myButton'); if (button) { button.addEventListener('click', () =&gt; { console.log('Клик обработан надёжно'); }); }\n});\nЭто гарантирует, что скрипт выполнится только после полной загрузки DOM, даже если он подключён в &lt;head&gt;.Представим, что у нас есть кнопка в HTML:&lt;button id=\"myButton\"&gt;Нажми меня&lt;/button&gt;\nМы хотим, чтобы при нажатии на неё в консоль браузера выводилось сообщение: \"Кнопка была нажата!\"\nУбедитесь, что у вас есть файл script.js, и он подключен в конце &lt;body&gt;:&lt;body&gt; &lt;button id=\"myButton\"&gt;Нажми меня&lt;/button&gt; &lt;script src=\"script.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\nВ script.js напишите:const button = document.getElementById('myButton');\nЭта строка говорит браузеру:\n👉 «Найди элемент на странице, у которого атрибут id=\"myButton\"» — и сохрани его в переменную button.Теперь добавьте эту строку:button.addEventListener('click', () =&gt; { console.log('Кнопка была нажата!');\n});\nЧто здесь происходит (без функций):\naddEventListener — это встроенная команда, которая привязывает действие к элементу.\n'click' — это тип события, которое мы хотим отслеживать (нажатие).\n() — это просто способ сказать: «здесь будет код, который выполнится при событии».\nconsole.log(...) — это команда, которая выводит текст в окно разработчика (не на экран). ✅ Всё, что внутри { } — это просто набор команд, которые должны сработать, когда пользователь кликнет.\nКогда пользователь кликает по кнопке — в консоли браузера появляется сообщение: Кнопка была нажата!\nЭтот шаблон — основа всего дальнейшего взаимодействия с пользователем. Его нужно запомнить как фиксированную формулу:\nэлемент.addEventListener('событие', () =&gt; { ... });\nИ заменять:\nэлемент — на нужный вам (button, input, div и т.д.)\n'событие' — на нужное (click, mouseover, keydown и т.д.)\n{ ... } — на то, что вы хотите сделать (вывести сообщение, изменить цвет, отправить данные)\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Как создать HTML-страницу","level":3,"id":"Как_создать_HTML-страницу_0"},{"heading":"Как использовать JavaScript на странице","level":3,"id":"Как_использовать_JavaScript_на_странице_0"},{"heading":"В том же HTML файле (не рекомендуется)","level":4,"id":"В_том_же_HTML_файле_(не_рекомендуется)_0"},{"heading":"Подключая внешний файл","level":4,"id":"Подключая_внешний_файл_0"},{"heading":"Где подключать JS — в конце или начале HTML-файла?","level":3,"id":"Где_подключать_JS_—_в_конце_или_начале_HTML-файла?_0"},{"heading":"Почему именно в конце?","level":4,"id":"Почему_именно_в_конце?_0"},{"heading":"Правильный способ:","level":4,"id":"Правильный_способ_0"},{"heading":"Дополнительные преимущества:","level":4,"id":"Дополнительные_преимущества_0"},{"heading":"Исключения:","level":4,"id":"Исключения_0"},{"heading":"Подключение логики обработки в кнопки","level":2,"id":"Подключение_логики_обработки_в_кнопки_0"},{"heading":"Через атрибут в кнопках (не рекомендуется)","level":3,"id":"Через_атрибут_в_кнопках_(не_рекомендуется)_0"},{"heading":"Через назначения обработчиков событий","level":3,"id":"Через_назначения_обработчиков_событий_0"},{"heading":"Добавление обработчика на кнопку — простой пример","level":3,"id":"Добавление_обработчика_на_кнопку_—_простой_пример_0"},{"heading":"Шаг 1: Подключите внешний JavaScript-файл","level":4,"id":"Шаг_1_Подключите_внешний_JavaScript-файл_0"},{"heading":"Шаг 2: Найдите кнопку в JavaScript","level":4,"id":"Шаг_2_Найдите_кнопку_в_JavaScript_0"},{"heading":"Шаг 3: Назначьте обработчик события","level":4,"id":"Шаг_3_Назначьте_обработчик_события_0"},{"heading":"Результат:","level":4,"id":"Результат_0"}],"links":["материалы/как-сделать/как-создавать-файлы-с-определённым-расширением.html"],"author":"","coverImageURL":"","fullURL":"материалы/подтемы/секция-1.-javascript/создание-своей-html-страницы.html","pathToRoot":"../../..","attachments":[],"createdTime":1757702645321,"modifiedTime":1757703277500,"sourceSize":15024,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Создание своей HTML страницы.md","exportPath":"материалы/подтемы/секция-1.-javascript/создание-своей-html-страницы.html","showInTree":true,"treeOrder":22,"backlinks":["лекции/секция-1.-javascript/тема-№3.-использование-javascript-в-браузере.html"],"type":"markdown"},"материалы/подтемы/секция-1.-javascript/что-такое-javascript,-история-появления.html":{"title":"Что такое JavaScript, история появления","icon":"","description":"JavaScript — это динамический, интерпретируемый язык программирования, изначально разработанный для добавления интерактивности на веб-страницы. Он является одним из трёх основных технологий веб-разработки (наряду с HTML и CSS) и позволяет управлять поведением веб-приложений: обрабатывать события, изменять содержимое страницы, взаимодействовать с сервером и многое другое. Сегодня JavaScript работает не только в браузерах, но и на стороне сервера, в мобильных приложениях, десктопных программах и даже в устройствах Интернета вещей.Это мультипарадигмальный язык, что означает, он поддерживает несколько стилей (парадигм) программирования, и разработчик может выбирать подход, наиболее подходящий для решения задачи. Основные поддерживаемые парадигмы: Функциональное программирование — функции являются первоклассными объектами, можно передавать их как аргументы, возвращать из других функций, создавать замыкания. Поддерживаются чистые функции, иммутабельность, высшие порядки (map, filter, reduce). Объектно-ориентированное программирование (ООП) — через прототипы и (с ES6) синтаксис классов реализуется инкапсуляция, наследование и полиморфизм. Объекты могут динамически расширяться, свойства и методы добавляются во время выполнения. Процедурное программирование — код может быть написан как последовательность инструкций без явного использования классов или функций высшего порядка, что удобно для простых скриптов. JavaScript обладает следующими ключевыми особенностями: Динамическая типизация — тип переменной определяется во время выполнения. Интерпретируемость — код выполняется без предварительной компиляции. Поддержка функционального и объектно-ориентированного стилей — позволяет писать код разными способами. Асинхронность — через колбэки, промисы и async/await обеспечивает неблокирующее выполнение операций. Кроссплатформенность — работает в браузерах, Node.js, React Native, Flutter (через плагины) и других средах. Пример простого кода на JavaScript: alert(\"Привет, мир!\"); let name = \"Анна\"; console.log(\"Здравствуйте, \" + name + \"!\"); Этот код отобразит всплывающее окно с сообщением, сохранит имя в переменную и выведет приветствие в консоль браузера.\nВеб-браузеры — интерактивные формы, анимации, динамическая загрузка контента. Фронтенд-фреймворки — React, Vue, Angular. Бэкенд — Node.js для серверной логики. Мобильные приложения — React Native, Ionic, NativeScript. Десктопные приложения — Electron. Игры — с использованием Canvas или WebGL. IoT — управление устройствами через JavaScript-среды (например, Johnny-Five).\nВ середине 1990-х годов веб был преимущественно статичным: HTML описывал структуру, CSS — оформление, но не было инструментов для взаимодействия с пользователем. Нужен был язык, который позволил бы браузерам выполнять простые действия — проверку форм, анимации, реакцию на клики — без обращения к серверу. Netscape Communications, одна из ведущих компаний того времени, решила создать такой язык.В 1995 году Брендан Эйх, работающий в Netscape, за десять дней разработал язык, первоначально названный Mocha, затем LiveScript, а в конце года — JavaScript. Название было выбрано в маркетинговых целях — чтобы ассоциироваться с популярным Java (несмотря на то, что языки принципиально различны). JavaScript был внедрён в браузер Netscape Navigator 2.0.В 1996 году Netscape передала язык в Ecma International для стандартизации. В 1997 году был принят стандарт ECMAScript 1 (ES1). С тех пор язык развивается под управлением Ecma TC39. Каждые 12 месяцев выпускается новая версия стандарта (ES6/ES2015, ES2020, ES2024 и т.д.), которые добавляют новые возможности: стрелочные функции, модули, классы, промисы, деструктуризацию и другие.Сегодня JavaScript — один из самых популярных языков программирования в мире (по данным Stack Overflow, GitHub и других источников). Его экосистема включает тысячи библиотек и фреймворков. Благодаря Node.js он стал универсальным языком, применяемым как на клиенте, так и на сервере. В мобильной разработке JavaScript используется в таких фреймворках, как React Native, позволяя создавать нативные приложения для iOS и Android на единой кодовой базе. Развитие продолжается: активно внедряются новые API, улучшается производительность движков (V8, SpiderMonkey), растёт поддержка TypeScript как надмножества JavaScript.","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Что такое JavaScript","level":2,"id":"Что_такое_JavaScript_0"},{"heading":"Основные характеристики","level":2,"id":"Основные_характеристики_0"},{"heading":"Где применяется JavaScript","level":2,"id":"Где_применяется_JavaScript_0"},{"heading":"История появления и развития JavaScript","level":2,"id":"История_появления_и_развития_JavaScript_0"},{"heading":"Предпосылки создания","level":3,"id":"Предпосылки_создания_0"},{"heading":"Создание языка","level":3,"id":"Создание_языка_0"},{"heading":"Стандартизация*","level":3,"id":"Стандартизация*_0"},{"heading":"Современное развитие","level":3,"id":"Современное_развитие_0"}],"links":[],"author":"","coverImageURL":"","fullURL":"материалы/подтемы/секция-1.-javascript/что-такое-javascript,-история-появления.html","pathToRoot":"../../..","attachments":[],"createdTime":1757695961822,"modifiedTime":1757696173734,"sourceSize":7899,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Что такое JavaScript, история появления.md","exportPath":"материалы/подтемы/секция-1.-javascript/что-такое-javascript,-история-появления.html","showInTree":true,"treeOrder":23,"backlinks":["лекции/секция-1.-javascript/тема-№2.-основы-javascript.html"],"type":"markdown"},"материалы/файлы/pasted-image-20250912205946.html":{"title":"Pasted image 20250912205946","icon":"","description":"<img src=\"материалы/файлы/pasted-image-20250912205946.png\" target=\"_self\">","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"","coverImageURL":".","fullURL":"материалы/файлы/pasted-image-20250912205946.html","pathToRoot":"../..","attachments":["материалы/файлы/pasted-image-20250912205946.html"],"createdTime":1757699986376,"modifiedTime":1757699986377,"sourceSize":102416,"sourcePath":"Материалы/Файлы/Pasted image 20250912205946.png","exportPath":"материалы/файлы/pasted-image-20250912205946.html","showInTree":true,"treeOrder":25,"backlinks":["index.html"],"type":"attachment"},"материалы/файлы/pasted-image-20250912212732.html":{"title":"Pasted image 20250912212732","icon":"","description":"<img src=\"материалы/файлы/pasted-image-20250912212732.png\" target=\"_self\">","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"","coverImageURL":".","fullURL":"материалы/файлы/pasted-image-20250912212732.html","pathToRoot":"../..","attachments":["материалы/файлы/pasted-image-20250912212732.html"],"createdTime":1757701652975,"modifiedTime":1757701652976,"sourceSize":105027,"sourcePath":"Материалы/Файлы/Pasted image 20250912212732.png","exportPath":"материалы/файлы/pasted-image-20250912212732.html","showInTree":true,"treeOrder":26,"backlinks":["материалы/подтемы/секция-1.-javascript/самое-простое-использование-javascript.html"],"type":"attachment"},"материалы/файлы/pasted-image-20250912212810.html":{"title":"Pasted image 20250912212810","icon":"","description":"<img src=\"материалы/файлы/pasted-image-20250912212810.png\" target=\"_self\">","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"","coverImageURL":".","fullURL":"материалы/файлы/pasted-image-20250912212810.html","pathToRoot":"../..","attachments":["материалы/файлы/pasted-image-20250912212810.html"],"createdTime":1757701690462,"modifiedTime":1757701690463,"sourceSize":4324,"sourcePath":"Материалы/Файлы/Pasted image 20250912212810.png","exportPath":"материалы/файлы/pasted-image-20250912212810.html","showInTree":true,"treeOrder":27,"backlinks":["материалы/подтемы/секция-1.-javascript/самое-простое-использование-javascript.html"],"type":"attachment"},"материалы/файлы/pasted-image-20250912212840.html":{"title":"Pasted image 20250912212840","icon":"","description":"<img src=\"материалы/файлы/pasted-image-20250912212840.png\" target=\"_self\">","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"","coverImageURL":".","fullURL":"материалы/файлы/pasted-image-20250912212840.html","pathToRoot":"../..","attachments":["материалы/файлы/pasted-image-20250912212840.html"],"createdTime":1757701720319,"modifiedTime":1757701720320,"sourceSize":11213,"sourcePath":"Материалы/Файлы/Pasted image 20250912212840.png","exportPath":"материалы/файлы/pasted-image-20250912212840.html","showInTree":true,"treeOrder":28,"backlinks":["материалы/подтемы/секция-1.-javascript/самое-простое-использование-javascript.html"],"type":"attachment"},"материалы/файлы/pasted-image-20250912214611.html":{"title":"Pasted image 20250912214611","icon":"","description":"<img src=\"материалы/файлы/pasted-image-20250912214611.png\" target=\"_self\">","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"","coverImageURL":".","fullURL":"материалы/файлы/pasted-image-20250912214611.html","pathToRoot":"../..","attachments":["материалы/файлы/pasted-image-20250912214611.html"],"createdTime":1757702771590,"modifiedTime":1757702771591,"sourceSize":21467,"sourcePath":"Материалы/Файлы/Pasted image 20250912214611.png","exportPath":"материалы/файлы/pasted-image-20250912214611.html","showInTree":true,"treeOrder":29,"backlinks":["материалы/как-сделать/как-создавать-файлы-с-определённым-расширением.html"],"type":"attachment"},"материалы/файлы/pasted-image-20250912214624.html":{"title":"Pasted image 20250912214624","icon":"","description":"<img src=\"материалы/файлы/pasted-image-20250912214624.png\" target=\"_self\">","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"","coverImageURL":".","fullURL":"материалы/файлы/pasted-image-20250912214624.html","pathToRoot":"../..","attachments":["материалы/файлы/pasted-image-20250912214624.html"],"createdTime":1757702784529,"modifiedTime":1757702784529,"sourceSize":46166,"sourcePath":"Материалы/Файлы/Pasted image 20250912214624.png","exportPath":"материалы/файлы/pasted-image-20250912214624.html","showInTree":true,"treeOrder":30,"backlinks":["материалы/как-сделать/как-создавать-файлы-с-определённым-расширением.html"],"type":"attachment"},"материалы/файлы/pasted-image-20250912214643.html":{"title":"Pasted image 20250912214643","icon":"","description":"<img src=\"материалы/файлы/pasted-image-20250912214643.png\" target=\"_self\">","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"","coverImageURL":".","fullURL":"материалы/файлы/pasted-image-20250912214643.html","pathToRoot":"../..","attachments":["материалы/файлы/pasted-image-20250912214643.html"],"createdTime":1757702803142,"modifiedTime":1757702803143,"sourceSize":29457,"sourcePath":"Материалы/Файлы/Pasted image 20250912214643.png","exportPath":"материалы/файлы/pasted-image-20250912214643.html","showInTree":true,"treeOrder":31,"backlinks":["материалы/как-сделать/как-создавать-файлы-с-определённым-расширением.html"],"type":"attachment"},"материалы/файлы/pasted-image-20250912214649.html":{"title":"Pasted image 20250912214649","icon":"","description":"<img src=\"материалы/файлы/pasted-image-20250912214649.png\" target=\"_self\">","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"","coverImageURL":".","fullURL":"материалы/файлы/pasted-image-20250912214649.html","pathToRoot":"../..","attachments":["материалы/файлы/pasted-image-20250912214649.html"],"createdTime":1757702809253,"modifiedTime":1757702809254,"sourceSize":4311,"sourcePath":"Материалы/Файлы/Pasted image 20250912214649.png","exportPath":"материалы/файлы/pasted-image-20250912214649.html","showInTree":true,"treeOrder":32,"backlinks":["материалы/как-сделать/как-создавать-файлы-с-определённым-расширением.html"],"type":"attachment"},"материалы/файлы/pasted-image-20250912214653.html":{"title":"Pasted image 20250912214653","icon":"","description":"<img src=\"материалы/файлы/pasted-image-20250912214653.png\" target=\"_self\">","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"","coverImageURL":".","fullURL":"материалы/файлы/pasted-image-20250912214653.html","pathToRoot":"../..","attachments":["материалы/файлы/pasted-image-20250912214653.html"],"createdTime":1757702813923,"modifiedTime":1757702813924,"sourceSize":3794,"sourcePath":"Материалы/Файлы/Pasted image 20250912214653.png","exportPath":"материалы/файлы/pasted-image-20250912214653.html","showInTree":true,"treeOrder":33,"backlinks":["материалы/как-сделать/как-создавать-файлы-с-определённым-расширением.html"],"type":"attachment"},"материалы/файлы/qrcod_72k5.html":{"title":"qrcod_72k5","icon":"","description":"<img src=\"материалы/файлы/qrcod_72k5.png\" target=\"_self\">","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"","coverImageURL":"материалы/файлы/qrcod_72k5.png","fullURL":"материалы/файлы/qrcod_72k5.html","pathToRoot":"../..","attachments":["материалы/файлы/qrcod_72k5.html"],"createdTime":1757700053755,"modifiedTime":1757700053762,"sourceSize":34656,"sourcePath":"Материалы/Файлы/qrcod_72k5.png","exportPath":"материалы/файлы/qrcod_72k5.html","showInTree":true,"treeOrder":34,"backlinks":["index.html"],"type":"attachment"},"лекции/секция-1.-javascript/тема-№4.-node.js,-примитивные-типы-данных-javascript.html":{"title":"Тема №4. Node.JS, примитивные типы данных JavaScript","icon":"","description":"В этой теме вы познакомитесь с Node.js — средой выполнения JavaScript вне браузера, и углубитесь в изучение примитивных типов данных JavaScript — фундаментальных строительных блоков любого приложения. Вы узнаете, как Node.js расширяет возможности JavaScript для серверной разработки, и научитесь работать с основными типами: числа, строки, логические значения, null, undefined, symbol и bigint. Это знание необходимо для дальнейшего понимания структур данных, функций и работы с API в мобильных приложениях, использующих JavaScript/TypeScript.\n<a data-href=\"Что такое Node.js\" href=\"материалы/подтемы/секция-1.-javascript/что-такое-node.js.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Что такое Node.js</a>\n<br><a data-href=\"Установка и базовое использование Node.js\" href=\"материалы/подтемы/секция-1.-javascript/установка-и-базовое-использование-node.js.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Установка и базовое использование Node.js</a>\n<br><a data-href=\"Примитивные типы данных JavaScript\" href=\"материалы/подтемы/секция-1.-javascript/примитивные-типы-данных-javascript.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Примитивные типы данных JavaScript</a>\n(Пусто)<br><a data-href=\"Тема №5. Операторы и операции в JavaScript\" href=\"лекции/секция-1.-javascript/тема-№5.-операторы-и-операции-в-javascript.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Тема №5. Операторы и операции в JavaScript</a>","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Описание темы","level":2,"id":"Описание_темы_0"},{"heading":"План темы","level":2,"id":"План_темы_0"},{"heading":"Задания связанные с темой","level":2,"id":"Задания_связанные_с_темой_0"},{"heading":"Следующая тема","level":2,"id":"Следующая_тема_0"}],"links":["материалы/подтемы/секция-1.-javascript/что-такое-node.js.html","материалы/подтемы/секция-1.-javascript/установка-и-базовое-использование-node.js.html","материалы/подтемы/секция-1.-javascript/примитивные-типы-данных-javascript.html","лекции/секция-1.-javascript/тема-№5.-операторы-и-операции-в-javascript.html"],"author":"","coverImageURL":"","fullURL":"лекции/секция-1.-javascript/тема-№4.-node.js,-примитивные-типы-данных-javascript.html","pathToRoot":"../..","attachments":[],"createdTime":1758117360807,"modifiedTime":1758131003794,"sourceSize":1315,"sourcePath":"Лекции/Секция 1. JavaScript/Тема №4. Node.JS, примитивные типы данных JavaScript.md","exportPath":"лекции/секция-1.-javascript/тема-№4.-node.js,-примитивные-типы-данных-javascript.html","showInTree":true,"treeOrder":8,"backlinks":["лекции/секция-1.-javascript/тема-№3.-использование-javascript-в-браузере.html"],"type":"markdown"},"лекции/секция-1.-javascript/тема-№5.-операторы-и-операции-в-javascript.html":{"title":"Тема №5. Операторы и операции в JavaScript","icon":"","description":"В этой теме вы изучите основные операторы и операции языка JavaScript, которые позволяют выполнять вычисления, сравнивать значения, управлять логикой программы и изменять данные. Понимание операторов — база для написания условий, циклов и обработки данных в мобильных приложениях. Особое внимание уделено особенностям JavaScript: неявному приведению типов, различиям между строгим и нестрогим сравнением, а также операторам присваивания и распространения.\n<a data-href=\"Определение оператора и операнда\" href=\"материалы/подтемы/секция-1.-javascript/определение-оператора-и-операнда.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Определение оператора и операнда</a>\n<br><a data-href=\"Арифметические операторы JavaScript\" href=\"материалы/подтемы/секция-1.-javascript/арифметические-операторы-javascript.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Арифметические операторы JavaScript</a>\n<br><a data-href=\"Операторы сравнения JavaScript\" href=\"материалы/подтемы/секция-1.-javascript/операторы-сравнения-javascript.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Операторы сравнения JavaScript</a>\n<br><a data-href=\"Логические операторы JavaScript\" href=\"материалы/подтемы/секция-1.-javascript/логические-операторы-javascript.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Логические операторы JavaScript</a>\n<br><a data-href=\"Операторы присваивания JavaScript\" href=\"материалы/подтемы/секция-1.-javascript/операторы-присваивания-javascript.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Операторы присваивания JavaScript</a>\n<br><a data-href=\"Операторы работы с битами\" href=\"материалы/подтемы/секция-1.-javascript/операторы-работы-с-битами.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Операторы работы с битами</a>\n<br><a data-href=\"Приоритет операторов и ассоциативность\" href=\"материалы/подтемы/секция-1.-javascript/приоритет-операторов-и-ассоциативность.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Приоритет операторов и ассоциативность</a>\n(Пусто)<br><a data-href=\"Тема №6. Git, GitHub\" href=\"лекции/секция-1.-javascript/тема-№6.-git,-github.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Тема №6. Git, GitHub</a>","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Описание темы","level":2,"id":"Описание_темы_0"},{"heading":"План темы","level":2,"id":"План_темы_0"},{"heading":"Задания связанные с темой","level":2,"id":"Задания_связанные_с_темой_0"},{"heading":"Следующая тема","level":2,"id":"Следующая_тема_0"}],"links":["материалы/подтемы/секция-1.-javascript/определение-оператора-и-операнда.html","материалы/подтемы/секция-1.-javascript/арифметические-операторы-javascript.html","материалы/подтемы/секция-1.-javascript/операторы-сравнения-javascript.html","материалы/подтемы/секция-1.-javascript/логические-операторы-javascript.html","материалы/подтемы/секция-1.-javascript/операторы-присваивания-javascript.html","материалы/подтемы/секция-1.-javascript/операторы-работы-с-битами.html","материалы/подтемы/секция-1.-javascript/приоритет-операторов-и-ассоциативность.html","лекции/секция-1.-javascript/тема-№6.-git,-github.html"],"author":"","coverImageURL":"","fullURL":"лекции/секция-1.-javascript/тема-№5.-операторы-и-операции-в-javascript.html","pathToRoot":"../..","attachments":[],"createdTime":1758131110815,"modifiedTime":1758304372689,"sourceSize":1455,"sourcePath":"Лекции/Секция 1. JavaScript/Тема №5. Операторы и операции в JavaScript.md","exportPath":"лекции/секция-1.-javascript/тема-№5.-операторы-и-операции-в-javascript.html","showInTree":true,"treeOrder":9,"backlinks":["лекции/секция-1.-javascript/тема-№4.-node.js,-примитивные-типы-данных-javascript.html"],"type":"markdown"},"материалы/подтемы/секция-1.-javascript/арифметические-операторы-javascript.html":{"title":"Арифметические операторы JavaScript","icon":"","description":"Арифметические операторы — это основные инструменты для выполнения математических вычислений в JavaScript. Они работают с числами и возвращают числовые результаты.Пример использования остатка: const isEven = number =&gt; number % 2 === 0;\nconsole.log(isEven(4)); // true\nconsole.log(isEven(7)); // false\nОператор ** возводит первое число в степень, указанную вторым:console.log(2 ** 4); // 16 (2 × 2 × 2 × 2)\nconsole.log(9 ** 0.5); // 3 (квадратный корень из 9)\nЭто удобно для расчётов: например, при вычислении площади квадрата или сложных процентов.Унарный плюс + преобразует значение в число:console.log(+\"42\"); // 42 (строка → число)\nconsole.log(+\"hello\"); // NaN (непреводимая строка)\nconsole.log(+true); // 1\nconsole.log(+false); // 0\nУнарный минус - меняет знак числа:console.log(-5); // -5\nconsole.log(-(3 + 2)); // -5\nconsole.log(-\"10\"); // -10 (сначала приведение к числу, потом отрицание)\nИнкремент ++ увеличивает значение на 1, декремент -- уменьшает на 1.Различают две формы:Сначала изменяет значение, потом возвращает его:let a = 5;\nconsole.log(++a); // 6 — сначала прибавили, потом вернули\nconsole.log(a); // 6\nСначала возвращает текущее значение, потом изменяет:let b = 5;\nconsole.log(b++); // 5 — вернули старое значение\nconsole.log(b); // 6 — теперь уже увеличено 💡 Важно: в циклах и выражениях разница между i++ и ++i может привести к ошибкам, если не учитывать порядок.\nJavaScript имеет специальные числовые значения, которые появляются при некорректных операциях.Появляется, когда операция не может быть выполнена:console.log(0 / 0); // NaN\nconsole.log(\"abc\" * 2); // NaN\nconsole.log(NaN + 5); // NaN\nconsole.log(NaN === NaN); // false — важно! NaN не равен самому себе\nДля проверки на NaN используйте Number.isNaN():console.log(Number.isNaN(NaN)); // true\nconsole.log(Number.isNaN(\"hello\")); // false\nПолучается при делении на ноль или при переполнении:console.log(1 / 0); // Infinity\nconsole.log(-1 / 0); // -Infinity\nconsole.log(Number.MAX_VALUE * 2); // Infinity console.log(Infinity + 1); // Infinity\nconsole.log(Infinity - Infinity); // NaN ⚠️ Не используйте == Infinity для проверки — лучше применять isFinite(): console.log(isFinite(1000)); // true\nconsole.log(isFinite(Infinity)); // false ","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Основные арифметические операторы","level":3,"id":"Основные_арифметические_операторы_0"},{"heading":"Возведение в степень","level":3,"id":"Возведение_в_степень_0"},{"heading":"Унарный плюс и минус","level":3,"id":"Унарный_плюс_и_минус_0"},{"heading":"Инкремент и декремент","level":3,"id":"Инкремент_и_декремент_0"},{"heading":"Префиксная форма (<code>++x</code>, <code>--x</code>)","level":4,"id":"Префиксная_форма_(`++x`,_`--x`)_0"},{"heading":"Постфиксная форма (<code>x++</code>, <code>x--</code>)","level":4,"id":"Постфиксная_форма_(`x++`,_`x--`)_0"},{"heading":"Особенности: NaN и Infinity","level":3,"id":"Особенности_NaN_и_Infinity_0"},{"heading":"<code>NaN</code> — Not a Number","level":4,"id":"`NaN`_—_Not_a_Number_0"},{"heading":"<code>Infinity</code> — бесконечность","level":4,"id":"`Infinity`_—_бесконечность_0"}],"links":[],"author":"","coverImageURL":"","fullURL":"материалы/подтемы/секция-1.-javascript/арифметические-операторы-javascript.html","pathToRoot":"../../..","attachments":[],"createdTime":1758133255521,"modifiedTime":1758133557709,"sourceSize":4417,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Арифметические операторы JavaScript.md","exportPath":"материалы/подтемы/секция-1.-javascript/арифметические-операторы-javascript.html","showInTree":true,"treeOrder":15,"backlinks":["лекции/секция-1.-javascript/тема-№5.-операторы-и-операции-в-javascript.html"],"type":"markdown"},"материалы/подтемы/секция-1.-javascript/логические-операторы-javascript.html":{"title":"Логические операторы JavaScript","icon":"","description":"Логические операторы — &amp;&amp; (И), || (ИЛИ) и ! (НЕ) — позволяют комбинировать и инвертировать логические значения. В JavaScript они работают не только с true и false, но и с любыми значениями, благодаря особенностям приведения типов и механизму короткого замыкания.Возвращает true, если оба операнда истинны.\nНо в JavaScript он возвращает не булево значение, а один из операндов — первый ложный или последний истинный.console.log(true &amp;&amp; true); // true\nconsole.log(true &amp;&amp; false); // false\nconsole.log(5 &amp;&amp; \"hello\"); // \"hello\" — оба истинны, возвращён второй\nconsole.log(0 &amp;&amp; \"test\"); // 0 — первый ложный, возвращён он же\nconsole.log(\"\" &amp;&amp; null); // \"\" — первый ложный\nЕсли первый операнд — ложный, второй не вычисляется.function log() { console.log(\"Эта функция не вызовется\"); return true;\n} console.log(false &amp;&amp; log()); // false — функция log() НЕ была вызвана ✅ Это полезно для безопасного доступа к свойствам объектов:\nconst user = { profile: { name: \"Alice\" } }; // Безопасно: если user или user.profile отсутствуют — не будет ошибки\nconsole.log(user &amp;&amp; user.profile &amp;&amp; user.profile.name); // \"Alice\" // Если бы user был undefined — выражение остановилось бы на первом шаге\nВозвращает первый истинный операнд, или последний, если все ложные.console.log(true || false); // true\nconsole.log(false || \"world\"); // \"world\"\nconsole.log(0 || null || 5 || 10); // 5 — первый истинный\nconsole.log(\"\" || 0 || false); // false — все ложные, возвращён последний\nЕсли первый операнд — истинный, второй не вычисляется.function log() { console.log(\"Эта функция вызовется только если нужно\"); return \"result\";\n} console.log(true || log()); // true — функция log() НЕ вызвана\nfunction greet(name) { name = name || \"Гость\"; // если name пустой/ложный — использовать \"Гость\" console.log(`Привет, ${name}!`);\n} greet(); // \"Привет, Гость!\"\ngreet(\"\"); // \"Привет, Гость!\"\ngreet(null); // \"Привет, Гость!\"\ngreet(\"Анна\"); // \"Привет, Анна!\"\ngreet(0); // \"Привет, Гость!\" — осторожно! ⚠️ Внимание: 0, \"\", null, undefined, NaN — всё это ложные значения.\nЕсли вы ожидаете 0 как валидный ввод — такой подход сломается.\nfunction greet(name) { name = name ?? \"Гость\"; // только null или undefined → заменяются console.log(`Привет, ${name}!`);\n} greet(0); // \"Привет, 0!\" — правильно!\ngreet(undefined); // \"Привет, Гость!\" ✅ Рекомендация: в современных приложениях используйте ?? вместо || для установки значений по умолчанию, если вам важно отличать 0, false, \"\" от null/undefined.\nИнвертирует значение операнда. Возвращает булево значение (true или false).console.log(!true); // false\nconsole.log(!false); // true\nconsole.log(!\"hello\"); // false — строка истинна\nconsole.log(!0); // true — 0 ложен\nconsole.log(!{}); // false — объект истинен\nconsole.log(!!\"text\"); // true — двойное отрицание приводит к булеву значению\nconst isEmpty = !array.length; // true, если массив пуст\nconst hasUser = !!user; // true, если user существует и не null/undefined ✅ Двойное отрицание !!value — популярный способ явно преобразовать любое значение в булево.\nПриоритет (с высшего к низшему):\n! — НЕ (наиболее высокий)\n&amp;&amp; — И\n|| — ИЛИ (наименьший)\nconsole.log(true || false &amp;&amp; false); // true\n// Эквивалентно: true || (false &amp;&amp; false) → true || false → true\nЧтобы избежать путаницы — всегда используйте скобки:console.log((true || false) &amp;&amp; false); // false\n(Больше про приоритет операторов будет в этой же теме)","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Оператор <code>&amp;&amp;</code> — Логическое И","level":3,"id":"Оператор_`&&`_—_Логическое_И_0"},{"heading":"Примеры:","level":4,"id":"Примеры_0"},{"heading":"Короткое замыкание:","level":4,"id":"Короткое_замыкание_0"},{"heading":"Оператор <code>||</code> — Логическое ИЛИ","level":3,"id":"Оператор_`||`_—_Логическое_ИЛИ_0"},{"heading":"Примеры:","level":4,"id":"Примеры_1"},{"heading":"Короткое замыкание:","level":4,"id":"Короткое_замыкание_1"},{"heading":"💡 Ключевое применение: установка значений по умолчанию","level":4,"id":"💡_Ключевое_применение_установка_значений_по_умолчанию_0"},{"heading":"Лучшая практика: используйте <strong>оператор нулевого слияния</strong> <code>??</code> (если поддерживается):","level":4,"id":"Лучшая_практика_используйте_**оператор_нулевого_слияния**_`??`_(если_поддерживается)_0"},{"heading":"Оператор <code>!</code> — Логическое НЕ","level":3,"id":"Оператор_`!`_—_Логическое_НЕ_0"},{"heading":"Примеры:","level":4,"id":"Примеры_2"},{"heading":"Полезное применение: приведение к булеву типу","level":4,"id":"Полезное_применение_приведение_к_булеву_типу_0"},{"heading":"Приоритет операторов","level":3,"id":"Приоритет_операторов_0"},{"heading":"Пример:","level":4,"id":"Пример_0"}],"links":[],"author":"","coverImageURL":"","fullURL":"материалы/подтемы/секция-1.-javascript/логические-операторы-javascript.html","pathToRoot":"../../..","attachments":[],"createdTime":1758133629633,"modifiedTime":1758134149139,"sourceSize":6159,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Логические операторы JavaScript.md","exportPath":"материалы/подтемы/секция-1.-javascript/логические-операторы-javascript.html","showInTree":true,"treeOrder":18,"backlinks":["лекции/секция-1.-javascript/тема-№5.-операторы-и-операции-в-javascript.html"],"type":"markdown"},"материалы/подтемы/секция-1.-javascript/операторы-присваивания-javascript.html":{"title":"Операторы присваивания JavaScript","icon":"","description":"Операторы присваивания используются для записи значений в переменные. В JavaScript они делятся на базовые и составные, а также включают современные операторы, упрощающие работу с потенциально отсутствующими данными.Присваивает значение справа переменной слева.let count = 0;\nlet message = \"Привет\";\nlet isActive = true; Это единственный оператор, который создаёт переменную при первом использовании в глобальной области видимости (если не используется let/const — не рекомендуется).\nСокращённая форма операций, где значение переменной изменяется и сразу присваивается обратно.let score = 100; score += 25; // 125\nscore *= 2; // 250\nscore -= 50; // 200\nscore %= 60; // 20 (остаток от 200 ÷ 60)\nscore **= 2; // 400 (20²) console.log(score); // 400 ✅ Преимущество: короче, читаемее, немного эффективнее — особенно полезны в циклах и обработке данных.\nПрисваивает значение только если левый операнд равен null или undefined.let userLanguage = null;\nuserLanguage ??= \"en\"; // теперь userLanguage = \"en\" let userName = \"\";\nuserName ??= \"Аноним\"; // останется \"\", потому что \"\" ≠ null/undefined let settings = { theme: undefined };\nsettings.theme ??= \"dark\"; // theme станет \"dark\" console.log(settings.theme); // \"dark\" 💡 Отличие от =: ??= не перезаписывает существующие значения, даже если они ложные (0, \"\", false).\nЭто делает его идеальным для установки значений по умолчанию в конфигурациях, настройках, API-ответах.\nlet theme = localStorage.getItem(\"theme\");\ntheme ??= \"light\"; // если не задано — использовать светлую тему let fontSize = localStorage.getItem(\"fontSize\");\nfontSize ??= 16; // если не задано — 16px console.log({ theme, fontSize });\nПрисваивает значение только если предшествующая цепочка существует (не null/undefined).let user = { profile: { name: \"Иван\" } }; // Попытка присвоить значение только если user.profile существует\nuser.profile?.name ??= \"Гость\"; // НЕ сработает — это не присваивание через ?.\nuser.profile?.age ??= 25; // НЕ сработает — age не существует, но ?. не создаёт свойства // А вот так:\nuser.profile?.age = 25; // ❌ Ошибка: нельзя присвоить, если user.profile не существует\nНа самом деле, ?.= — это оператор присваивания, а не объединения. Он работает следующим образом:let obj = {}; obj?.prop = 10; // ❌ ОШИБКА — SyntaxError: Invalid left-hand side expression // Правильно — только если объект существует:\nlet config = { settings: {} };\nconfig.settings?.debug = true; // ✅ Работает — config.settings существует console.log(config.settings.debug); // true // Если объект отсутствует — ничего не происходит:\nlet data = null;\ndata?.value = \"test\"; // Ничего не произойдёт — ошибки нет\nconsole.log(data); // null ⚠️ Важно: ?.= не создаёт свойства — он лишь пропускает присваивание, если левая часть null/undefined.\nОн применяется только к существующим объектам и их вложенным свойствам.\nfunction updateUser(user, newSettings) { user?.profile?.name = newSettings.name; user?.profile?.email = newSettings.email; user?.preferences?.theme = newSettings.theme;\n} updateUser(null, { name: \"Анна\" }); // Ничего не сломается\nupdateUser({ profile: {} }, { name: \"Анна\" }); // profile.name = \"Анна\" — сработает ✅ Идеально подходит для работы с API-ответами, где структура может быть неполной. Не используйте ?.= для создания новых свойств в null/undefined объектах — это невозможно.\nНе путайте ??= и ?.=: ??= — присваивает, если значение null/undefined ?.= — присваивает, только если путь существует ","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Базовый оператор присваивания: <code>=</code>","level":3,"id":"Базовый_оператор_присваивания_`=`_0"},{"heading":"Составные операторы присваивания","level":3,"id":"Составные_операторы_присваивания_0"},{"heading":"Примеры:","level":4,"id":"Примеры_0"},{"heading":"Оператор объединения с присваиванием: <code>??=</code>","level":3,"id":"Оператор_объединения_с_присваиванием_`??=`_0"},{"heading":"Практический пример: загрузка настроек из локального хранилища","level":4,"id":"Практический_пример_загрузка_настроек_из_локального_хранилища_0"},{"heading":"Оператор присваивания с опциональной цепочкой: <code>?.=</code>","level":3,"id":"Оператор_присваивания_с_опциональной_цепочкой_`?.=`_0"},{"heading":"Полезный кейс: безопасное обновление вложенных данных","level":4,"id":"Полезный_кейс_безопасное_обновление_вложенных_данных_0"},{"heading":"Что нельзя делать","level":3,"id":"Что_нельзя_делать_0"}],"links":[],"author":"","coverImageURL":"","fullURL":"материалы/подтемы/секция-1.-javascript/операторы-присваивания-javascript.html","pathToRoot":"../../..","attachments":[],"createdTime":1758133794357,"modifiedTime":1758134496353,"sourceSize":6443,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Операторы присваивания JavaScript.md","exportPath":"материалы/подтемы/секция-1.-javascript/операторы-присваивания-javascript.html","showInTree":true,"treeOrder":19,"backlinks":["лекции/секция-1.-javascript/тема-№5.-операторы-и-операции-в-javascript.html"],"type":"markdown"},"материалы/подтемы/секция-1.-javascript/операторы-работы-с-битами.html":{"title":"Операторы работы с битами","icon":"","description":"Операторы работы с битами выполняют операции на уровне отдельных битов целочисленных значений. В мобильной разработке они встречаются редко, но могут быть полезны при оптимизации хранения флагов, работе с сетевыми протоколами, обработке изображений или взаимодействии с нативными модулями.Все битовые операции в JavaScript работают с 32-битными целыми числами. Любые числа перед операцией приводятся к этому формату (дробные части отбрасываются).Часто используется для хранения нескольких булевых состояний в одном числе.const READ = 1; // 0001\nconst WRITE = 2; // 0010\nconst EXEC = 4; // 0100\nconst DELETE = 8; // 1000 let permissions = READ | WRITE | EXEC; // 0111 = 7 // Проверяем, есть ли право на чтение:\nif (permissions &amp; READ) { console.log(\"Можно читать\"); // выполнится\n} // Проверяем, есть ли право на удаление:\nif (permissions &amp; DELETE) { console.log(\"Можно удалять\"); // не выполнится\n} ✅ Экономит память и ускоряет проверки в низкоуровневых сценариях — например, при передаче прав доступа через API или хранении настроек в локальном хранилище.\nОбъединяет несколько флагов в одно значение:let flags = 0;\nflags |= READ; // 0001\nflags |= WRITE; // 0011\nflags |= EXEC; // 0111 console.log(flags); // 7\nИспользуется для инвертирования конкретного флага:let theme = 0; // 0 — светлая, 1 — тёмная\ntheme ^= 1; // теперь theme = 1\ntheme ^= 1; // теперь theme = 0\nТакже применяется в алгоритмах шифрования или генерации контрольных сумм.Применяется для преобразования чисел и часто встречается в сочетании с indexOf:const arr = [\"apple\", \"banana\", \"cherry\"];\nconst index = arr.indexOf(\"banana\"); if (~index) { // эквивалентно: if (index !== -1) console.log(\"Найдено\");\n} ❗ Устаревший стиль. Современный код предпочтительно пишет так:\nif (index !== -1) — более читаемо и понятно.\nconsole.log(5 &lt;&lt; 1); // 10 → 5 * 2¹\nconsole.log(5 &lt;&lt; 2); // 20 → 5 * 2²\nconsole.log(1 &lt;&lt; 3); // 8 → 2³ ⚠️ Работает только с целыми числами. Не заменяет Math.pow() для дробных степеней.\nПолезно при оптимизации вычислений в играх, графических движках или обработке сигналов.console.log(8 &gt;&gt; 1); // 4 → 8 / 2\nconsole.log(-8 &gt;&gt; 1); // -4 — знак сохранён\nСохраняет знак числа — подходит для целочисленного деления на 2, 4, 8 и т.д.Преобразует отрицательные числа в большие положительные:console.log(-8 &gt;&gt;&gt; 1); // 2147483644 — интерпретируется как беззнаковое число Используется редко — в основном при работе с бинарными данными (например, Uint32Array, WebAssembly). Хранение флагов в одной переменной: например, права пользователя, состояние UI-элемента, режимы приложения.\nОптимизация производительности: в низкоуровневых системах (игры, аудио/видео обработка).\nРабота с нативными модулями: когда приложение использует JNI (Android) или Objective-C/Swift-код, где данные передаются как битовые маски.\nКомпрессия данных: при отправке маленьких наборов булевых значений через API.\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Основные битовые операторы","level":3,"id":"Основные_битовые_операторы_0"},{"heading":"Примеры использования","level":3,"id":"Примеры_использования_0"},{"heading":"Побитовое И (<code>&amp;</code>) — проверка флагов","level":4,"id":"Побитовое_И_(`&`)_—_проверка_флагов_0"},{"heading":"Побитовое ИЛИ (<code>|</code>) — установка флагов","level":4,"id":"Побитовое_ИЛИ_(`|`)_—_установка_флагов_0"},{"heading":"Побитовое исключающее ИЛИ (<code>^</code>) — переключение флага","level":4,"id":"Побитовое_исключающее_ИЛИ_(`^`)_—_переключение_флага_0"},{"heading":"Побитовое НЕ (<code>~</code>) — инверсия битов","level":4,"id":"Побитовое_НЕ_(`~`)_—_инверсия_битов_0"},{"heading":"Сдвиг влево (<code>&lt;&lt;</code>) — умножение на степени двойки","level":4,"id":"Сдвиг_влево_(`<<`)_—_умножение_на_степени_двойки_0"},{"heading":"Арифметический сдвиг вправо (<code>&gt;&gt;</code>) — деление на степени двойки (со знаком)","level":4,"id":"Арифметический_сдвиг_вправо_(`>>`)_—_деление_на_степени_двойки_(со_знаком)_0"},{"heading":"Логический сдвиг вправо (<code>&gt;&gt;&gt;</code>) — деление на степени двойки (без знака)","level":4,"id":"Логический_сдвиг_вправо_(`>>>`)_—_деление_на_степени_двойки_(без_знака)_0"},{"heading":"Где это может пригодиться в мобильной разработке?","level":3,"id":"Где_это_может_пригодиться_в_мобильной_разработке?_0"}],"links":[],"author":"","coverImageURL":"","fullURL":"материалы/подтемы/секция-1.-javascript/операторы-работы-с-битами.html","pathToRoot":"../../..","attachments":[],"createdTime":1758134735377,"modifiedTime":1758135009581,"sourceSize":7214,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Операторы работы с битами.md","exportPath":"материалы/подтемы/секция-1.-javascript/операторы-работы-с-битами.html","showInTree":true,"treeOrder":20,"backlinks":["лекции/секция-1.-javascript/тема-№5.-операторы-и-операции-в-javascript.html"],"type":"markdown"},"материалы/подтемы/секция-1.-javascript/операторы-сравнения-javascript.html":{"title":"Операторы сравнения JavaScript","icon":"","description":"Операторы сравнения позволяют проверять отношения между значениями и возвращают логическое значение — true или false. В JavaScript важно понимать разницу между нестрогим и строгим сравнением, а также то, как язык приводит типы автоматически.Операторы == (равно) и != (не равно) выполняют приведение типов перед сравнением. Это означает, что JavaScript пытается преобразовать операнды к одному типу, чтобы сделать сравнение возможным.console.log(5 == \"5\"); // true — строка \"5\" приводится к числу 5\nconsole.log(true == 1); // true — true приводится к 1\nconsole.log(false == 0); // true — false приводится к 0\nconsole.log(\"\" == 0); // true — пустая строка приводится к 0\nconsole.log(null == undefined); // true — особое правило: null и undefined равны друг другу\nconsole.log(\"0\" == false); // true — \"0\" → 0, false → 0 → 0 == 0\nconsole.log([] == false); // true — пустой массив → \"\" → 0 → false → 0\nТакие поведения могут привести к скрытым багам, особенно при обработке пользовательского ввода или данных из API.\n✅ Правило: Избегайте == и != в production-коде.\nОператоры === (строго равно) и !== (строго не равно) не выполняют приведение типов. Сравниваются и значение, и тип.console.log(5 === \"5\"); // false — разные типы: число и строка\nconsole.log(true === 1); // false — boolean и number\nconsole.log(5 === 5); // true — одинаковые тип и значение\nconsole.log(null === undefined); // false — разные типы\nconsole.log(\"\" === 0); // false — строка не равна числу\nВсегда используйте === и !==, если вам нужно точное совпадение.// Хорошо\nif (userInput === \"yes\") { ... } // Плохо\nif (userInput == \"yes\") { ... } // Может сработать на 1, true, \"1\"\nЭти операторы сравнивают значения по величине. При сравнении разных типов JavaScript также применяет приведение, но по другим правилам.console.log(10 &gt; 5); // true\nconsole.log(3 &lt;= 3); // true\nСтроки сравниваются по символам, в лексикографическом порядке (как в словаре):console.log(\"apple\" &lt; \"banana\"); // true — 'a' &lt; 'b'\nconsole.log(\"Z\" &lt; \"a\"); // true — в ASCII 'Z' (90) &lt; 'a' (97)\nconsole.log(\"10\" &lt; \"2\"); // true — потому что \"1\" &lt; \"2\", сравнение по первому символу! ❗ Важно: \"10\" &lt; \"2\" даёт true, хотя числово 10 &gt; 2.\nЭто частая ошибка при сравнении строковых чисел.\nПриведите их к числу:console.log(Number(\"10\") &lt; Number(\"2\")); // false\n// или проще:\nconsole.log(+ \"10\" &lt; + \"2\"); // false\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Нестрогое сравнение: <code>==</code> и <code>!=</code>","level":3,"id":"Нестрогое_сравнение_`==`_и_`!=`_0"},{"heading":"Примеры:","level":4,"id":"Примеры_0"},{"heading":"Почему это проблема?","level":4,"id":"Почему_это_проблема?_0"},{"heading":"Строгое сравнение: <code>===</code> и <code>!==</code>","level":3,"id":"Строгое_сравнение_`===`_и_`!==`_0"},{"heading":"Примеры:","level":4,"id":"Примеры_1"},{"heading":"Рекомендация:","level":4,"id":"Рекомендация_0"},{"heading":"Операторы больше/меньше: <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code>","level":3,"id":"Операторы_больше/меньше_`>`,_`<`,_`>=`,_`<=`_0"},{"heading":"Сравнение чисел:","level":4,"id":"Сравнение_чисел_0"},{"heading":"Сравнение строк:","level":4,"id":"Сравнение_строк_0"},{"heading":"Как правильно сравнивать числа, представленные как строки?","level":4,"id":"Как_правильно_сравнивать_числа,_представленные_как_строки?_0"},{"heading":"Примеры неожиданного поведения и как их избегать","level":3,"id":"Примеры_неожиданного_поведения_и_как_их_избегать_0"}],"links":[],"author":"","coverImageURL":"","fullURL":"материалы/подтемы/секция-1.-javascript/операторы-сравнения-javascript.html","pathToRoot":"../../..","attachments":[],"createdTime":1758134164670,"modifiedTime":1758134167288,"sourceSize":5077,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Операторы сравнения JavaScript.md","exportPath":"материалы/подтемы/секция-1.-javascript/операторы-сравнения-javascript.html","showInTree":true,"treeOrder":21,"backlinks":["лекции/секция-1.-javascript/тема-№5.-операторы-и-операции-в-javascript.html"],"type":"markdown"},"материалы/подтемы/секция-1.-javascript/определение-оператора-и-операнда.html":{"title":"Определение оператора и операнда","icon":"","description":"Оператор — это символ или ключевое слово, которое выполняет определённое действие над данными.Операнд — это значение или переменная, над которой применяется оператор.Операторы классифицируются по количеству операндов, с которыми они работают:\nУнарные операторы используют один операнд — например, отрицание !x или инкремент ++i.\nБинарные операторы работают с двумя операндами — например, сложение a + b или сравнение x &gt; y.\nТернарный оператор использует три операнда — единственный в JavaScript: условное выражение condition ? value1 : value2 (про него подробнее будет в следующей теме).","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"","coverImageURL":"","fullURL":"материалы/подтемы/секция-1.-javascript/определение-оператора-и-операнда.html","pathToRoot":"../../..","attachments":[],"createdTime":1758133057108,"modifiedTime":1758133320930,"sourceSize":1060,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Определение оператора и операнда.md","exportPath":"материалы/подтемы/секция-1.-javascript/определение-оператора-и-операнда.html","showInTree":true,"treeOrder":22,"backlinks":["лекции/секция-1.-javascript/тема-№5.-операторы-и-операции-в-javascript.html"],"type":"markdown"},"материалы/подтемы/секция-1.-javascript/примитивные-типы-данных-javascript.html":{"title":"Примитивные типы данных JavaScript","icon":"","description":"Примитивные типы данных — это базовые, неструктурированные значения в JavaScript, которые не содержат свойств или методов сами по себе и не могут быть изменены после создания. Главная особенность примитивов — они передаются по значению: при присваивании или передаче в функцию копируется само значение, а не ссылка на него. Это означает, что если вы присвоите примитивную переменную другой переменной и измените одну из них — другая останется неизменной. Примитивы также не имеют внутреннего состояния — их нельзя расширить, добавить свойства или переопределить. Они являются фундаментом для всех операций в JavaScript и лежат в основе хранения и обработки любых данных — от чисел в расчётах до текста в интерфейсе мобильного приложения.В JavaScript все числа — это числа с плавающей запятой по стандарту IEEE 754. Это значит, что даже целые числа хранятся как дробные, и из-за особенностей двоичного представления могут возникать небольшие погрешности при вычислениях (например, 0.1 + 0.2 !== 0.3). JavaScript не разделяет целые и вещественные числа — всё объединено в один тип number. Поддерживаются положительные, отрицательные, ноль, а также специальные значения Infinity, -Infinity и NaN (Not a Number).Строка в JavaScript — это последовательность символов, заключённая в одинарные ('), двойные (\") или обратные кавычки (`). Обратные кавычки позволяют использовать шаблонные строки — вставлять переменные через ${} и писать многострочный текст без экранирования. Например: `Привет, ${name}!`. Строки неизменяемы — любое изменение создаёт новую строку, а не модифицирует существующую.Логический тип представляет два возможных значения: true и false. Используется для условий, сравнений, флагов состояний (например, загружено ли приложение, авторизован ли пользователь). В JavaScript есть понятие «ложных» и «истинных» значений — например, 0, \"\", null, undefined воспринимаются как false в булевом контексте, но сами по себе они не являются boolean.null — это специальное значение, которое программист присваивает намеренно, чтобы указать: «здесь ничего нет». Это не ошибка и не неопределённость — это осознанное обозначение отсутствия данных. Например, если пользователь не выбрал аватар, можно установить avatarUrl: null. Несмотря на поведение typeof null === 'object' (историческая ошибка языка), null — это примитив.undefined означает, что переменная была объявлена, но ей ещё не присвоено значение. Это автоматическое состояние, которое присваивается переменной при объявлении через let или const без инициализации. Также возвращается, если функция не возвращает значение, или свойство объекта не существует. Отличие от null: undefined — это результат отсутствия действия, а null — результат преднамеренного действия.<img alt=\"Pasted image 20240923235323.png\" src=\"материалы/файлы/pasted-image-20240923235323.png\" target=\"_self\">Symbol — это новый примитивный тип, появившийся в ES6, предназначенный для создания уникальных ключей свойств объектов. Каждый символ, созданный через Symbol(), гарантированно уникален, даже если у них одинаковое описание. Используется редко в базовой разработке, но важен для внутренней работы библиотек и предотвращения коллизий имён свойств. Не нужно запоминать детали — достаточно знать, что он существует и используется для скрытия и защиты ключей.bigint — это тип для работы с целыми числами, превышающими предел Number.MAX_SAFE_INTEGER (около 9 квадриллионов). Чтобы создать bigint, нужно добавить букву n в конец числа: 123456789012345678901234567890n. Он нужен для точных расчётов — например, при работе с финансовыми данными, хешами, криптографией или большими идентификаторами. С bigint нельзя выполнять операции с обычными числами — требуется явное приведение.Оператор typeof в JavaScript используется для определения типа значения на момент выполнения. Он возвращает строку с названием типа данных. Это важный инструмент для отладки, валидации входных данных и безопасной работы с переменными, особенно когда тип неизвестен заранее — например, при получении данных из API или пользовательского ввода.typeof 42; // \"number\"\ntypeof 3.14; // \"number\"\ntypeof -0; // \"number\"\ntypeof Infinity; // \"number\"\ntypeof NaN; // \"number\" typeof \"Привет\"; // \"string\"\ntypeof ''; // \"string\"\ntypeof `Шаблон ${1 + 2}`; // \"string\" typeof true; // \"boolean\"\ntypeof false; // \"boolean\" typeof null; // \"object\" — историческая ошибка языка typeof undefined; // \"undefined\" typeof Symbol('id'); // \"symbol\" typeof 12345678901234567890n; // \"bigint\" typeof function() {}; // \"function\" typeof {}; // \"object\"\ntypeof []; // \"object\" — массивы тоже объекты typeof null возвращает \"object\" — это известная ошибка в спецификации JavaScript, которая осталась ради совместимости.\ntypeof всегда возвращает строку, даже если значение не существует (например, typeof undeclaredVariable вернёт \"undefined\" без ошибки).\nДля проверки массивов или объектов typeof недостаточен — лучше использовать Array.isArray() или instanceof.\nПри работе с JSON-ответами API часто приходят данные неизвестного типа. Например, поле userId может быть числом или строкой. Перед использованием его стоит проверить:if (typeof userId === 'string') { // обработать как строку\n} else if (typeof userId === 'number') { // обработать как число\n}\nПреобразование типов — это процесс изменения значения одного типа данных в другой. В JavaScript, как в языке с динамической типизацией, это происходит постоянно — иногда намеренно, а иногда автоматически, что может приводить к неожиданным результатам. Различают два вида преобразований: явное (когда разработчик сам управляет процессом) и неявное (когда язык делает это автоматически на основе контекста).Явное преобразование — это когда разработчик сознательно и намеренно превращает значение из одного типа в другой с помощью специальных функций или операторов. Это безопасный и предсказуемый способ, который рекомендуется использовать в production-коде.// Число → строка\nString(42); // \"42\"\n(42).toString(); // \"42\"\n42 + \"\"; // \"42\" — это уже неявное, но можно использовать и явно // Строка → число\nNumber(\"123\"); // 123\nNumber(\"3.14\"); // 3.14\nNumber(\"abc\"); // NaN — некорректная строка\nparseInt(\"42px\"); // 42 — преобразует до первого нецифрового символа\nparseFloat(\"3.14abc\"); // 3.14 // Строка → булево\nBoolean(\"hello\"); // true\nBoolean(\"\"); // false — пустая строка — ложь\nBoolean(\"0\"); // true — любая непустая строка — истина, даже \"false\" // Число → булево\nBoolean(0); // false\nBoolean(-1); // true\nBoolean(1); // true\nBoolean(NaN); // false\nBoolean(Infinity); // true // Любое значение → булево через двойное отрицание\n!!\"text\"; // true\n!!0; // false\n!!null; // false // Объект → строка\nString({}); // \"[object Object]\"\nJSON.stringify({}); // \"{}\" — для структурированного представления При получении данных из формы (input.value всегда строка).\nПри работе с API, где типы могут быть неточными.\nПри необходимости гарантировать поведение — например, чтобы +\"5\" не вызывало путаницы.\nВ тестах и валидации входных данных. ✅ Правило: Если вы не уверены в типе — приведите его явно. Это делает код понятнее и надёжнее.\nНеявное преобразование — это когда JavaScript автоматически меняет тип значения, чтобы выполнить операцию. Оно происходит при использовании операторов +, -, *, /, ==, if(), while() и других в контекстах, требующих другого типа. Это мощный механизм, но он часто вызывает ошибки у новичков, потому что поведение не всегда очевидно.Если хотя бы один операнд — строка, то оба приводятся к строке:\"5\" + 3; // \"53\" — строка + число → конкатенация\n5 + \"3\"; // \"53\"\n\"Привет\" + 123; // \"Привет123\"\ntrue + \"!\" // \"true!\"\nЕсли оба операнда — числа — выполняется математическое сложение:5 + 3; // 8\n0.1 + 0.2; // 0.30000000000000004 — особенность IEEE 754\nМатематическое сложение так-же происходит если среди операндов нет строк, в таком случае операнды преобразуются в числа:5 + true; // 6 = 5 + 1\nfalse + Infinity; // Infinity - что тоже является числом // 0 + бесконечность\nЭти операторы всегда пытаются привести операнды к числам:\"5\" - \"3\"; // 2 — строки превратились в числа\n\"10\" * \"2\"; // 20\n\"15\" / \"3\"; // 5\n\"abc\" - 1; // NaN — нельзя преобразовать \"abc\" в число\ntrue - 1; // 0 — true → 1\nfalse * 5; // 0 — false → 0\nОператор == выполняет неявное приведение типов перед сравнением — это главный источник ошибок:\"\" == 0; // true — пустая строка → 0\n\"0\" == 0; // true — \"0\" → 0\nfalse == 0; // true — false → 0\nnull == undefined;// true — особое правило: они равны друг другу\n0 == false; // true — false → 0\n\"1\" == true; // true — \"1\" → 1, true → 1\n[] == 0; // true — пустой массив → \"\" → 0\n[1] == 1; // true — [1] → \"1\" → 1\n[1,2] == \"1,2\"; // true — массив → строка \"1,2\"\n{} == \"[object Object]\"; // false — объекты сравниваются по ссылке, но при приведении к строке — да, но тут логика сложнее ⚠️ Важно: null == undefined — единственное исключение, где два разных примитива считаются равными.\nЛюбое значение приводится к булевому типу:if (\"0\") { console.log(\"Это правда!\"); } // сработает — непустая строка → true\nif (0) { console.log(\"Не сработает\"); } // не сработает — 0 → false\nif ([]) { console.log(\"Это правда!\"); } // сработает — массив → true\nif ({}) { console.log(\"Это правда!\"); } // сработает — объект → true\nif (null) { console.log(\"Не сработает\"); } // не сработает — null → false\nif (undefined) { console.log(\"Не сработает\"); } // не сработает 📌 Эти 6 значений называются falsy — всё остальное — truthy.\n// Начинающий разработчик ожидает:\n\"5\" == 5; // true — логично?\n\"5\" === 5; // false — теперь понятно! // А вот так:\n[] == ![]; // true — почему?\n// Разбор:\n// ![] → false (пустой массив → true → отрицание → false)\n// [] == false → \"\" == false → 0 == 0 → true // Или:\n\" \\t\\n\" == 0; // true — строка с пробелами → пустая после trim → 0\nТакие случаи ведут к багам, которые сложно отследить. Особенно в мобильных приложениях, где данные приходят из сети и могут быть неожиданного типа.","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Типы:","level":2,"id":"Типы_0"},{"heading":"<code>number</code> — целые и дробные числа, особенности представления (IEEE 754)","level":3,"id":"`number`_—_целые_и_дробные_числа,_особенности_представления_(IEEE_754)_0"},{"heading":"<code>string</code> — последовательность символов, кавычки, шаблонные строки","level":3,"id":"`string`_—_последовательность_символов,_кавычки,_шаблонные_строки_0"},{"heading":"<code>boolean</code> — <code>true</code> / <code>false</code>","level":3,"id":"`boolean`_—_`true`_/_`false`_0"},{"heading":"<code>null</code> — явное отсутствие значения","level":3,"id":"`null`_—_явное_отсутствие_значения_0"},{"heading":"<code>undefined</code> — неинициализированная переменная","level":3,"id":"`undefined`_—_неинициализированная_переменная_0"},{"heading":"<code>symbol</code> — уникальный идентификатор","level":3,"id":"`symbol`_—_уникальный_идентификатор_0"},{"heading":"<code>bigint</code> — произвольной точности целые числа","level":3,"id":"`bigint`_—_произвольной_точности_целые_числа_0"},{"heading":"Определение типа: <code>typeof</code>","level":2,"id":"Определение_типа_`typeof`_0"},{"heading":"Примеры использования <code>typeof</code>:","level":3,"id":"Примеры_использования_`typeof`_0"},{"heading":"Важные особенности:","level":3,"id":"Важные_особенности_0"},{"heading":"Пример практического применения:","level":3,"id":"Пример_практического_применения_0"},{"heading":"Преобразование типов: явное и неявное","level":2,"id":"Преобразование_типов_явное_и_неявное_0"},{"heading":"Явное преобразование типов","level":3,"id":"Явное_преобразование_типов_0"},{"heading":"Примеры явного преобразования:","level":4,"id":"Примеры_явного_преобразования_0"},{"heading":"Когда использовать явное преобразование:","level":4,"id":"Когда_использовать_явное_преобразование_0"},{"heading":"Неявное преобразование типов (коэрши́он)","level":3,"id":"Неявное_преобразование_типов_(коэрши́он)_0"},{"heading":"Основные правила неявного преобразования:","level":4,"id":"Основные_правила_неявного_преобразования_0"},{"heading":"1. Оператор + — сложение или конкатенация?","level":5,"id":"1._Оператор_`+`_—_сложение_или_конкатенация?_0"},{"heading":"2. Операторы -, *, /, % — только числа","level":5,"id":"2._Операторы_`-`,_`*`,_`/`,_`%`_—_только_числа_0"},{"heading":"3. Сравнение с == (абстрактное равенство)","level":5,"id":"3._Сравнение_с_`==`_(абстрактное_равенство)_0"},{"heading":"4. Условия в if, while, ? :","level":5,"id":"4._Условия_в_`if`,_`while`,_`?_`_0"},{"heading":"Таблица неявного приведения к булевому типу («ложные» значения):","level":4,"id":"Таблица_неявного_приведения_к_булевому_типу_(«ложные»_значения)_0"},{"heading":"Почему неявное преобразование опасно?","level":3,"id":"Почему_неявное_преобразование_опасно?_0"}],"links":[],"author":"","coverImageURL":".","fullURL":"материалы/подтемы/секция-1.-javascript/примитивные-типы-данных-javascript.html","pathToRoot":"../../..","attachments":["материалы/файлы/pasted-image-20240923235323.html"],"createdTime":1758129118688,"modifiedTime":1758130955545,"sourceSize":18935,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Примитивные типы данных JavaScript.md","exportPath":"материалы/подтемы/секция-1.-javascript/примитивные-типы-данных-javascript.html","showInTree":true,"treeOrder":29,"backlinks":["лекции/секция-1.-javascript/тема-№4.-node.js,-примитивные-типы-данных-javascript.html"],"type":"markdown"},"материалы/подтемы/секция-1.-javascript/приоритет-операторов-и-ассоциативность.html":{"title":"Приоритет операторов и ассоциативность","icon":"","description":"Приоритет операторов определяет порядок, в котором выполняются операции в выражении, когда скобки не указаны. Ассоциативность — направление вычисления (слева направо или справа налево), если операторы имеют одинаковый приоритет.\n🔹 Важно: Операторы одной группы имеют одинаковый приоритет и выполняются в соответствии с ассоциативностью.\nlet result = 5 + 3 * 2;\n// Выполняется как: 5 + (3 * 2) → 5 + 6 → 11\nУмножение (*) имеет более высокий приоритет, чем сложение (+) — поэтому умножение выполняется первым.let a = true;\nlet b = false;\nlet c = true; let result = a || b &amp;&amp; c;\n// Выполняется как: a || (b &amp;&amp; c) → true || (false &amp;&amp; true) → true || false → true\nОператор &amp;&amp; выше по приоритету, чем || — поэтому сначала вычисляется b &amp;&amp; c.let x = 10;\nlet y = x &gt; 5 ? \"да\" : x &lt; 3 ? \"нет\" : \"не знаю\";\n// Эквивалентно: x &gt; 5 ? \"да\" : (x &lt; 3 ? \"нет\" : \"не знаю\")\nТернарный оператор ?: ассоциативен справа налево, поэтому вложенные условия обрабатываются корректно.let a = 1, b = 2, c = 3;\na = b += c *= 2;\n// Выполняется как: c *= 2 → c = 6; b += c → b = 8; a = b → a = 8\n// Порядок: справа налево, потому что `=` и составные операторы присваивания ассоциативны справа\nСкобки — это не просто формальность. Они делают код предсказуемым и понятным даже для того, кто читает его впервые.if (user.isAdmin &amp;&amp; user.isActive || user.isGuest) { ... }\nЧто здесь реально проверяется?\n→ (user.isAdmin &amp;&amp; user.isActive) || user.isGuestА если вы хотели:\n→ user.isAdmin &amp;&amp; (user.isActive || user.isGuest)?Разница критична.if (user.isAdmin &amp;&amp; (user.isActive || user.isGuest)) { ... }\n— Чётко видно намерение.// Без скобок — легко ошибиться\nif (age &gt;= 18 &amp;&amp; role === 'admin' || role === 'moderator') { ... } // Скобки спасают\nif (age &gt;= 18 &amp;&amp; (role === 'admin' || role === 'moderator')) { ... } Никогда не полагайтесь на память о приоритетах\nДаже опытные разработчики ошибаются. Если есть сомнения — используйте скобки. Разбивайте сложные выражения на части\nВместо:\nconst isValid = !isEmpty &amp;&amp; (value.length &gt;= 5 &amp;&amp; value.includes(\"@\")) || isTemp; Лучше:\nconst isEmpty = value.trim().length === 0;\nconst hasAtSymbol = value.includes(\"@\");\nconst meetsLength = value.length &gt;= 5;\nconst isValid = !isEmpty &amp;&amp; (meetsLength &amp;&amp; hasAtSymbol) || isTemp; Используйте переносы для многострочных условий\nif (user &amp;&amp; user.profile &amp;&amp; user.profile.isActive &amp;&amp; (user.role === 'admin' || user.role === 'editor')) { showDashboard();\n} Не пишите «умные» однострочные конструкции ради экономии строк\nНапример:\n// ❌ Непонятно\nresult = a &amp;&amp; b ? c : d || e; // ✅ Ясно\nif (a &amp;&amp; b) { result = c;\n} else { result = d || e;\n} Для логических выражений — комментируйте намерение // Разрешить доступ, если пользователь админ ИЛИ (зарегистрирован и активен)\nconst canAccess = user.role === 'admin' || (user.registered &amp;&amp; user.active); ","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Обзор ключевых уровней приоритета (от высшего к низшему)","level":3,"id":"Обзор_ключевых_уровней_приоритета_(от_высшего_к_низшему)_0"},{"heading":"Примеры без скобок: что происходит на самом деле","level":3,"id":"Примеры_без_скобок_что_происходит_на_самом_деле_0"},{"heading":"Пример 1: Умножение и сложение","level":4,"id":"Пример_1_Умножение_и_сложение_0"},{"heading":"Пример 2: Логические операторы","level":4,"id":"Пример_2_Логические_операторы_0"},{"heading":"Пример 3: Тернарный оператор","level":4,"id":"Пример_3_Тернарный_оператор_0"},{"heading":"Пример 4: Смешанные операторы присваивания","level":4,"id":"Пример_4_Смешанные_операторы_присваивания_0"},{"heading":"Как избежать ошибок с помощью скобок","level":3,"id":"Как_избежать_ошибок_с_помощью_скобок_0"},{"heading":"Плохо:","level":4,"id":"Плохо_0"},{"heading":"Хорошо:","level":4,"id":"Хорошо_0"},{"heading":"Особенно важно при сочетании логических и сравнительных операторов:","level":4,"id":"Особенно_важно_при_сочетании_логических_и_сравнительных_операторов_0"},{"heading":"Рекомендации по читаемости кода","level":3,"id":"Рекомендации_по_читаемости_кода_0"}],"links":[],"author":"","coverImageURL":"","fullURL":"материалы/подтемы/секция-1.-javascript/приоритет-операторов-и-ассоциативность.html","pathToRoot":"../../..","attachments":[],"createdTime":1758135243042,"modifiedTime":1758135434026,"sourceSize":7759,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Приоритет операторов и ассоциативность.md","exportPath":"материалы/подтемы/секция-1.-javascript/приоритет-операторов-и-ассоциативность.html","showInTree":true,"treeOrder":30,"backlinks":["лекции/секция-1.-javascript/тема-№5.-операторы-и-операции-в-javascript.html"],"type":"markdown"},"материалы/подтемы/секция-1.-javascript/установка-и-базовое-использование-node.js.html":{"title":"Установка и базовое использование Node.js","icon":"","description":"Node.js можно установить двумя основными способами. Первый — через официальный установщик с сайта nodejs.org: он подходит для новичков и автоматически настраивает Node.js и npm (советую вам использовать этот способ). Второй — через nvm (Node Version Manager): это инструмент для управления несколькими версиями Node.js на одном компьютере, что особенно полезно при работе с разными проектами. На macOS и Linux nvm устанавливается через терминал командой curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash, на Windows — через nvm-windows. После установки nvm можно легко переключаться между версиями: nvm install 20, nvm use 20.После установки важно проверить, что Node.js и npm (менеджер пакетов) работают корректно. В терминале введите node -v — вы увидите текущую версию Node.js (например, v20.12.0). Затем введите npm -v — вы увидите версию npm (например, 10.5.0). Если обе команды возвращают номера версий — среда готова к работе. Если нет — перезагрузите терминал или проверьте путь установки.Чтобы запустить JavaScript-файл в Node.js, создайте файл с расширением .js (например, app.js), напишите в нём любой код — например, console.log('Привет, Node.js!'); — и сохраните. В терминале перейдите в папку с файлом и выполните команду node app.js. Node.js прочитает файл, выполнит его содержимое и выведет результат в консоль. Это простейший способ тестировать серверный код, не используя браузер.Так-же, для вас будет проще запускать его сразу из редактора кода.Нажимаем на f5 находясь в нужном файле.\nВ первый запуск у вас спросят выбрать способ дебагера, выбираем Node.js.\n<img alt=\"Pasted image 20240928221620.png\" src=\"материалы/файлы/pasted-image-20240928221620.png\" target=\"_self\">ПКМ по файлу.<br><img alt=\"Pasted image 20240928222139.png\" src=\"материалы/файлы/pasted-image-20240928222139.png\" target=\"_self\">нажимаем кнопку Run \"название скрипта\"Дальше можем просто нажимать на кнопку \"запуск\"<br>\n<img alt=\"Pasted image 20240928222237.png\" src=\"материалы/файлы/pasted-image-20240928222237.png\" target=\"_self\">REPL (Read-Eval-Print Loop) — это интерактивная оболочка Node.js, которая позволяет сразу писать и выполнять JavaScript-код в терминале. Чтобы запустить её, введите node без аргументов. Вы увидите приглашение &gt; — теперь можете вводить выражения: 2 + 2, const name = 'Миша'; console.log(name);. Результат выводится мгновенно. Для выхода из REPL нажмите Ctrl + C дважды или введите .exit. REPL идеален для быстрой проверки синтаксиса, экспериментов с API или отладки небольших фрагментов кода.","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Установка через nvm или официальный установщик","level":2,"id":"Установка_через_nvm_или_официальный_установщик_0"},{"heading":"Проверка версии (<code>node -v</code>, <code>npm -v</code>)","level":2,"id":"Проверка_версии_(`node_-v`,_`npm_-v`)_0"},{"heading":"Запуск скрипта через <code>node filename.js</code>","level":2,"id":"Запуск_скрипта_через_`node_filename.js`_0"},{"heading":"Запуск в Visual Studio Code","level":3,"id":"Запуск_в_Visual_Studio_Code_0"},{"heading":"Запуск в WebStorm","level":3,"id":"Запуск_в_WebStorm_0"},{"heading":"Работа с REPL (интерактивная оболочка)","level":2,"id":"Работа_с_REPL_(интерактивная_оболочка)_0"}],"links":[],"author":"","coverImageURL":".","fullURL":"материалы/подтемы/секция-1.-javascript/установка-и-базовое-использование-node.js.html","pathToRoot":"../../..","attachments":["материалы/файлы/pasted-image-20240928221620.html","материалы/файлы/pasted-image-20240928222139.html","материалы/файлы/pasted-image-20240928222237.html"],"createdTime":1758129100980,"modifiedTime":1758129739398,"sourceSize":4135,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Установка и базовое использование Node.js.md","exportPath":"материалы/подтемы/секция-1.-javascript/установка-и-базовое-использование-node.js.html","showInTree":true,"treeOrder":33,"backlinks":["лекции/секция-1.-javascript/тема-№4.-node.js,-примитивные-типы-данных-javascript.html"],"type":"markdown"},"материалы/подтемы/секция-1.-javascript/что-такое-node.js.html":{"title":"Что такое Node.js","icon":"","description":"Node.js — это среда выполнения JavaScript, которая позволяет запускать код на сервере, а не только в браузере. Она построена на движке V8 от Google и даёт JavaScript доступ к системным ресурсам: файловой системе, сети, процессам. Это делает JavaScript полноценным языком для создания серверных приложений, инструментов разработки и автоматизации — всё на том же языке, что и фронтенд.Node.js появился в 2009 году благодаря Райану Далю — разработчику, который задался вопросом: почему JavaScript, который так хорошо справляется с асинхронными событиями в браузере (клики, загрузки, запросы), не может делать то же самое на сервере? Он объединил движок V8, который быстро выполняет JavaScript, с библиотекой libuv — специальной системой для асинхронного ввода-вывода. В результате получилась первая среда, где сервер мог обрабатывать тысячи одновременных соединений без создания отдельного потока на каждое — это стало прорывом в производительности.JavaScript на сервере упрощает разработку. Если вы пишете мобильное приложение на React Native или используете JSON-API, то логика, данные и даже части валидации могут быть общими между клиентом и сервером. Нет необходимости учить два разных языка — JavaScript на фронтенде и, например, Java или Python на бэкенде. Это снижает сложность команды, ускоряет разработку и делает поддержку проще. Также огромная экосистема npm дарит готовые решения для любой задачи — от баз данных до авторизации.В браузере JavaScript работает в ограниченной среде: он может работать с DOM, отправлять запросы через fetch, хранить данные в localStorage, но не может читать файлы с диска или слушать порты. В Node.js этих ограничений нет. Вместо window и document вы получаете global, process, require, module. Вы можете использовать модули fs для работы с файлами, http для создания сервера, path для обработки путей, child_process для запуска команд. То есть — Node.js превращает JavaScript из языка «для страниц» в язык «для всего».Node.js — невидимый двигатель современной мобильной разработки.\n— Backend для API: большинство мобильных приложений получают данные через REST или GraphQL. Эти API почти всегда пишут на Node.js (Express, NestJS, Fastify).\n— Инструменты сборки: Webpack, Metro, Babel, Vite — все они написаны на Node.js и собирают ваш код в приложение для iOS и Android.\n— CLI-инструменты: Expo CLI, Ionic CLI, Capacitor — они создают проекты, добавляют плагины, настраивают конфиги — и всё это работает на Node.js.\n— CI/CD: когда вы заливаете код в GitHub, а система автоматически собирает APK/IPA и публикует его — за этим стоит скрипт на Node.js.\nДаже если вы никогда не напишете строчку на Node.js — вы будете им пользоваться каждый день. Без него мобильная разработка была бы намного медленнее, сложнее и менее гибкой.","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Определение Node.js","level":2,"id":"Определение_Node.js_0"},{"heading":"История появления (V8, Ryan Dahl)","level":2,"id":"История_появления_(V8,_Ryan_Dahl)_0"},{"heading":"Зачем нужен JavaScript на сервере","level":2,"id":"Зачем_нужен_JavaScript_на_сервере_0"},{"heading":"Отличие от браузерного JavaScript (глобальные объекты, доступ к файловой системе, сети)","level":2,"id":"Отличие_от_браузерного_JavaScript_(глобальные_объекты,_доступ_к_файловой_системе,_сети)_0"},{"heading":"Примеры использования Node.js в мобильной разработке (backend для API, инструменты сборки, CI/CD)","level":2,"id":"Примеры_использования_Node.js_в_мобильной_разработке_(backend_для_API,_инструменты_сборки,_CI/CD)_0"}],"links":[],"author":"","coverImageURL":"","fullURL":"материалы/подтемы/секция-1.-javascript/что-такое-node.js.html","pathToRoot":"../../..","attachments":[],"createdTime":1758129075666,"modifiedTime":1758129483350,"sourceSize":5177,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Что такое Node.js.md","exportPath":"материалы/подтемы/секция-1.-javascript/что-такое-node.js.html","showInTree":true,"treeOrder":35,"backlinks":["лекции/секция-1.-javascript/тема-№4.-node.js,-примитивные-типы-данных-javascript.html"],"type":"markdown"},"материалы/файлы/pasted-image-20240923235323.html":{"title":"Pasted image 20240923235323","icon":"","description":"<img src=\"материалы/файлы/pasted-image-20240923235323.png\" target=\"_self\">","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"","coverImageURL":".","fullURL":"материалы/файлы/pasted-image-20240923235323.html","pathToRoot":"../..","attachments":["материалы/файлы/pasted-image-20240923235323.html"],"createdTime":1758130114832,"modifiedTime":1750135291676,"sourceSize":400632,"sourcePath":"Материалы/Файлы/Pasted image 20240923235323.png","exportPath":"материалы/файлы/pasted-image-20240923235323.html","showInTree":true,"treeOrder":37,"backlinks":["материалы/подтемы/секция-1.-javascript/примитивные-типы-данных-javascript.html"],"type":"attachment"},"материалы/файлы/pasted-image-20240928221620.html":{"title":"Pasted image 20240928221620","icon":"","description":"<img src=\"материалы/файлы/pasted-image-20240928221620.png\" target=\"_self\">","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"","coverImageURL":".","fullURL":"материалы/файлы/pasted-image-20240928221620.html","pathToRoot":"../..","attachments":["материалы/файлы/pasted-image-20240928221620.html"],"createdTime":1758129845153,"modifiedTime":1750135107566,"sourceSize":24101,"sourcePath":"Материалы/Файлы/Pasted image 20240928221620.png","exportPath":"материалы/файлы/pasted-image-20240928221620.html","showInTree":true,"treeOrder":38,"backlinks":["материалы/подтемы/секция-1.-javascript/установка-и-базовое-использование-node.js.html"],"type":"attachment"},"материалы/файлы/pasted-image-20240928222139.html":{"title":"Pasted image 20240928222139","icon":"","description":"<img src=\"материалы/файлы/pasted-image-20240928222139.png\" target=\"_self\">","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"","coverImageURL":".","fullURL":"материалы/файлы/pasted-image-20240928222139.html","pathToRoot":"../..","attachments":["материалы/файлы/pasted-image-20240928222139.html"],"createdTime":1758129845158,"modifiedTime":1750135129731,"sourceSize":78566,"sourcePath":"Материалы/Файлы/Pasted image 20240928222139.png","exportPath":"материалы/файлы/pasted-image-20240928222139.html","showInTree":true,"treeOrder":39,"backlinks":["материалы/подтемы/секция-1.-javascript/установка-и-базовое-использование-node.js.html"],"type":"attachment"},"материалы/файлы/pasted-image-20240928222237.html":{"title":"Pasted image 20240928222237","icon":"","description":"<img src=\"материалы/файлы/pasted-image-20240928222237.png\" target=\"_self\">","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"","coverImageURL":".","fullURL":"материалы/файлы/pasted-image-20240928222237.html","pathToRoot":"../..","attachments":["материалы/файлы/pasted-image-20240928222237.html"],"createdTime":1758129845162,"modifiedTime":1750135033068,"sourceSize":621,"sourcePath":"Материалы/Файлы/Pasted image 20240928222237.png","exportPath":"материалы/файлы/pasted-image-20240928222237.html","showInTree":true,"treeOrder":40,"backlinks":["материалы/подтемы/секция-1.-javascript/установка-и-базовое-использование-node.js.html"],"type":"attachment"},"материалы/файлы/pasted-image-20250917202240.html":{"title":"Pasted image 20250917202240","icon":"","description":"<img src=\"материалы/файлы/pasted-image-20250917202240.png\" target=\"_self\">","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"","coverImageURL":".","fullURL":"материалы/файлы/pasted-image-20250917202240.html","pathToRoot":"../..","attachments":["материалы/файлы/pasted-image-20250917202240.html"],"createdTime":1758129760459,"modifiedTime":1758129760459,"sourceSize":24101,"sourcePath":"Материалы/Файлы/Pasted image 20250917202240.png","exportPath":"материалы/файлы/pasted-image-20250917202240.html","showInTree":true,"treeOrder":50,"backlinks":[],"type":"attachment"},"лекции/секция-1.-javascript/тема-№6.-git,-github.html":{"title":"Тема №6. Git, GitHub","icon":"","description":"В этой теме вы познакомитесь с системой контроля версий Git и платформой GitHub — основными инструментами для управления кодом в командной разработке. Изучите базовые команды для отслеживания изменений, создания коммитов и взаимодействия с удалённым репозиторием. Это необходимо для совместной работы над мобильными приложениями, а также для хранения и публикации вашего кода.\n<a data-href=\"Что такое Git\" href=\"материалы/подтемы/секция-1.-javascript/тема-№6/что-такое-git.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Что такое Git</a>\n<br><a data-href=\"Основные понятия Git\" href=\"материалы/подтемы/секция-1.-javascript/тема-№6/основные-понятия-git.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Основные понятия Git</a>\n<br><a data-href=\"Базовые команды Git\" href=\"материалы/подтемы/секция-1.-javascript/тема-№6/базовые-команды-git.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Базовые команды Git</a>\n<br><a data-href=\"Работа с ветками Git\" href=\"материалы/подтемы/секция-1.-javascript/тема-№6/работа-с-ветками-git.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Работа с ветками Git</a>\n<br><a data-href=\"Что такое GitHub\" href=\"материалы/подтемы/секция-1.-javascript/тема-№6/что-такое-github.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Что такое GitHub</a>\n<br><a data-href=\"Работа с удалёнными репозиториями\" href=\"материалы/подтемы/секция-1.-javascript/тема-№6/работа-с-удалёнными-репозиториями.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Работа с удалёнными репозиториями</a>\n<br><a data-href=\"Файл .gitignore\" href=\"материалы/подтемы/секция-1.-javascript/тема-№6/файл-.gitignore.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Файл .gitignore</a>\n<br><a data-href=\"Рекомендации по использованию Git\" href=\"материалы/подтемы/секция-1.-javascript/тема-№6/рекомендации-по-использованию-git.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Рекомендации по использованию Git</a>\n(Пусто)<br><a data-href=\"Тема №7. Ветвление в JavaScript\" href=\".html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Тема №7. Ветвление в JavaScript</a>","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Описание темы","level":2,"id":"Описание_темы_0"},{"heading":"План темы","level":2,"id":"План_темы_0"},{"heading":"Задания связанные с темой","level":2,"id":"Задания_связанные_с_темой_0"},{"heading":"Следующая тема","level":2,"id":"Следующая_тема_0"}],"links":["материалы/подтемы/секция-1.-javascript/тема-№6/что-такое-git.html","материалы/подтемы/секция-1.-javascript/тема-№6/основные-понятия-git.html","материалы/подтемы/секция-1.-javascript/тема-№6/базовые-команды-git.html","материалы/подтемы/секция-1.-javascript/тема-№6/работа-с-ветками-git.html","материалы/подтемы/секция-1.-javascript/тема-№6/что-такое-github.html","материалы/подтемы/секция-1.-javascript/тема-№6/работа-с-удалёнными-репозиториями.html","материалы/подтемы/секция-1.-javascript/тема-№6/файл-.gitignore.html","материалы/подтемы/секция-1.-javascript/тема-№6/рекомендации-по-использованию-git.html",".html"],"author":"","coverImageURL":"","fullURL":"лекции/секция-1.-javascript/тема-№6.-git,-github.html","pathToRoot":"../..","attachments":[],"createdTime":1758292408362,"modifiedTime":1758305772186,"sourceSize":1244,"sourcePath":"Лекции/Секция 1. JavaScript/Тема №6. Git, GitHub.md","exportPath":"лекции/секция-1.-javascript/тема-№6.-git,-github.html","showInTree":true,"treeOrder":10,"backlinks":["лекции/секция-1.-javascript/тема-№5.-операторы-и-операции-в-javascript.html"],"type":"markdown"},"материалы/подтемы/секция-1.-javascript/тема-№6/базовые-команды-git.html":{"title":"Базовые команды Git","icon":"","description":"Создаёт новый Git-репозиторий в текущей папке.\nПосле этой команды появляется скрытая папка .git — она хранит всю историю проекта.git init\nПример:\nВы начинаете новый проект на React Native:cd MyMobileApp\ngit init\nТеперь Git отслеживает все файлы в папке MyMobileApp/: App.js, package.json, src/, android/, ios/.\n⚠️ Не запускайте git init внутри уже существующего репозитория — это сломает структуру.\nДобавляет изменения файлов в staging area — область, откуда они будут включены в следующий коммит.Добавить один файл:git add src/components/LoginButton.js\nДобавить все изменённые и новые файлы:git add .\nДобавить все файлы, кроме игнорируемых (через .gitignore):git add -A\nПример:\nВы изменили App.js и создали src/screens/Home.js.\nЧтобы зафиксировать оба:git add App.js src/screens/Home.js Важно: git add не сохраняет изменения — он только готовит их к сохранению.\nБез git commit изменения не зафиксируются.\nСохраняет все подготовленные изменения как один коммит.\nОбязательно нужно указывать сообщение с флагом -m.git commit -m \"Добавил экран Home с приветствием\"\nПример хорошего сообщения:\n\"Исправил баг: HomeScreen не отображался на Android 12\" — понятно, конкретно, воспроизводимо.Пример плохого сообщения:\n\"fixed\" — ничего не объясняет.\nКоммит — это логическая единица. Делайте один коммит на одну задачу.\nПоказывает, какие файлы изменены, какие добавлены, а какие ещё не отслеживаются.git status\nВывод может выглядеть так:On branch main\nChanges not staged for commit: modified: src/components/Button.js Untracked files: src/screens/Home.js Changes to be committed: new file: src/utils/api.js\nЭто помогает понять:\n— Что вы сделали?\n— Что ещё нужно добавить?\n— Что уже готово к коммиту?Показывает список всех коммитов в текущей ветке — от самого нового к самому старому.git log\nВывод:commit a1b2c3d4e5f67890...\nAuthor: Ivan Petrov &lt;ivan@example.com&gt;\nDate: Mon Apr 1 10:30:00 2025 +0300 Добавил экран Home с приветствием commit f9e8d7c6b5a4a3b2...\nAuthor: Ivan Petrov &lt;ivan@example.com&gt;\nDate: Sun Mar 31 15:20:00 2025 +0300 Настроил стили кнопок\nКороткая версия (только хеш и сообщение):git log --oneline\nВывод:a1b2c3d Добавил экран Home с приветствием\nf9e8d7c Настроил стили кнопок Используйте git log --oneline чаще — он удобнее для быстрого просмотра.\nПоказывает, что именно изменилось в файлах между рабочей директорией и последним коммитом.git diff\nПример вывода:diff --git a/src/components/Button.js b/src/components/Button.js\nindex 1234567..89abcde 100644\n--- a/src/components/Button.js\n+++ b/src/components/Button.js\n@@ -5,7 +5,7 @@ const Button = () =&gt; ( &lt;View style={styles.container}&gt;\n- &lt;Text&gt;Войти&lt;/Text&gt;\n+ &lt;Text style={styles.bold}&gt;Войти&lt;/Text&gt; &lt;/View&gt; );\nЗдесь:\n- — удалённая строка\n+ — добавленная строка\nЕсли вы хотите увидеть изменения, которые уже добавлены в staging (и готовы к коммиту):git diff --cached git diff без флагов — показывает не добавленные изменения.\ngit diff --cached — показывает добавленные, но ещё не закоммиченные.\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"<code>git init</code> — создание репозитория","level":2,"id":"`git_init`_—_создание_репозитория_0"},{"heading":"<code>git add</code> — добавление изменений в область подготовки","level":2,"id":"`git_add`_—_добавление_изменений_в_область_подготовки_0"},{"heading":"<code>git commit</code> — фиксация изменений с сообщением","level":2,"id":"`git_commit`_—_фиксация_изменений_с_сообщением_0"},{"heading":"<code>git status</code> — просмотр состояния рабочей директории","level":2,"id":"`git_status`_—_просмотр_состояния_рабочей_директории_0"},{"heading":"<code>git log</code> — история коммитов","level":2,"id":"`git_log`_—_история_коммитов_0"},{"heading":"<code>git diff</code> — сравнение изменений","level":2,"id":"`git_diff`_—_сравнение_изменений_0"}],"links":[],"author":"","coverImageURL":"","fullURL":"материалы/подтемы/секция-1.-javascript/тема-№6/базовые-команды-git.html","pathToRoot":"../../../..","attachments":[],"createdTime":1758304903420,"modifiedTime":1758304966942,"sourceSize":5306,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Тема №6/Базовые команды Git.md","exportPath":"материалы/подтемы/секция-1.-javascript/тема-№6/базовые-команды-git.html","showInTree":true,"treeOrder":17,"backlinks":["лекции/секция-1.-javascript/тема-№6.-git,-github.html"],"type":"markdown"},"материалы/подтемы/секция-1.-javascript/тема-№6/базовые-понятия-git.html":{"title":"Базовые понятия Git","icon":"","description":"","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"","coverImageURL":"","fullURL":"материалы/подтемы/секция-1.-javascript/тема-№6/базовые-понятия-git.html","pathToRoot":"../../../..","attachments":[],"createdTime":1758304877162,"modifiedTime":1758304885322,"sourceSize":0,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Тема №6/Базовые понятия Git.md","exportPath":"материалы/подтемы/секция-1.-javascript/тема-№6/базовые-понятия-git.html","showInTree":true,"treeOrder":18,"backlinks":[],"type":"markdown"},"материалы/подтемы/секция-1.-javascript/тема-№6/основные-понятия-git.html":{"title":"Основные понятия Git","icon":"","description":"Репозиторий — это папка, в которой Git отслеживает все изменения файлов.\nОн хранит всю историю проекта: все коммиты, ветки, настройки.Создать репозиторий можно в любой папке:git init\nПосле этой команды в папке появляется скрытая папка .git — именно там Git хранит всю информацию.\nНе удаляйте её — без неё репозиторий перестанет работать.Пример:\nВы создаёте мобильное приложение на React Native. Папка MyMobileApp/ становится репозиторием — Git будет следить за всеми изменениями в файлах App.js, src/components/Button.js, package.json, ios/ и android/.Коммит — это сохранённое состояние проекта на определённый момент.\nЭто как снимок экрана вашего кода, который вы можете вернуть в любое время.Каждый коммит имеет уникальный хеш (например, a1b2c3d4) и сообщение, описывающее, что было изменено.Пример создания коммита:git add src/components/LoginButton.js\ngit commit -m \"Добавил кнопку входа с анимацией\" git add — выбирает изменения для сохранения.\ngit commit — фиксирует их как единое целое.\nВажно: коммит — это не просто сохранение файла. Это логическая единица изменений.\nХороший коммит делает одну вещь и говорит, что именно он сделал.Пример плохого коммита:\n\"fixed stuff\" — непонятно, что исправлено.Пример хорошего коммита:\n\"Исправил баг: кнопка входа не реагировала на тач в Android\" — ясно, понятно, воспроизводимо.Ветка — это изолированная линия разработки.\nПо умолчанию при создании репозитория создаётся ветка main.Вы можете создавать новые ветки для работы над новой функцией, исправлением бага или экспериментом — и не мешать основной версии приложения.Пример:git branch feature/login-animation\ngit switch feature/login-animation\nТеперь вы работаете в ветке feature/login-animation.\nВсе изменения — только здесь.\nКогда функция готова — вы объедините её с main.Это позволяет:\nНе ломать рабочую версию приложения.\nПараллельно работать над несколькими задачами.\nЛегко откатиться, если что-то пошло не так.\nПример сценария:\nВы добавляете анимацию при входе в приложении.\nДругой разработчик работает над авторизацией через Google.\nОба работают в своих ветках — никаких конфликтов до момента слияния.Git отслеживает файлы по четырём состояниям. Понимание этих состояний — ключ к работе с Git.Чтобы посмотреть текущее состояние всех файлов:git status\nПример последовательности:\nВы создали src/screens/AuthScreen.js → untracked\nВы выполнили git add src/screens/AuthScreen.js → staged\nВы выполнили git commit -m \"Добавил экран авторизации\" → теперь файл tracked, изменения зафиксированы\nВы снова отредактировали src/screens/AuthScreen.js → теперь он modified Запомните: чтобы сохранить изменения — нужно сначала add, потом commit.\nНельзя сделать коммит, не добавив изменения в staging-зону.\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Репозиторий (repository)","level":2,"id":"Репозиторий_(repository)_0"},{"heading":"Коммит (commit)","level":2,"id":"Коммит_(commit)_0"},{"heading":"Ветка (branch)","level":2,"id":"Ветка_(branch)_0"},{"heading":"Статус файлов: tracked, modified, staged, untracked","level":2,"id":"Статус_файлов_tracked,_modified,_staged,_untracked_0"}],"links":[],"author":"","coverImageURL":"","fullURL":"материалы/подтемы/секция-1.-javascript/тема-№6/основные-понятия-git.html","pathToRoot":"../../../..","attachments":[],"createdTime":1758304675640,"modifiedTime":1758304999559,"sourceSize":5771,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Тема №6/Основные понятия Git.md","exportPath":"материалы/подтемы/секция-1.-javascript/тема-№6/основные-понятия-git.html","showInTree":true,"treeOrder":19,"backlinks":["лекции/секция-1.-javascript/тема-№6.-git,-github.html"],"type":"markdown"},"материалы/подтемы/секция-1.-javascript/тема-№6/работа-с-ветками-git.html":{"title":"Работа с ветками Git","icon":"","description":"Показывает все ветки в репозитории. Текущая ветка отмечена звёздочкой *.git branch\nПример вывода: main\n* feature/login-screen bugfix/button-color\nЗдесь вы находитесь в ветке feature/login-screen.Чтобы увидеть только удалённые ветки (на сервере):git branch -r\nЧтобы увидеть все ветки — локальные и удалённые:git branch -a\nПереключает рабочую директорию на указанную ветку.\nИзменения в файлах сохраняются, если они не конфликтуют.git checkout feature/login-screen\nЕсли ветка ещё не существует локально, но есть на сервере — можно создать и переключиться сразу:git checkout feature/login-screen\n# если ветка не найдена локально — выдаст ошибку\nЧтобы создать новую ветку и сразу переключиться:git checkout -b feature/auth-google checkout — многофункциональная команда: она может переключать ветки, восстанавливать файлы, и даже переходить к коммитам. Это может запутать новичков.\nПоявилась в Git 2.23 как более понятная альтернатива для переключения веток.\nРаботает только с ветками — меньше шансов ошибиться.git switch feature/login-screen\nСоздать новую ветку и переключиться:git switch -c feature/auth-google ✅ Рекомендуется использовать git switch для переключения между ветками.\nОставьте git checkout только для восстановления файлов или перехода к старым коммитам.\nОбъединяет изменения из одной ветки в текущую.\nРаботает только после переключения на целевую ветку.Пример: вы закончили работу в feature/login-screen и хотите добавить изменения в main.git switch main\ngit merge feature/login-screen\nЕсли изменений нет в конфликте — Git сделает быстрое слияние (fast-forward).\nЕсли в main были новые коммиты — Git создаст отдельный коммит слияния.Пример вывода после успешного слияния:Updating a1b2c3d..f9e8d7c\nFast-forward src/screens/Login.js | 20 ++++++++++++++++++++ 1 file changed, 20 insertions(+) create mode 100644 src/screens/Login.js\nЕсли возникает конфликт — Git остановится и попросит вас разрешить его вручную.\nФайлы с конфликтами будут помечены специальными маркерами:&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\n&lt;Text&gt;Войти&lt;/Text&gt;\n=======\n&lt;Text style={styles.bold}&gt;Войти&lt;/Text&gt;\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; feature/login-screen\nРазрешите конфликт — удалите маркеры, оставьте нужный код — затем:git add src/components/Button.js\ngit commit ⚠️ Не делайте слияние в main с незавершёнными или неотлаженными фичами.\nВсегда тестируйте ветку перед слиянием.\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"<code>git branch</code> — список веток","level":2,"id":"`git_branch`_—_список_веток_0"},{"heading":"<code>git checkout</code> — переключение между ветками","level":2,"id":"`git_checkout`_—_переключение_между_ветками_0"},{"heading":"<code>git switch</code> — альтернатива <code>checkout</code> для переключения","level":2,"id":"`git_switch`_—_альтернатива_`checkout`_для_переключения_0"},{"heading":"<code>git merge</code> — объединение веток","level":2,"id":"`git_merge`_—_объединение_веток_0"}],"links":[],"author":"","coverImageURL":"","fullURL":"материалы/подтемы/секция-1.-javascript/тема-№6/работа-с-ветками-git.html","pathToRoot":"../../../..","attachments":[],"createdTime":1758305014790,"modifiedTime":1758305095855,"sourceSize":4169,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Тема №6/Работа с ветками Git.md","exportPath":"материалы/подтемы/секция-1.-javascript/тема-№6/работа-с-ветками-git.html","showInTree":true,"treeOrder":20,"backlinks":["лекции/секция-1.-javascript/тема-№6.-git,-github.html"],"type":"markdown"},"материалы/подтемы/секция-1.-javascript/тема-№6/работа-с-удалёнными-репозиториями.html":{"title":"Работа с удалёнными репозиториями","icon":"","description":"Чтобы отправить локальный репозиторий на GitHub, нужно связать его с удалённым.git remote add origin https://github.com/username/MyMobileApp.git origin — это имя, которое вы даёте удалённому репозиторию (по умолчанию так называют главный удалённый репозиторий).\nURL берётся из вашего репозитория на GitHub — кнопка «Code» → «HTTPS».\nПроверить, что привязка прошла:git remote -v\nВывод:origin https://github.com/username/MyMobileApp.git (fetch)\norigin https://github.com/username/MyMobileApp.git (push) Не используйте git remote add origin если репозиторий уже имеет удалённую связь — это вызовет ошибку.\nОтправляет ваши локальные коммиты в удалённый репозиторий.git push origin main\nПервый раз, когда вы отправляете ветку — Git может попросить аутентификацию (логин/пароль или токен).\nНа GitHub с 2021 года пароли не работают — используйте Personal Access Token (PAT) вместо пароля.\nЕсли вы работаете с веткой feature/login-screen:git push origin feature/login-screen\nПосле первого push можно использовать короткую команду:git push\nGit запомнит, куда отправлять изменения для текущей ветки.Загружает изменения с удалённого репозитория и объединяет их с вашей текущей веткой.git pull origin main\nЭто эквивалент двух команд:git fetch origin main\ngit merge origin/main\nПример:\nКоллега добавил новый экран в main. Вы выполняете:git switch main\ngit pull\nТеперь у вас есть последние изменения — даже если вы работали офлайн.\n⚠️ Если у вас есть незакоммиченные изменения — pull может сломаться.\nВ этом случае сначала сделайте git stash, потом pull, потом git stash pop.\nСоздаёт локальную копию удалённого репозитория — со всей историей, ветками и файлами.git clone https://github.com/username/MyMobileApp.git\nПосле этой команды:\nСоздаётся папка MyMobileApp/\nВнутри — все файлы, ветки, история коммитов\nАвтоматически создаётся связь origin с исходным репозиторием\nПример:\nВы присоединяетесь к команде. Вам дают ссылку на репозиторий — вы клонируете его и сразу можете работать:cd MyMobileApp\nnpm install\nnpx expo start Используйте git clone только при начале работы над проектом.\nДля обновления существующего репозитория — используйте git pull.\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Привязка к удалённому репозиторию","level":2,"id":"Привязка_к_удалённому_репозиторию_0"},{"heading":"Отправка коммитов на сервер","level":2,"id":"Отправка_коммитов_на_сервер_0"},{"heading":"Получение изменений с сервера","level":2,"id":"Получение_изменений_с_сервера_0"},{"heading":"Скачивание репозитория","level":2,"id":"Скачивание_репозитория_0"}],"links":[],"author":"","coverImageURL":"","fullURL":"материалы/подтемы/секция-1.-javascript/тема-№6/работа-с-удалёнными-репозиториями.html","pathToRoot":"../../../..","attachments":[],"createdTime":1758305328731,"modifiedTime":1758305450784,"sourceSize":3863,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Тема №6/Работа с удалёнными репозиториями.md","exportPath":"материалы/подтемы/секция-1.-javascript/тема-№6/работа-с-удалёнными-репозиториями.html","showInTree":true,"treeOrder":21,"backlinks":["лекции/секция-1.-javascript/тема-№6.-git,-github.html"],"type":"markdown"},"материалы/подтемы/секция-1.-javascript/тема-№6/рекомендации-по-использованию-git.html":{"title":"Рекомендации по использованию Git","icon":"","description":"Делайте коммиты часто — не ждите, пока «всё будет готово».\nМаленький коммит — это безопасный снимок состояния.\nЕсли что-то сломалось — вы легко найдёте, где именно.Пример плохой практики:\nВы работаете над экраном входа 3 дня — меняете App.js, LoginScreen.js, api.js, styles.tsx — и только тогда делаете один коммит:\n\"finished login\" — непонятно, что изменилось.Пример хорошей практики: Добавил кнопку входа → feat: добавил кнопку входа с анимацией Подключил API для авторизации → feat: подключил POST /login к серверу Исправил баг с фокусом поля ввода → fix: исправил фокус на поле email в iOS\nКаждый коммит — отдельная логическая единица.\nЛегче откатиться, легче ревью, легче находить баги.Сообщение коммита — это история вашего кода.\nОно должно отвечать на вопрос: «Что изменилось и зачем?»Хорошее сообщение:\nfix: убрал дублирование стилей в Button и PrimaryButtonПлохое сообщение:\nfixed stuffИспользуйте формат:&lt;тип&gt;: &lt;краткое описание&gt;\nТипы (по соглашению Conventional Commits):\nfeat: — новая функция\nfix: — исправление бага\ndocs: — изменения в документации\nchore: — технические задачи (обновление зависимостей, настройка сборки)\nrefactor: — рефакторинг без изменения поведения\nПример:git commit -m \"feat: добавил экран восстановления пароля\"\ngit commit -m \"fix: кнопка 'Войти' не реагировала на тач в Android\"\ngit commit -m \"chore: обновил expo SDK до версии 50\" Не пишите «исправил ошибку», «сделал лучше» — это неинформативно.\nПишите что было сделано, где, и если важно — почему.\nНикогда не работайте напрямую в main.\nВсегда создавайте ветку для каждой задачи.Пример:git switch main\ngit pull\ngit switch -c feature/login-screen\n# ... работаю над экраном входа ...\ngit add .\ngit commit -m \"feat: добавил экран входа с валидацией\"\ngit push origin feature/login-screen\nЗатем на GitHub создаёте Pull Request (или Merge Request).\nПосле ревью — объединяете с main.Это даёт:\nБезопасность: основной код не ломается.\nЧёткость: каждая ветка — одна задача.\nКоллаборацию: другие могут видеть вашу работу, комментировать, предлагать правки.\nВозможность отложить: если задача не готова — вы можете закрыть ветку без влияния на проект. Если вы работаете над двумя задачами одновременно — две ветки.\nЕсли вы исправляете баг — ветка bugfix/....\nЕсли вы экспериментируете — ветка experiment/....\nЕсли вы добавляете новые фичи — ветка feature/.... Ветки — это ваша страховка.\nОни бесплатны. Они не занимают места.\nИспользуйте их всегда.\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Частые, маленькие и осмысленные коммиты","level":2,"id":"Частые,_маленькие_и_осмысленные_коммиты_0"},{"heading":"Описательные сообщения коммитов","level":2,"id":"Описательные_сообщения_коммитов_0"},{"heading":"Использование веток для новых фич и исправлений","level":2,"id":"Использование_веток_для_новых_фич_и_исправлений_0"}],"links":[],"author":"","coverImageURL":"","fullURL":"материалы/подтемы/секция-1.-javascript/тема-№6/рекомендации-по-использованию-git.html","pathToRoot":"../../../..","attachments":[],"createdTime":1758305610917,"modifiedTime":1758305751652,"sourceSize":4475,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Тема №6/Рекомендации по использованию Git.md","exportPath":"материалы/подтемы/секция-1.-javascript/тема-№6/рекомендации-по-использованию-git.html","showInTree":true,"treeOrder":22,"backlinks":["лекции/секция-1.-javascript/тема-№6.-git,-github.html"],"type":"markdown"},"материалы/подтемы/секция-1.-javascript/тема-№6/файл-.gitignore.html":{"title":"Файл .gitignore","icon":"","description":"Файл .gitignore указывает Git, какие файлы и папки не нужно отслеживать.\nОн предотвращает попадание в репозиторий временных, системных или чувствительных файлов, которые не нужны другим разработчикам.Примеры файлов, которые никогда не должны быть в репозитории:\nnode_modules/ — папка с зависимостями React Native (устанавливается через npm install)\n.env — файл с секретными ключами (API-ключи, токены, пароли)\nbuild/, ios/, android/ — скомпилированные бинарники (они разные на каждом компьютере)\n.DS_Store, Thumbs.db — системные файлы macOS и Windows\n*.log, *.tmp — логи и временные файлы\nСоздайте файл .gitignore в корне проекта:touch .gitignore\nИ добавьте туда строки:node_modules/\n.env\nbuild/\nios/\nandroid/\n*.log\n*.tmp\n.DS_Store\nПосле этого Git перестанет отслеживать эти файлы — даже если вы выполните git add ..\nЕсли файл уже был добавлен в репозиторий — .gitignore его не игнорирует.\nСначала удалите его из индекса: git rm -r --cached node_modules/\ngit commit -m \"Убрал node_modules из репозитория\" Вот стандартный .gitignore для React Native-проекта:# Dependencies\nnode_modules/ # Environment\n.env\n.env.local\n.env.development\n.env.production # Build output\nbuild/\nios/\nandroid/ # Logs\n*.log\nnpm-debug.log* # IDE and editor\n.vscode/\n.idea/\n*.swp\n*.swo # OS\n.DS_Store\nThumbs.db # Testing\ncoverage/ # Expo\n.expo/\n.expo-shared/ Вы можете использовать шаблоны из <a data-tooltip-position=\"top\" aria-label=\"https://github.com/github/gitignore\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://github.com/github/gitignore\" target=\"_self\">github.com/github/gitignore</a> — там есть готовые .gitignore для React Native, Expo, iOS, Android.\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Примеры:","level":2,"id":"Примеры_0"}],"links":[],"author":"","coverImageURL":"","fullURL":"материалы/подтемы/секция-1.-javascript/тема-№6/файл-.gitignore.html","pathToRoot":"../../../..","attachments":[],"createdTime":1758305456872,"modifiedTime":1758305590421,"sourceSize":2311,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Тема №6/Файл .gitignore.md","exportPath":"материалы/подтемы/секция-1.-javascript/тема-№6/файл-.gitignore.html","showInTree":true,"treeOrder":23,"backlinks":["лекции/секция-1.-javascript/тема-№6.-git,-github.html"],"type":"markdown"},"материалы/подтемы/секция-1.-javascript/тема-№6/что-такое-git.html":{"title":"Что такое Git","icon":"","description":"Git — это распределённая система контроля версий.\nЭто означает, что каждый разработчик имеет полную копию истории изменений проекта на своём компьютере — не только последнюю версию файла, но и все прошлые состояния.Без Git вы работаете с файлами как с обычными документами: сохраняете, переписываете, теряете изменения.\nGit решает три основные проблемы: История изменений\nВы можете посмотреть, кто, когда и что изменил в любом файле.\nПример: вы заметили, что кнопка перестала работать. С помощью Git вы найдёте, в каком коммите это произошло. Откат к предыдущему состоянию\nЕсли вы внесли ошибку — можно вернуть проект к тому состоянию, когда всё работало.\nПример: git reset --hard a1b2c3d Это вернёт весь проект к коммиту с хешем a1b2c3d. Сотрудничество\nНесколько человек могут работать над одним проектом одновременно, не мешая друг другу.\nКаждый работает в своей копии, потом объединяет изменения. Пример:\nВы работаете в самолёте. В Git: можете делать коммиты, создавать ветки, просматривать историю — всё работает. В SVN: ничего не сможете сделать, пока не выйдете в сеть.\nGit — это инструмент, который работает на вашем компьютере.\nОн не требует интернета, чтобы функционировать.\nЭто делает его надёжным и удобным даже в условиях плохого соединения или при работе офлайн.","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Зачем нужен Git","level":2,"id":"Зачем_нужен_Git_0"},{"heading":"Отличие от SVN (и других централизованных систем)","level":2,"id":"Отличие_от_SVN_(и_других_централизованных_систем)_0"}],"links":[],"author":"","coverImageURL":"","fullURL":"материалы/подтемы/секция-1.-javascript/тема-№6/что-такое-git.html","pathToRoot":"../../../..","attachments":[],"createdTime":1758304501406,"modifiedTime":1758305007670,"sourceSize":3437,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Тема №6/Что такое Git.md","exportPath":"материалы/подтемы/секция-1.-javascript/тема-№6/что-такое-git.html","showInTree":true,"treeOrder":24,"backlinks":["лекции/секция-1.-javascript/тема-№6.-git,-github.html"],"type":"markdown"},"материалы/подтемы/секция-1.-javascript/тема-№6/что-такое-github.html":{"title":"Что такое GitHub","icon":"","description":"GitHub — это хостинг для Git-репозиториев.\nЭто веб-платформа, где можно хранить код, делиться им с другими и работать совместно.\nХранение — ваш репозиторий сохраняется на сервере GitHub, даже если ваш компьютер сломается.\nОбмен — вы можете дать доступ другим разработчикам или сделать репозиторий публичным.\nСовместная работа — через pull requests, комментарии, задачи (issues), код-ревью.\nПример:\nВы разрабатываете мобильное приложение на React Native.\nВы закоммитили изменения локально, но хотите, чтобы команда увидела ваш код — вы отправляете его на GitHub.\nДругой разработчик клонирует репозиторий, проверяет код, предлагает правки — вы вносите их и снова публикуете.Git — это инструмент, который работает на вашем компьютере.\nGitHub — это сервис, который предоставляет место для хранения Git-репозиториев в облаке.\nGit — как ручка и тетрадь.\nGitHub — как облако, куда вы сканируете тетрадь, чтобы другие могли её видеть.\nВы можете использовать Git без GitHub — локально, на своём компьютере.\nНо вы не можете использовать GitHub без Git — он требует репозитория, созданный с помощью Git.\nGitHub — это не единственный хостинг. Есть GitLab, Bitbucket, Gitea.\nНо GitHub — самый популярный, особенно в открытых проектах и при поиске работы.\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Основные функции","level":2,"id":"Основные_функции_0"},{"heading":"Отличие от Git","level":2,"id":"Отличие_от_Git_0"}],"links":[],"author":"","coverImageURL":"","fullURL":"материалы/подтемы/секция-1.-javascript/тема-№6/что-такое-github.html","pathToRoot":"../../../..","attachments":[],"createdTime":1758305289183,"modifiedTime":1758305336404,"sourceSize":2258,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Тема №6/Что такое GitHub.md","exportPath":"материалы/подтемы/секция-1.-javascript/тема-№6/что-такое-github.html","showInTree":true,"treeOrder":25,"backlinks":["лекции/секция-1.-javascript/тема-№6.-git,-github.html"],"type":"markdown"}},"fileInfo":{"index.html":{"createdTime":1756485072721,"modifiedTime":1757700102590,"sourceSize":361,"sourcePath":"index.md","exportPath":"index.html","showInTree":true,"treeOrder":35,"backlinks":[],"type":"markdown","data":null},"site-lib/scripts/graph-wasm.wasm":{"createdTime":1756485288950,"modifiedTime":1756484808948.9563,"sourceSize":23655,"sourcePath":"","exportPath":"site-lib/scripts/graph-wasm.wasm","showInTree":false,"treeOrder":0,"backlinks":[],"type":"other","data":null},"site-lib/fonts/94f2f163d4b698242fef.otf":{"createdTime":1758305883920,"modifiedTime":1758305883920,"sourceSize":66800,"sourcePath":"","exportPath":"site-lib/fonts/94f2f163d4b698242fef.otf","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/72505e6a122c6acd5471.woff2":{"createdTime":1758305883921,"modifiedTime":1758305883921,"sourceSize":104232,"sourcePath":"","exportPath":"site-lib/fonts/72505e6a122c6acd5471.woff2","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/2d5198822ab091ce4305.woff2":{"createdTime":1758305883921,"modifiedTime":1758305883921,"sourceSize":104332,"sourcePath":"","exportPath":"site-lib/fonts/2d5198822ab091ce4305.woff2","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/c8ba52b05a9ef10f4758.woff2":{"createdTime":1758305883922,"modifiedTime":1758305883922,"sourceSize":98868,"sourcePath":"","exportPath":"site-lib/fonts/c8ba52b05a9ef10f4758.woff2","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/cb10ffd7684cd9836a05.woff2":{"createdTime":1758305883922,"modifiedTime":1758305883922,"sourceSize":106876,"sourcePath":"","exportPath":"site-lib/fonts/cb10ffd7684cd9836a05.woff2","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/b5f0f109bc88052d4000.woff2":{"createdTime":1758305883926,"modifiedTime":1758305883926,"sourceSize":105804,"sourcePath":"","exportPath":"site-lib/fonts/b5f0f109bc88052d4000.woff2","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/cbe0ae49c52c920fd563.woff2":{"createdTime":1758305883926,"modifiedTime":1758305883926,"sourceSize":106108,"sourcePath":"","exportPath":"site-lib/fonts/cbe0ae49c52c920fd563.woff2","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/535a6cf662596b3bd6a6.woff2":{"createdTime":1758305883927,"modifiedTime":1758305883927,"sourceSize":111708,"sourcePath":"","exportPath":"site-lib/fonts/535a6cf662596b3bd6a6.woff2","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/70cc7ff27245e82ad414.ttf":{"createdTime":1758305883928,"modifiedTime":1758305883928,"sourceSize":192740,"sourcePath":"","exportPath":"site-lib/fonts/70cc7ff27245e82ad414.ttf","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/454577c22304619db035.ttf":{"createdTime":1758305883929,"modifiedTime":1758305883929,"sourceSize":161376,"sourcePath":"","exportPath":"site-lib/fonts/454577c22304619db035.ttf","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/52ac8f3034507f1d9e53.ttf":{"createdTime":1758305883929,"modifiedTime":1758305883929,"sourceSize":191568,"sourcePath":"","exportPath":"site-lib/fonts/52ac8f3034507f1d9e53.ttf","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/05b618077343fbbd92b7.ttf":{"createdTime":1758305883930,"modifiedTime":1758305883930,"sourceSize":155288,"sourcePath":"","exportPath":"site-lib/fonts/05b618077343fbbd92b7.ttf","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/4bb6ac751d1c5478ff3a.woff2":{"createdTime":1758305883919,"modifiedTime":1758305883919,"sourceSize":7876,"sourcePath":"","exportPath":"site-lib/fonts/4bb6ac751d1c5478ff3a.woff2","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/media/6155340132a851f6089e.svg":{"createdTime":1758305883920,"modifiedTime":1758305883920,"sourceSize":315,"sourcePath":"","exportPath":"site-lib/media/6155340132a851f6089e.svg","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"site-lib/media/2308ab1944a6bfa5c5b8.svg":{"createdTime":1758305883920,"modifiedTime":1758305883920,"sourceSize":278,"sourcePath":"","exportPath":"site-lib/media/2308ab1944a6bfa5c5b8.svg","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"site-lib/html/file-tree-content.html":{"createdTime":1758305884439,"modifiedTime":1758305884439,"sourceSize":30638,"sourcePath":"","exportPath":"site-lib/html/file-tree-content.html","showInTree":false,"treeOrder":0,"backlinks":[],"type":"html","data":null},"site-lib/scripts/webpage.js":{"createdTime":1758117272263,"modifiedTime":1758117272263,"sourceSize":110729,"sourcePath":"","exportPath":"site-lib/scripts/webpage.js","showInTree":false,"treeOrder":0,"backlinks":[],"type":"script","data":null},"site-lib/scripts/graph-wasm.js":{"createdTime":1758117272263,"modifiedTime":1758117272263,"sourceSize":12885,"sourcePath":"","exportPath":"site-lib/scripts/graph-wasm.js","showInTree":false,"treeOrder":0,"backlinks":[],"type":"script","data":null},"site-lib/scripts/graph-render-worker.js":{"createdTime":1758117272263,"modifiedTime":1758117272263,"sourceSize":5681,"sourcePath":"","exportPath":"site-lib/scripts/graph-render-worker.js","showInTree":false,"treeOrder":0,"backlinks":[],"type":"script","data":null},"site-lib/media/favicon.png":{"createdTime":1758305883801,"modifiedTime":1758305883801,"sourceSize":1105,"sourcePath":"","exportPath":"site-lib/media/favicon.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"site-lib/styles/obsidian.css":{"createdTime":1758305884006,"modifiedTime":1758305884006,"sourceSize":198424,"sourcePath":"","exportPath":"site-lib/styles/obsidian.css","showInTree":false,"treeOrder":0,"backlinks":[],"type":"style","data":null},"site-lib/styles/global-variable-styles.css":{"createdTime":1758305883907,"modifiedTime":1758305883907,"sourceSize":305,"sourcePath":"","exportPath":"site-lib/styles/global-variable-styles.css","showInTree":false,"treeOrder":0,"backlinks":[],"type":"style","data":null},"site-lib/styles/main-styles.css":{"createdTime":1758117272309,"modifiedTime":1758117272309,"sourceSize":19521,"sourcePath":"","exportPath":"site-lib/styles/main-styles.css","showInTree":false,"treeOrder":0,"backlinks":[],"type":"style","data":null},"site-lib/rss.xml":{"createdTime":1758305886719,"modifiedTime":1758305886719,"sourceSize":150944,"sourcePath":"","exportPath":"site-lib/rss.xml","showInTree":false,"treeOrder":0,"backlinks":[],"type":"other","data":null},"site-lib/fonts/293fd13dbca5a3e450ef.woff2":{"createdTime":1758305883923,"modifiedTime":1758305883923,"sourceSize":105924,"sourcePath":"","exportPath":"site-lib/fonts/293fd13dbca5a3e450ef.woff2","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/085cb93e613ba3d40d2b.woff2":{"createdTime":1758305883923,"modifiedTime":1758305883923,"sourceSize":112184,"sourcePath":"","exportPath":"site-lib/fonts/085cb93e613ba3d40d2b.woff2","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"задания/секция-1.-javascript/практика-№1.-простая-веб-страница-с-html.html":{"createdTime":1757703305096,"modifiedTime":1758117287788,"sourceSize":3318,"sourcePath":"Задания/Секция 1. JavaScript/Практика №1. Простая веб-страница с HTML.md","exportPath":"задания/секция-1.-javascript/практика-№1.-простая-веб-страница-с-html.html","showInTree":true,"treeOrder":2,"backlinks":["лекции/секция-1.-javascript/тема-№3.-использование-javascript-в-браузере.html"],"type":"markdown","data":null},"лекции/секция-1.-javascript/тема-№1.-как-создаются-мобильные-приложения.html":{"createdTime":1757689990276,"modifiedTime":1757691620658,"sourceSize":608,"sourcePath":"Лекции/Секция 1. JavaScript/Тема №1. Как создаются мобильные приложения.md","exportPath":"лекции/секция-1.-javascript/тема-№1.-как-создаются-мобильные-приложения.html","showInTree":true,"treeOrder":5,"backlinks":["index.html"],"type":"markdown","data":null},"лекции/секция-1.-javascript/тема-№2.-основы-javascript.html":{"createdTime":1757690497891,"modifiedTime":1757698126020,"sourceSize":1252,"sourcePath":"Лекции/Секция 1. JavaScript/Тема №2. Основы JavaScript.md","exportPath":"лекции/секция-1.-javascript/тема-№2.-основы-javascript.html","showInTree":true,"treeOrder":6,"backlinks":["лекции/секция-1.-javascript/тема-№1.-как-создаются-мобильные-приложения.html"],"type":"markdown","data":null},"лекции/секция-1.-javascript/тема-№3.-использование-javascript-в-браузере.html":{"createdTime":1757695287075,"modifiedTime":1757703296437,"sourceSize":1462,"sourcePath":"Лекции/Секция 1. JavaScript/Тема №3. Использование JavaScript в браузере.md","exportPath":"лекции/секция-1.-javascript/тема-№3.-использование-javascript-в-браузере.html","showInTree":true,"treeOrder":7,"backlinks":["лекции/секция-1.-javascript/тема-№2.-основы-javascript.html"],"type":"markdown","data":null},"материалы/как-сделать/как-создавать-файлы-с-определённым-расширением.html":{"createdTime":1757702748102,"modifiedTime":1757702815939,"sourceSize":667,"sourcePath":"Материалы/Как сделать/Как создавать файлы с определённым расширением.md","exportPath":"материалы/как-сделать/как-создавать-файлы-с-определённым-расширением.html","showInTree":true,"treeOrder":10,"backlinks":["материалы/подтемы/секция-1.-javascript/создание-своей-html-страницы.html"],"type":"markdown","data":null},"материалы/подтемы/секция-1.-javascript/базовая-работа-с-элементами-веб-страницы-через-javascript.html":{"createdTime":1757702424568,"modifiedTime":1757702445919,"sourceSize":4668,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Базовая работа с элементами веб страницы через JavaScript.md","exportPath":"материалы/подтемы/секция-1.-javascript/базовая-работа-с-элементами-веб-страницы-через-javascript.html","showInTree":true,"treeOrder":13,"backlinks":["лекции/секция-1.-javascript/тема-№3.-использование-javascript-в-браузере.html"],"type":"markdown","data":null},"материалы/подтемы/секция-1.-javascript/базовое-понимание-синтаксиса-javascript.html":{"createdTime":1757696307916,"modifiedTime":1757696808206,"sourceSize":3470,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Базовое понимание синтаксиса JavaScript.md","exportPath":"материалы/подтемы/секция-1.-javascript/базовое-понимание-синтаксиса-javascript.html","showInTree":true,"treeOrder":14,"backlinks":["лекции/секция-1.-javascript/тема-№2.-основы-javascript.html"],"type":"markdown","data":null},"материалы/подтемы/секция-1.-javascript/основные-платформы-мобильных-приложений.html":{"createdTime":1757691090963,"modifiedTime":1757692705650,"sourceSize":16719,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Основные платформы мобильных приложений.md","exportPath":"материалы/подтемы/секция-1.-javascript/основные-платформы-мобильных-приложений.html","showInTree":true,"treeOrder":15,"backlinks":["лекции/секция-1.-javascript/тема-№1.-как-создаются-мобильные-приложения.html"],"type":"markdown","data":null},"материалы/подтемы/секция-1.-javascript/основные-понятия-веб-страницы.html":{"createdTime":1757701920807,"modifiedTime":1757702322322,"sourceSize":15642,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Основные понятия веб страницы.md","exportPath":"материалы/подтемы/секция-1.-javascript/основные-понятия-веб-страницы.html","showInTree":true,"treeOrder":16,"backlinks":["лекции/секция-1.-javascript/тема-№3.-использование-javascript-в-браузере.html"],"type":"markdown","data":null},"материалы/подтемы/секция-1.-javascript/основные-технологии-для-разработки-мобильных-приложений.html":{"createdTime":1757691441508,"modifiedTime":1757693475052,"sourceSize":15238,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Основные технологии для разработки мобильных приложений.md","exportPath":"материалы/подтемы/секция-1.-javascript/основные-технологии-для-разработки-мобильных-приложений.html","showInTree":true,"treeOrder":17,"backlinks":["лекции/секция-1.-javascript/тема-№1.-как-создаются-мобильные-приложения.html"],"type":"markdown","data":null},"материалы/подтемы/секция-1.-javascript/основные-типы-мобильных-приложений.html":{"createdTime":1757691037215,"modifiedTime":1757693227523,"sourceSize":15196,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Основные типы мобильных приложений.md","exportPath":"материалы/подтемы/секция-1.-javascript/основные-типы-мобильных-приложений.html","showInTree":true,"treeOrder":18,"backlinks":["лекции/секция-1.-javascript/тема-№1.-как-создаются-мобильные-приложения.html"],"type":"markdown","data":null},"материалы/подтемы/секция-1.-javascript/переменные-в-javascript.html":{"createdTime":1757696813511,"modifiedTime":1757698288236,"sourceSize":13815,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Переменные в JavaScript.md","exportPath":"материалы/подтемы/секция-1.-javascript/переменные-в-javascript.html","showInTree":true,"treeOrder":19,"backlinks":["материалы/подтемы/секция-1.-javascript/базовое-понимание-синтаксиса-javascript.html"],"type":"markdown","data":null},"материалы/подтемы/секция-1.-javascript/правила-наименования-переменных-в-javascript.html":{"createdTime":1757697173629,"modifiedTime":1757697313673,"sourceSize":4650,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Правила наименования переменных в JavaScript.md","exportPath":"материалы/подтемы/секция-1.-javascript/правила-наименования-переменных-в-javascript.html","showInTree":true,"treeOrder":20,"backlinks":["материалы/подтемы/секция-1.-javascript/переменные-в-javascript.html"],"type":"markdown","data":null},"материалы/подтемы/секция-1.-javascript/самое-простое-использование-javascript.html":{"createdTime":1757701551028,"modifiedTime":1757701721219,"sourceSize":3060,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Самое простое использование JavaScript.md","exportPath":"материалы/подтемы/секция-1.-javascript/самое-простое-использование-javascript.html","showInTree":true,"treeOrder":21,"backlinks":["лекции/секция-1.-javascript/тема-№3.-использование-javascript-в-браузере.html"],"type":"markdown","data":null},"материалы/подтемы/секция-1.-javascript/создание-своей-html-страницы.html":{"createdTime":1757702645321,"modifiedTime":1757703277500,"sourceSize":15024,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Создание своей HTML страницы.md","exportPath":"материалы/подтемы/секция-1.-javascript/создание-своей-html-страницы.html","showInTree":true,"treeOrder":22,"backlinks":["лекции/секция-1.-javascript/тема-№3.-использование-javascript-в-браузере.html"],"type":"markdown","data":null},"материалы/подтемы/секция-1.-javascript/что-такое-javascript,-история-появления.html":{"createdTime":1757695961822,"modifiedTime":1757696173734,"sourceSize":7899,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Что такое JavaScript, история появления.md","exportPath":"материалы/подтемы/секция-1.-javascript/что-такое-javascript,-история-появления.html","showInTree":true,"treeOrder":23,"backlinks":["лекции/секция-1.-javascript/тема-№2.-основы-javascript.html"],"type":"markdown","data":null},"материалы/файлы/pasted-image-20250912205946.png":{"createdTime":1757699986376,"modifiedTime":1757699986377,"sourceSize":102416,"sourcePath":"Материалы/Файлы/Pasted image 20250912205946.png","exportPath":"материалы/файлы/pasted-image-20250912205946.png","showInTree":true,"treeOrder":0,"backlinks":[],"type":"media","data":null},"материалы/файлы/pasted-image-20250912205946.html":{"createdTime":1757699986376,"modifiedTime":1757699986377,"sourceSize":102416,"sourcePath":"Материалы/Файлы/Pasted image 20250912205946.png","exportPath":"материалы/файлы/pasted-image-20250912205946.html","showInTree":true,"treeOrder":25,"backlinks":["index.html"],"type":"attachment","data":null},"материалы/файлы/pasted-image-20250912212732.png":{"createdTime":1757701652975,"modifiedTime":1757701652976,"sourceSize":105027,"sourcePath":"Материалы/Файлы/Pasted image 20250912212732.png","exportPath":"материалы/файлы/pasted-image-20250912212732.png","showInTree":true,"treeOrder":0,"backlinks":[],"type":"media","data":null},"материалы/файлы/pasted-image-20250912212732.html":{"createdTime":1757701652975,"modifiedTime":1757701652976,"sourceSize":105027,"sourcePath":"Материалы/Файлы/Pasted image 20250912212732.png","exportPath":"материалы/файлы/pasted-image-20250912212732.html","showInTree":true,"treeOrder":26,"backlinks":["материалы/подтемы/секция-1.-javascript/самое-простое-использование-javascript.html"],"type":"attachment","data":null},"материалы/файлы/pasted-image-20250912212810.png":{"createdTime":1757701690462,"modifiedTime":1757701690463,"sourceSize":4324,"sourcePath":"Материалы/Файлы/Pasted image 20250912212810.png","exportPath":"материалы/файлы/pasted-image-20250912212810.png","showInTree":true,"treeOrder":0,"backlinks":[],"type":"media","data":null},"материалы/файлы/pasted-image-20250912212810.html":{"createdTime":1757701690462,"modifiedTime":1757701690463,"sourceSize":4324,"sourcePath":"Материалы/Файлы/Pasted image 20250912212810.png","exportPath":"материалы/файлы/pasted-image-20250912212810.html","showInTree":true,"treeOrder":27,"backlinks":["материалы/подтемы/секция-1.-javascript/самое-простое-использование-javascript.html"],"type":"attachment","data":null},"материалы/файлы/pasted-image-20250912212840.png":{"createdTime":1757701720319,"modifiedTime":1757701720320,"sourceSize":11213,"sourcePath":"Материалы/Файлы/Pasted image 20250912212840.png","exportPath":"материалы/файлы/pasted-image-20250912212840.png","showInTree":true,"treeOrder":0,"backlinks":[],"type":"media","data":null},"материалы/файлы/pasted-image-20250912212840.html":{"createdTime":1757701720319,"modifiedTime":1757701720320,"sourceSize":11213,"sourcePath":"Материалы/Файлы/Pasted image 20250912212840.png","exportPath":"материалы/файлы/pasted-image-20250912212840.html","showInTree":true,"treeOrder":28,"backlinks":["материалы/подтемы/секция-1.-javascript/самое-простое-использование-javascript.html"],"type":"attachment","data":null},"материалы/файлы/pasted-image-20250912214611.png":{"createdTime":1757702771590,"modifiedTime":1757702771591,"sourceSize":21467,"sourcePath":"Материалы/Файлы/Pasted image 20250912214611.png","exportPath":"материалы/файлы/pasted-image-20250912214611.png","showInTree":true,"treeOrder":0,"backlinks":[],"type":"media","data":null},"материалы/файлы/pasted-image-20250912214611.html":{"createdTime":1757702771590,"modifiedTime":1757702771591,"sourceSize":21467,"sourcePath":"Материалы/Файлы/Pasted image 20250912214611.png","exportPath":"материалы/файлы/pasted-image-20250912214611.html","showInTree":true,"treeOrder":29,"backlinks":["материалы/как-сделать/как-создавать-файлы-с-определённым-расширением.html"],"type":"attachment","data":null},"материалы/файлы/pasted-image-20250912214624.png":{"createdTime":1757702784529,"modifiedTime":1757702784529,"sourceSize":46166,"sourcePath":"Материалы/Файлы/Pasted image 20250912214624.png","exportPath":"материалы/файлы/pasted-image-20250912214624.png","showInTree":true,"treeOrder":0,"backlinks":[],"type":"media","data":null},"материалы/файлы/pasted-image-20250912214624.html":{"createdTime":1757702784529,"modifiedTime":1757702784529,"sourceSize":46166,"sourcePath":"Материалы/Файлы/Pasted image 20250912214624.png","exportPath":"материалы/файлы/pasted-image-20250912214624.html","showInTree":true,"treeOrder":30,"backlinks":["материалы/как-сделать/как-создавать-файлы-с-определённым-расширением.html"],"type":"attachment","data":null},"материалы/файлы/pasted-image-20250912214643.png":{"createdTime":1757702803142,"modifiedTime":1757702803143,"sourceSize":29457,"sourcePath":"Материалы/Файлы/Pasted image 20250912214643.png","exportPath":"материалы/файлы/pasted-image-20250912214643.png","showInTree":true,"treeOrder":0,"backlinks":[],"type":"media","data":null},"материалы/файлы/pasted-image-20250912214643.html":{"createdTime":1757702803142,"modifiedTime":1757702803143,"sourceSize":29457,"sourcePath":"Материалы/Файлы/Pasted image 20250912214643.png","exportPath":"материалы/файлы/pasted-image-20250912214643.html","showInTree":true,"treeOrder":31,"backlinks":["материалы/как-сделать/как-создавать-файлы-с-определённым-расширением.html"],"type":"attachment","data":null},"материалы/файлы/pasted-image-20250912214649.png":{"createdTime":1757702809253,"modifiedTime":1757702809254,"sourceSize":4311,"sourcePath":"Материалы/Файлы/Pasted image 20250912214649.png","exportPath":"материалы/файлы/pasted-image-20250912214649.png","showInTree":true,"treeOrder":0,"backlinks":[],"type":"media","data":null},"материалы/файлы/pasted-image-20250912214649.html":{"createdTime":1757702809253,"modifiedTime":1757702809254,"sourceSize":4311,"sourcePath":"Материалы/Файлы/Pasted image 20250912214649.png","exportPath":"материалы/файлы/pasted-image-20250912214649.html","showInTree":true,"treeOrder":32,"backlinks":["материалы/как-сделать/как-создавать-файлы-с-определённым-расширением.html"],"type":"attachment","data":null},"материалы/файлы/pasted-image-20250912214653.png":{"createdTime":1757702813923,"modifiedTime":1757702813924,"sourceSize":3794,"sourcePath":"Материалы/Файлы/Pasted image 20250912214653.png","exportPath":"материалы/файлы/pasted-image-20250912214653.png","showInTree":true,"treeOrder":0,"backlinks":[],"type":"media","data":null},"материалы/файлы/pasted-image-20250912214653.html":{"createdTime":1757702813923,"modifiedTime":1757702813924,"sourceSize":3794,"sourcePath":"Материалы/Файлы/Pasted image 20250912214653.png","exportPath":"материалы/файлы/pasted-image-20250912214653.html","showInTree":true,"treeOrder":33,"backlinks":["материалы/как-сделать/как-создавать-файлы-с-определённым-расширением.html"],"type":"attachment","data":null},"материалы/файлы/qrcod_72k5.png":{"createdTime":1757700053755,"modifiedTime":1757700053762,"sourceSize":34656,"sourcePath":"Материалы/Файлы/qrcod_72k5.png","exportPath":"материалы/файлы/qrcod_72k5.png","showInTree":true,"treeOrder":0,"backlinks":[],"type":"media","data":null},"материалы/файлы/qrcod_72k5.html":{"createdTime":1757700053755,"modifiedTime":1757700053762,"sourceSize":34656,"sourcePath":"Материалы/Файлы/qrcod_72k5.png","exportPath":"материалы/файлы/qrcod_72k5.html","showInTree":true,"treeOrder":34,"backlinks":["index.html"],"type":"attachment","data":null},"лекции/секция-1.-javascript/тема-№4.-node.js,-примитивные-типы-данных-javascript.html":{"createdTime":1758117360807,"modifiedTime":1758131003794,"sourceSize":1315,"sourcePath":"Лекции/Секция 1. JavaScript/Тема №4. Node.JS, примитивные типы данных JavaScript.md","exportPath":"лекции/секция-1.-javascript/тема-№4.-node.js,-примитивные-типы-данных-javascript.html","showInTree":true,"treeOrder":8,"backlinks":["лекции/секция-1.-javascript/тема-№3.-использование-javascript-в-браузере.html"],"type":"markdown","data":null},"лекции/секция-1.-javascript/тема-№5.-операторы-и-операции-в-javascript.html":{"createdTime":1758131110815,"modifiedTime":1758304372689,"sourceSize":1455,"sourcePath":"Лекции/Секция 1. JavaScript/Тема №5. Операторы и операции в JavaScript.md","exportPath":"лекции/секция-1.-javascript/тема-№5.-операторы-и-операции-в-javascript.html","showInTree":true,"treeOrder":9,"backlinks":["лекции/секция-1.-javascript/тема-№4.-node.js,-примитивные-типы-данных-javascript.html"],"type":"markdown","data":null},"материалы/подтемы/секция-1.-javascript/арифметические-операторы-javascript.html":{"createdTime":1758133255521,"modifiedTime":1758133557709,"sourceSize":4417,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Арифметические операторы JavaScript.md","exportPath":"материалы/подтемы/секция-1.-javascript/арифметические-операторы-javascript.html","showInTree":true,"treeOrder":15,"backlinks":["лекции/секция-1.-javascript/тема-№5.-операторы-и-операции-в-javascript.html"],"type":"markdown","data":null},"материалы/подтемы/секция-1.-javascript/логические-операторы-javascript.html":{"createdTime":1758133629633,"modifiedTime":1758134149139,"sourceSize":6159,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Логические операторы JavaScript.md","exportPath":"материалы/подтемы/секция-1.-javascript/логические-операторы-javascript.html","showInTree":true,"treeOrder":18,"backlinks":["лекции/секция-1.-javascript/тема-№5.-операторы-и-операции-в-javascript.html"],"type":"markdown","data":null},"материалы/подтемы/секция-1.-javascript/операторы-присваивания-javascript.html":{"createdTime":1758133794357,"modifiedTime":1758134496353,"sourceSize":6443,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Операторы присваивания JavaScript.md","exportPath":"материалы/подтемы/секция-1.-javascript/операторы-присваивания-javascript.html","showInTree":true,"treeOrder":19,"backlinks":["лекции/секция-1.-javascript/тема-№5.-операторы-и-операции-в-javascript.html"],"type":"markdown","data":null},"материалы/подтемы/секция-1.-javascript/операторы-работы-с-битами.html":{"createdTime":1758134735377,"modifiedTime":1758135009581,"sourceSize":7214,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Операторы работы с битами.md","exportPath":"материалы/подтемы/секция-1.-javascript/операторы-работы-с-битами.html","showInTree":true,"treeOrder":20,"backlinks":["лекции/секция-1.-javascript/тема-№5.-операторы-и-операции-в-javascript.html"],"type":"markdown","data":null},"материалы/подтемы/секция-1.-javascript/операторы-сравнения-javascript.html":{"createdTime":1758134164670,"modifiedTime":1758134167288,"sourceSize":5077,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Операторы сравнения JavaScript.md","exportPath":"материалы/подтемы/секция-1.-javascript/операторы-сравнения-javascript.html","showInTree":true,"treeOrder":21,"backlinks":["лекции/секция-1.-javascript/тема-№5.-операторы-и-операции-в-javascript.html"],"type":"markdown","data":null},"материалы/подтемы/секция-1.-javascript/определение-оператора-и-операнда.html":{"createdTime":1758133057108,"modifiedTime":1758133320930,"sourceSize":1060,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Определение оператора и операнда.md","exportPath":"материалы/подтемы/секция-1.-javascript/определение-оператора-и-операнда.html","showInTree":true,"treeOrder":22,"backlinks":["лекции/секция-1.-javascript/тема-№5.-операторы-и-операции-в-javascript.html"],"type":"markdown","data":null},"материалы/подтемы/секция-1.-javascript/примитивные-типы-данных-javascript.html":{"createdTime":1758129118688,"modifiedTime":1758130955545,"sourceSize":18935,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Примитивные типы данных JavaScript.md","exportPath":"материалы/подтемы/секция-1.-javascript/примитивные-типы-данных-javascript.html","showInTree":true,"treeOrder":29,"backlinks":["лекции/секция-1.-javascript/тема-№4.-node.js,-примитивные-типы-данных-javascript.html"],"type":"markdown","data":null},"материалы/подтемы/секция-1.-javascript/приоритет-операторов-и-ассоциативность.html":{"createdTime":1758135243042,"modifiedTime":1758135434026,"sourceSize":7759,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Приоритет операторов и ассоциативность.md","exportPath":"материалы/подтемы/секция-1.-javascript/приоритет-операторов-и-ассоциативность.html","showInTree":true,"treeOrder":30,"backlinks":["лекции/секция-1.-javascript/тема-№5.-операторы-и-операции-в-javascript.html"],"type":"markdown","data":null},"материалы/подтемы/секция-1.-javascript/установка-и-базовое-использование-node.js.html":{"createdTime":1758129100980,"modifiedTime":1758129739398,"sourceSize":4135,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Установка и базовое использование Node.js.md","exportPath":"материалы/подтемы/секция-1.-javascript/установка-и-базовое-использование-node.js.html","showInTree":true,"treeOrder":33,"backlinks":["лекции/секция-1.-javascript/тема-№4.-node.js,-примитивные-типы-данных-javascript.html"],"type":"markdown","data":null},"материалы/подтемы/секция-1.-javascript/что-такое-node.js.html":{"createdTime":1758129075666,"modifiedTime":1758129483350,"sourceSize":5177,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Что такое Node.js.md","exportPath":"материалы/подтемы/секция-1.-javascript/что-такое-node.js.html","showInTree":true,"treeOrder":35,"backlinks":["лекции/секция-1.-javascript/тема-№4.-node.js,-примитивные-типы-данных-javascript.html"],"type":"markdown","data":null},"материалы/файлы/pasted-image-20240923235323.png":{"createdTime":1758130114832,"modifiedTime":1750135291676,"sourceSize":400632,"sourcePath":"Материалы/Файлы/Pasted image 20240923235323.png","exportPath":"материалы/файлы/pasted-image-20240923235323.png","showInTree":true,"treeOrder":0,"backlinks":[],"type":"media","data":null},"материалы/файлы/pasted-image-20240923235323.html":{"createdTime":1758130114832,"modifiedTime":1750135291676,"sourceSize":400632,"sourcePath":"Материалы/Файлы/Pasted image 20240923235323.png","exportPath":"материалы/файлы/pasted-image-20240923235323.html","showInTree":true,"treeOrder":37,"backlinks":["материалы/подтемы/секция-1.-javascript/примитивные-типы-данных-javascript.html"],"type":"attachment","data":null},"материалы/файлы/pasted-image-20240928221620.png":{"createdTime":1758129845153,"modifiedTime":1750135107566,"sourceSize":24101,"sourcePath":"Материалы/Файлы/Pasted image 20240928221620.png","exportPath":"материалы/файлы/pasted-image-20240928221620.png","showInTree":true,"treeOrder":0,"backlinks":[],"type":"media","data":null},"материалы/файлы/pasted-image-20240928221620.html":{"createdTime":1758129845153,"modifiedTime":1750135107566,"sourceSize":24101,"sourcePath":"Материалы/Файлы/Pasted image 20240928221620.png","exportPath":"материалы/файлы/pasted-image-20240928221620.html","showInTree":true,"treeOrder":38,"backlinks":["материалы/подтемы/секция-1.-javascript/установка-и-базовое-использование-node.js.html"],"type":"attachment","data":null},"материалы/файлы/pasted-image-20240928222139.png":{"createdTime":1758129845158,"modifiedTime":1750135129731,"sourceSize":78566,"sourcePath":"Материалы/Файлы/Pasted image 20240928222139.png","exportPath":"материалы/файлы/pasted-image-20240928222139.png","showInTree":true,"treeOrder":0,"backlinks":[],"type":"media","data":null},"материалы/файлы/pasted-image-20240928222139.html":{"createdTime":1758129845158,"modifiedTime":1750135129731,"sourceSize":78566,"sourcePath":"Материалы/Файлы/Pasted image 20240928222139.png","exportPath":"материалы/файлы/pasted-image-20240928222139.html","showInTree":true,"treeOrder":39,"backlinks":["материалы/подтемы/секция-1.-javascript/установка-и-базовое-использование-node.js.html"],"type":"attachment","data":null},"материалы/файлы/pasted-image-20240928222237.png":{"createdTime":1758129845162,"modifiedTime":1750135033068,"sourceSize":621,"sourcePath":"Материалы/Файлы/Pasted image 20240928222237.png","exportPath":"материалы/файлы/pasted-image-20240928222237.png","showInTree":true,"treeOrder":0,"backlinks":[],"type":"media","data":null},"материалы/файлы/pasted-image-20240928222237.html":{"createdTime":1758129845162,"modifiedTime":1750135033068,"sourceSize":621,"sourcePath":"Материалы/Файлы/Pasted image 20240928222237.png","exportPath":"материалы/файлы/pasted-image-20240928222237.html","showInTree":true,"treeOrder":40,"backlinks":["материалы/подтемы/секция-1.-javascript/установка-и-базовое-использование-node.js.html"],"type":"attachment","data":null},"материалы/файлы/pasted-image-20250917202240.png":{"createdTime":1758129760459,"modifiedTime":1758129760459,"sourceSize":24101,"sourcePath":"Материалы/Файлы/Pasted image 20250917202240.png","exportPath":"материалы/файлы/pasted-image-20250917202240.png","showInTree":true,"treeOrder":0,"backlinks":[],"type":"media","data":null},"материалы/файлы/pasted-image-20250917202240.html":{"createdTime":1758129760459,"modifiedTime":1758129760459,"sourceSize":24101,"sourcePath":"Материалы/Файлы/Pasted image 20250917202240.png","exportPath":"материалы/файлы/pasted-image-20250917202240.html","showInTree":true,"treeOrder":50,"backlinks":[],"type":"attachment","data":null},"лекции/секция-1.-javascript/тема-№6.-git,-github.html":{"createdTime":1758292408362,"modifiedTime":1758305772186,"sourceSize":1244,"sourcePath":"Лекции/Секция 1. JavaScript/Тема №6. Git, GitHub.md","exportPath":"лекции/секция-1.-javascript/тема-№6.-git,-github.html","showInTree":true,"treeOrder":10,"backlinks":["лекции/секция-1.-javascript/тема-№5.-операторы-и-операции-в-javascript.html"],"type":"markdown","data":null},"материалы/подтемы/секция-1.-javascript/тема-№6/базовые-команды-git.html":{"createdTime":1758304903420,"modifiedTime":1758304966942,"sourceSize":5306,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Тема №6/Базовые команды Git.md","exportPath":"материалы/подтемы/секция-1.-javascript/тема-№6/базовые-команды-git.html","showInTree":true,"treeOrder":17,"backlinks":["лекции/секция-1.-javascript/тема-№6.-git,-github.html"],"type":"markdown","data":null},"материалы/подтемы/секция-1.-javascript/тема-№6/базовые-понятия-git.html":{"createdTime":1758304877162,"modifiedTime":1758304885322,"sourceSize":0,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Тема №6/Базовые понятия Git.md","exportPath":"материалы/подтемы/секция-1.-javascript/тема-№6/базовые-понятия-git.html","showInTree":true,"treeOrder":18,"backlinks":[],"type":"markdown","data":null},"материалы/подтемы/секция-1.-javascript/тема-№6/основные-понятия-git.html":{"createdTime":1758304675640,"modifiedTime":1758304999559,"sourceSize":5771,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Тема №6/Основные понятия Git.md","exportPath":"материалы/подтемы/секция-1.-javascript/тема-№6/основные-понятия-git.html","showInTree":true,"treeOrder":19,"backlinks":["лекции/секция-1.-javascript/тема-№6.-git,-github.html"],"type":"markdown","data":null},"материалы/подтемы/секция-1.-javascript/тема-№6/работа-с-ветками-git.html":{"createdTime":1758305014790,"modifiedTime":1758305095855,"sourceSize":4169,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Тема №6/Работа с ветками Git.md","exportPath":"материалы/подтемы/секция-1.-javascript/тема-№6/работа-с-ветками-git.html","showInTree":true,"treeOrder":20,"backlinks":["лекции/секция-1.-javascript/тема-№6.-git,-github.html"],"type":"markdown","data":null},"материалы/подтемы/секция-1.-javascript/тема-№6/работа-с-удалёнными-репозиториями.html":{"createdTime":1758305328731,"modifiedTime":1758305450784,"sourceSize":3863,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Тема №6/Работа с удалёнными репозиториями.md","exportPath":"материалы/подтемы/секция-1.-javascript/тема-№6/работа-с-удалёнными-репозиториями.html","showInTree":true,"treeOrder":21,"backlinks":["лекции/секция-1.-javascript/тема-№6.-git,-github.html"],"type":"markdown","data":null},"материалы/подтемы/секция-1.-javascript/тема-№6/рекомендации-по-использованию-git.html":{"createdTime":1758305610917,"modifiedTime":1758305751652,"sourceSize":4475,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Тема №6/Рекомендации по использованию Git.md","exportPath":"материалы/подтемы/секция-1.-javascript/тема-№6/рекомендации-по-использованию-git.html","showInTree":true,"treeOrder":22,"backlinks":["лекции/секция-1.-javascript/тема-№6.-git,-github.html"],"type":"markdown","data":null},"материалы/подтемы/секция-1.-javascript/тема-№6/файл-.gitignore.html":{"createdTime":1758305456872,"modifiedTime":1758305590421,"sourceSize":2311,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Тема №6/Файл .gitignore.md","exportPath":"материалы/подтемы/секция-1.-javascript/тема-№6/файл-.gitignore.html","showInTree":true,"treeOrder":23,"backlinks":["лекции/секция-1.-javascript/тема-№6.-git,-github.html"],"type":"markdown","data":null},"материалы/подтемы/секция-1.-javascript/тема-№6/что-такое-git.html":{"createdTime":1758304501406,"modifiedTime":1758305007670,"sourceSize":3437,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Тема №6/Что такое Git.md","exportPath":"материалы/подтемы/секция-1.-javascript/тема-№6/что-такое-git.html","showInTree":true,"treeOrder":24,"backlinks":["лекции/секция-1.-javascript/тема-№6.-git,-github.html"],"type":"markdown","data":null},"материалы/подтемы/секция-1.-javascript/тема-№6/что-такое-github.html":{"createdTime":1758305289183,"modifiedTime":1758305336404,"sourceSize":2258,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Тема №6/Что такое GitHub.md","exportPath":"материалы/подтемы/секция-1.-javascript/тема-№6/что-такое-github.html","showInTree":true,"treeOrder":25,"backlinks":["лекции/секция-1.-javascript/тема-№6.-git,-github.html"],"type":"markdown","data":null}},"sourceToTarget":{"index.md":"index.html","":"site-lib/rss.xml","Pasted image 20250906080710.png":"pasted-image-20250906080710.html","Задания/Секция 1. JavaScript/Практика №1. Простая веб-страница с HTML.md":"задания/секция-1.-javascript/практика-№1.-простая-веб-страница-с-html.html","Лекции/Секция 1. JavaScript/Тема №1. Как создаются мобильные приложения.md":"лекции/секция-1.-javascript/тема-№1.-как-создаются-мобильные-приложения.html","Лекции/Секция 1. JavaScript/Тема №2. Основы JavaScript.md":"лекции/секция-1.-javascript/тема-№2.-основы-javascript.html","Лекции/Секция 1. JavaScript/Тема №3. Использование JavaScript в браузере.md":"лекции/секция-1.-javascript/тема-№3.-использование-javascript-в-браузере.html","Материалы/Как сделать/Как создавать файлы с определённым расширением.md":"материалы/как-сделать/как-создавать-файлы-с-определённым-расширением.html","Материалы/Подтемы/Секция 1. JavaScript/Базовая работа с элементами веб страницы через JavaScript.md":"материалы/подтемы/секция-1.-javascript/базовая-работа-с-элементами-веб-страницы-через-javascript.html","Материалы/Подтемы/Секция 1. JavaScript/Базовое понимание синтаксиса JavaScript.md":"материалы/подтемы/секция-1.-javascript/базовое-понимание-синтаксиса-javascript.html","Материалы/Подтемы/Секция 1. JavaScript/Основные платформы мобильных приложений.md":"материалы/подтемы/секция-1.-javascript/основные-платформы-мобильных-приложений.html","Материалы/Подтемы/Секция 1. JavaScript/Основные понятия веб страницы.md":"материалы/подтемы/секция-1.-javascript/основные-понятия-веб-страницы.html","Материалы/Подтемы/Секция 1. JavaScript/Основные технологии для разработки мобильных приложений.md":"материалы/подтемы/секция-1.-javascript/основные-технологии-для-разработки-мобильных-приложений.html","Материалы/Подтемы/Секция 1. JavaScript/Основные типы мобильных приложений.md":"материалы/подтемы/секция-1.-javascript/основные-типы-мобильных-приложений.html","Материалы/Подтемы/Секция 1. JavaScript/Переменные в JavaScript.md":"материалы/подтемы/секция-1.-javascript/переменные-в-javascript.html","Материалы/Подтемы/Секция 1. JavaScript/Правила наименования переменных в JavaScript.md":"материалы/подтемы/секция-1.-javascript/правила-наименования-переменных-в-javascript.html","Материалы/Подтемы/Секция 1. JavaScript/Самое простое использование JavaScript.md":"материалы/подтемы/секция-1.-javascript/самое-простое-использование-javascript.html","Материалы/Подтемы/Секция 1. JavaScript/Создание своей HTML страницы.md":"материалы/подтемы/секция-1.-javascript/создание-своей-html-страницы.html","Материалы/Подтемы/Секция 1. JavaScript/Что такое JavaScript, история появления.md":"материалы/подтемы/секция-1.-javascript/что-такое-javascript,-история-появления.html","Материалы/Файлы/Pasted image 20250912205946.png":"материалы/файлы/pasted-image-20250912205946.html","Материалы/Файлы/Pasted image 20250912212732.png":"материалы/файлы/pasted-image-20250912212732.html","Материалы/Файлы/Pasted image 20250912212810.png":"материалы/файлы/pasted-image-20250912212810.html","Материалы/Файлы/Pasted image 20250912212840.png":"материалы/файлы/pasted-image-20250912212840.html","Материалы/Файлы/Pasted image 20250912214611.png":"материалы/файлы/pasted-image-20250912214611.html","Материалы/Файлы/Pasted image 20250912214624.png":"материалы/файлы/pasted-image-20250912214624.html","Материалы/Файлы/Pasted image 20250912214643.png":"материалы/файлы/pasted-image-20250912214643.html","Материалы/Файлы/Pasted image 20250912214649.png":"материалы/файлы/pasted-image-20250912214649.html","Материалы/Файлы/Pasted image 20250912214653.png":"материалы/файлы/pasted-image-20250912214653.html","Материалы/Файлы/qrcod_72k5.png":"материалы/файлы/qrcod_72k5.html","Лекции/Секция 1. JavaScript/Тема №4. Node.JS, примитивные типы данных JavaScript.md":"лекции/секция-1.-javascript/тема-№4.-node.js,-примитивные-типы-данных-javascript.html","Лекции/Секция 1. JavaScript/Тема №5. Операторы и операции в JavaScript.md":"лекции/секция-1.-javascript/тема-№5.-операторы-и-операции-в-javascript.html","Материалы/Подтемы/Секция 1. JavaScript/Арифметические операторы JavaScript.md":"материалы/подтемы/секция-1.-javascript/арифметические-операторы-javascript.html","Материалы/Подтемы/Секция 1. JavaScript/Логические операторы JavaScript.md":"материалы/подтемы/секция-1.-javascript/логические-операторы-javascript.html","Материалы/Подтемы/Секция 1. JavaScript/Операторы присваивания JavaScript.md":"материалы/подтемы/секция-1.-javascript/операторы-присваивания-javascript.html","Материалы/Подтемы/Секция 1. JavaScript/Операторы работы с битами.md":"материалы/подтемы/секция-1.-javascript/операторы-работы-с-битами.html","Материалы/Подтемы/Секция 1. JavaScript/Операторы сравнения JavaScript.md":"материалы/подтемы/секция-1.-javascript/операторы-сравнения-javascript.html","Материалы/Подтемы/Секция 1. JavaScript/Определение оператора и операнда.md":"материалы/подтемы/секция-1.-javascript/определение-оператора-и-операнда.html","Материалы/Подтемы/Секция 1. JavaScript/Примитивные типы данных JavaScript.md":"материалы/подтемы/секция-1.-javascript/примитивные-типы-данных-javascript.html","Материалы/Подтемы/Секция 1. JavaScript/Приоритет операторов и ассоциативность.md":"материалы/подтемы/секция-1.-javascript/приоритет-операторов-и-ассоциативность.html","Материалы/Подтемы/Секция 1. JavaScript/Установка и базовое использование Node.js.md":"материалы/подтемы/секция-1.-javascript/установка-и-базовое-использование-node.js.html","Материалы/Подтемы/Секция 1. JavaScript/Что такое Node.js.md":"материалы/подтемы/секция-1.-javascript/что-такое-node.js.html","Материалы/Файлы/Pasted image 20240923235323.png":"материалы/файлы/pasted-image-20240923235323.html","Материалы/Файлы/Pasted image 20240928221620.png":"материалы/файлы/pasted-image-20240928221620.html","Материалы/Файлы/Pasted image 20240928222139.png":"материалы/файлы/pasted-image-20240928222139.html","Материалы/Файлы/Pasted image 20240928222237.png":"материалы/файлы/pasted-image-20240928222237.html","Материалы/Файлы/Pasted image 20250917202240.png":"материалы/файлы/pasted-image-20250917202240.html","Лекции/Секция 1. JavaScript/Тема №6. Git, GitHub.md":"лекции/секция-1.-javascript/тема-№6.-git,-github.html","Материалы/Подтемы/Секция 1. JavaScript/Тема №6/Базовые команды Git.md":"материалы/подтемы/секция-1.-javascript/тема-№6/базовые-команды-git.html","Материалы/Подтемы/Секция 1. JavaScript/Тема №6/Базовые понятия Git.md":"материалы/подтемы/секция-1.-javascript/тема-№6/базовые-понятия-git.html","Материалы/Подтемы/Секция 1. JavaScript/Тема №6/Основные понятия Git.md":"материалы/подтемы/секция-1.-javascript/тема-№6/основные-понятия-git.html","Материалы/Подтемы/Секция 1. JavaScript/Тема №6/Работа с ветками Git.md":"материалы/подтемы/секция-1.-javascript/тема-№6/работа-с-ветками-git.html","Материалы/Подтемы/Секция 1. JavaScript/Тема №6/Работа с удалёнными репозиториями.md":"материалы/подтемы/секция-1.-javascript/тема-№6/работа-с-удалёнными-репозиториями.html","Материалы/Подтемы/Секция 1. JavaScript/Тема №6/Рекомендации по использованию Git.md":"материалы/подтемы/секция-1.-javascript/тема-№6/рекомендации-по-использованию-git.html","Материалы/Подтемы/Секция 1. JavaScript/Тема №6/Файл .gitignore.md":"материалы/подтемы/секция-1.-javascript/тема-№6/файл-.gitignore.html","Материалы/Подтемы/Секция 1. JavaScript/Тема №6/Что такое Git.md":"материалы/подтемы/секция-1.-javascript/тема-№6/что-такое-git.html","Материалы/Подтемы/Секция 1. JavaScript/Тема №6/Что такое GitHub.md":"материалы/подтемы/секция-1.-javascript/тема-№6/что-такое-github.html"},"featureOptions":{"backlinks":{"featureId":"backlinks","enabled":true,"unavailable":false,"alwaysEnabled":false,"hideSettingsButton":false,"featurePlacement":{"selector":".footer","type":"start","info_selector":{"show":true,"name":"","description":"CSS selector for an element. The feature will be placed relative to this element.","placeholder":""},"info_type":{"show":true,"name":"","description":"Will this feature be placed before, after, or inside (at the beggining or end).","placeholder":"","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_featurePlacement":{"show":true,"name":"","description":"Where to place this feature on the page. (Relative to the selector)","placeholder":""},"displayTitle":"Backlinks","info_displayTitle":{"show":true,"name":"","description":"Descriptive title to show above the feature","placeholder":""}},"tags":{"featureId":"tags","enabled":true,"unavailable":false,"alwaysEnabled":false,"hideSettingsButton":false,"featurePlacement":{"selector":".header .data-bar","type":"end","info_selector":{"show":true,"name":"","description":"CSS selector for an element. The feature will be placed relative to this element.","placeholder":""},"info_type":{"show":true,"name":"","description":"Will this feature be placed before, after, or inside (at the beggining or end).","placeholder":"","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_featurePlacement":{"show":true,"name":"","description":"Where to place this feature on the page. (Relative to the selector)","placeholder":""},"displayTitle":"","info_displayTitle":{"show":true,"name":"","description":"Descriptive title to show above the feature","placeholder":""},"showInlineTags":true,"showFrontmatterTags":true,"info_showInlineTags":{"show":true,"name":"","description":"Show tags defined inside the document at the top of the page.","placeholder":""},"info_showFrontmatterTags":{"show":true,"name":"","description":"Show tags defined in the frontmatter of the document at the top of the page.","placeholder":""}},"alias":{"featureId":"aliases","enabled":true,"unavailable":false,"alwaysEnabled":false,"hideSettingsButton":false,"featurePlacement":{"selector":".header .data-bar","type":"start","info_selector":{"show":true,"name":"","description":"CSS selector for an element. The feature will be placed relative to this element.","placeholder":""},"info_type":{"show":true,"name":"","description":"Will this feature be placed before, after, or inside (at the beggining or end).","placeholder":"","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_featurePlacement":{"show":true,"name":"","description":"Where to place this feature on the page. (Relative to the selector)","placeholder":""},"displayTitle":"Aliases","info_displayTitle":{"show":true,"name":"","description":"Descriptive title to show above the feature","placeholder":""}},"properties":{"featureId":"properties","enabled":true,"unavailable":false,"alwaysEnabled":false,"hideSettingsButton":false,"featurePlacement":{"selector":".header","type":"start","info_selector":{"show":true,"name":"","description":"CSS selector for an element. The feature will be placed relative to this element.","placeholder":""},"info_type":{"show":true,"name":"","description":"Will this feature be placed before, after, or inside (at the beggining or end).","placeholder":"","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_featurePlacement":{"show":true,"name":"","description":"Where to place this feature on the page. (Relative to the selector)","placeholder":""},"displayTitle":"Properties","info_displayTitle":{"show":true,"name":"","description":"Descriptive title to show above the feature","placeholder":""},"info_hideProperties":{"show":true,"name":"","description":"A list of properties to hide from the properties view","placeholder":""}},"fileNavigation":{"featureId":"file-navigation","enabled":true,"unavailable":false,"alwaysEnabled":false,"hideSettingsButton":false,"featurePlacement":{"selector":"#left-sidebar-content","type":"end","info_selector":{"show":true,"name":"","description":"CSS selector for an element. The feature will be placed relative to this element.","placeholder":""},"info_type":{"show":true,"name":"","description":"Will this feature be placed before, after, or inside (at the beggining or end).","placeholder":"","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_featurePlacement":{"show":true,"name":"","description":"Where to place this feature on the page. (Relative to the selector)","placeholder":""},"info_includePath":{"show":false,"name":"","description":"","placeholder":""},"showCustomIcons":false,"showDefaultFolderIcons":false,"showDefaultFileIcons":false,"defaultFolderIcon":"lucide//folder","defaultFileIcon":"lucide//file","defaultMediaIcon":"lucide//file-image","exposeStartingPath":true,"info_showCustomIcons":{"show":true,"name":"","description":"Show custom icons for files and folders","placeholder":""},"info_showDefaultFolderIcons":{"show":true,"name":"","description":"Show a default icon of a folder for every folder in the tree","placeholder":""},"info_showDefaultFileIcons":{"show":true,"name":"","description":"Show a default icon of a file for every file in the tree","placeholder":""},"info_defaultFolderIcon":{"show":true,"name":"","description":"The icon to use for folders. Prefix with 'lucide//' to use a Lucide icon","placeholder":""},"info_defaultFileIcon":{"show":true,"name":"","description":"The icon to use for files. Prefix with 'lucide//' to use a Lucide icon","placeholder":""},"info_defaultMediaIcon":{"show":true,"name":"","description":"The icon to use for media files. Prefix with 'lucide//' to use a Lucide icon","placeholder":""},"info_exposeStartingPath":{"show":true,"name":"","description":"Whether or not to show the current file in the file tree when the page is first loaded","placeholder":""},"includePath":"site-lib/html/file-tree.html"},"search":{"featureId":"search","enabled":true,"unavailable":false,"alwaysEnabled":false,"hideSettingsButton":false,"featurePlacement":{"selector":"#left-sidebar .topbar-content","type":"start","info_selector":{"show":true,"name":"","description":"CSS selector for an element. The feature will be placed relative to this element.","placeholder":""},"info_type":{"show":true,"name":"","description":"Will this feature be placed before, after, or inside (at the beggining or end).","placeholder":"","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_featurePlacement":{"show":true,"name":"","description":"Where to place this feature on the page. (Relative to the selector)","placeholder":""},"displayTitle":"Search...","info_displayTitle":{"show":true,"name":"","description":"Descriptive title to show above the feature","placeholder":""}},"outline":{"featureId":"outline","enabled":true,"unavailable":false,"alwaysEnabled":false,"hideSettingsButton":false,"featurePlacement":{"selector":"#right-sidebar-content","type":"end","info_selector":{"show":true,"name":"","description":"CSS selector for an element. The feature will be placed relative to this element.","placeholder":""},"info_type":{"show":true,"name":"","description":"Will this feature be placed before, after, or inside (at the beggining or end).","placeholder":"","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_featurePlacement":{"show":true,"name":"","description":"Where to place this feature on the page. (Relative to the selector)","placeholder":""},"displayTitle":"Outline","info_displayTitle":{"show":true,"name":"","description":"Descriptive title to show above the feature","placeholder":""},"startCollapsed":false,"minCollapseDepth":0,"info_startCollapsed":{"show":true,"name":"","description":"Should the outline start collapsed?","placeholder":""},"info_minCollapseDepth":{"show":true,"name":"","description":"Only allow outline items to be collapsed if they are at least this many levels deep in the tree.","placeholder":"","dropdownOptions":{"1":1,"2":2,"No Collapse":100}}},"themeToggle":{"featureId":"theme-toggle","enabled":true,"unavailable":false,"alwaysEnabled":false,"hideSettingsButton":false,"featurePlacement":{"selector":"#right-sidebar .topbar-content","type":"start","info_selector":{"show":true,"name":"","description":"CSS selector for an element. The feature will be placed relative to this element.","placeholder":""},"info_type":{"show":true,"name":"","description":"Will this feature be placed before, after, or inside (at the beggining or end).","placeholder":"","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_featurePlacement":{"show":true,"name":"","description":"Where to place this feature on the page. (Relative to the selector)","placeholder":""},"displayTitle":"","info_displayTitle":{"show":true,"name":"","description":"Descriptive title to show above the feature","placeholder":""}},"graphView":{"featureId":"graph-view","enabled":true,"unavailable":false,"alwaysEnabled":false,"hideSettingsButton":false,"featurePlacement":{"selector":"#right-sidebar-content","type":"start","info_selector":{"show":true,"name":"","description":"CSS selector for an element. The feature will be placed relative to this element.","placeholder":""},"info_type":{"show":true,"name":"","description":"Will this feature be placed before, after, or inside (at the beggining or end).","placeholder":"","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_featurePlacement":{"show":true,"name":"","description":"Where to place this feature on the page. (Relative to the selector)","placeholder":""},"displayTitle":"Graph View","info_displayTitle":{"show":true,"name":"","description":"Descriptive title to show above the feature","placeholder":""},"showOrphanNodes":true,"showAttachments":false,"allowGlobalGraph":true,"allowExpand":true,"attractionForce":1,"linkLength":15,"repulsionForce":80,"centralForce":2,"edgePruning":100,"minNodeRadius":3,"maxNodeRadius":7,"info_showOrphanNodes":{"show":true,"name":"","description":"Show nodes that are not connected to any other nodes.","placeholder":""},"info_showAttachments":{"show":true,"name":"","description":"Show attachments like images and PDFs as nodes in the graph.","placeholder":""},"info_allowGlobalGraph":{"show":true,"name":"","description":"Allow the user to view the global graph of all nodes.","placeholder":""},"info_allowExpand":{"show":true,"name":"","description":"Allow the user to pop-out the graph view to take up the whole screen","placeholder":""},"info_attractionForce":{"show":true,"name":"","description":"How much should linked nodes attract each other? This will make the graph appear more clustered.","placeholder":""},"info_linkLength":{"show":true,"name":"","description":"How long should the links between nodes be? The shorter the links the more connected nodes will cluster together.","placeholder":""},"info_repulsionForce":{"show":true,"name":"","description":"How much should nodes repel each other? This will make disconnected parts more spread out.","placeholder":""},"info_centralForce":{"show":true,"name":"","description":"How much should nodes be attracted to the center? This will make the graph appear more dense and circular.","placeholder":""},"info_edgePruning":{"show":true,"name":"","description":"Edges with a length above this threshold will not be rendered, however they will still contribute to the simulation. This can help large tangled graphs look more organised. Hovering over a node will still display these links.","placeholder":""},"info_minNodeRadius":{"show":true,"name":"","description":"How small should the smallest nodes be? The smaller a node is the less it will attract other nodes.","placeholder":""},"info_maxNodeRadius":{"show":true,"name":"","description":"How large should the largest nodes be? Nodes are sized by how many links they have. The larger a node is the more it will attract other nodes. This can be used to create a good grouping around the most important nodes.","placeholder":""}},"sidebar":{"featureId":"sidebar","enabled":true,"unavailable":false,"alwaysEnabled":false,"hideSettingsButton":false,"allowResizing":true,"allowCollapsing":true,"rightDefaultWidth":"20em","leftDefaultWidth":"20em","info_allowResizing":{"show":true,"name":"","description":"Whether or not to allow the sidebars to be resized","placeholder":""},"info_allowCollapsing":{"show":true,"name":"","description":"Whether or not to allow the sidebars to be collapsed","placeholder":""},"info_rightDefaultWidth":{"show":true,"name":"","description":"The default width of the right sidebar","placeholder":""},"info_leftDefaultWidth":{"show":true,"name":"","description":"The default width of the left sidebar","placeholder":""}},"customHead":{"featureId":"custom-head","enabled":true,"unavailable":false,"alwaysEnabled":false,"hideSettingsButton":false,"featurePlacement":{"selector":"head","type":"end","info_selector":{"show":true,"name":"","description":"CSS selector for an element. The feature will be placed relative to this element.","placeholder":""},"info_type":{"show":true,"name":"","description":"Will this feature be placed before, after, or inside (at the beggining or end).","placeholder":"","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_featurePlacement":{"show":true,"name":"","description":"Where to place this feature on the page. (Relative to the selector)","placeholder":""},"info_includePath":{"show":false,"name":"","description":"","placeholder":""},"sourcePath":"","info_sourcePath":{"show":true,"name":"","description":"The local path to the source .html file which will be included.","placeholder":"","fileInputOptions":{"makeRelativeToVault":true,"browseButton":true}},"includePath":"site-lib/html/custom-head.html"},"document":{"featureId":"obsidian-document","enabled":true,"unavailable":false,"alwaysEnabled":true,"hideSettingsButton":false,"allowFoldingLists":true,"allowFoldingHeadings":true,"documentWidth":"40em","info_allowFoldingLists":{"show":true,"name":"","description":"Whether or not to allow lists to be folded","placeholder":""},"info_allowFoldingHeadings":{"show":true,"name":"","description":"Whether or not to allow headings to be folded","placeholder":""},"info_documentWidth":{"show":true,"name":"","description":"The width of the document","placeholder":""}},"rss":{"featureId":"rss","enabled":true,"unavailable":false,"alwaysEnabled":false,"hideSettingsButton":false,"siteUrl":"","authorName":"","info_siteUrl":{"show":true,"name":"","description":"The url that this site will be hosted at","placeholder":"https://example.com/mysite"},"info_authorName":{"show":true,"name":"","description":"The name of the author of the site","placeholder":""}},"linkPreview":{"featureId":"link-preview","enabled":true,"unavailable":false,"alwaysEnabled":false,"hideSettingsButton":true}},"modifiedTime":1758305884030,"siteName":"MobileDevTisbi","vaultName":"MobileDevTisbi","exportRoot":"","baseURL":"","pluginVersion":"1.9.2","themeName":"","bodyClasses":"publish css-settings-manager styled-scrollbars show-inline-title show-ribbon is-focused","hasFavicon":false}