{"createdTime":1756485330350,"shownInTree":["задания/секция-1.-javascript/практика-№1.-простая-веб-страница-с-html.html","лекции/секция-1.-javascript/тема-№1.-как-создаются-мобильные-приложения.html","лекции/секция-1.-javascript/тема-№2.-основы-javascript.html","лекции/секция-1.-javascript/тема-№3.-использование-javascript-в-браузере.html","материалы/как-сделать/как-создавать-файлы-с-определённым-расширением.html","материалы/подтемы/секция-1.-javascript/базовая-работа-с-элементами-веб-страницы-через-javascript.html","материалы/подтемы/секция-1.-javascript/базовое-понимание-синтаксиса-javascript.html","материалы/подтемы/секция-1.-javascript/основные-платформы-мобильных-приложений.html","материалы/подтемы/секция-1.-javascript/основные-понятия-веб-страницы.html","материалы/подтемы/секция-1.-javascript/основные-технологии-для-разработки-мобильных-приложений.html","материалы/подтемы/секция-1.-javascript/основные-типы-мобильных-приложений.html","материалы/подтемы/секция-1.-javascript/переменные-в-javascript.html","материалы/подтемы/секция-1.-javascript/правила-наименования-переменных-в-javascript.html","материалы/подтемы/секция-1.-javascript/самое-простое-использование-javascript.html","материалы/подтемы/секция-1.-javascript/создание-своей-html-страницы.html","материалы/подтемы/секция-1.-javascript/что-такое-javascript,-история-появления.html","материалы/файлы/pasted-image-20250912205946.png","материалы/файлы/pasted-image-20250912205946.html","материалы/файлы/pasted-image-20250912212732.png","материалы/файлы/pasted-image-20250912212732.html","материалы/файлы/pasted-image-20250912212810.png","материалы/файлы/pasted-image-20250912212810.html","материалы/файлы/pasted-image-20250912212840.png","материалы/файлы/pasted-image-20250912212840.html","материалы/файлы/pasted-image-20250912214611.png","материалы/файлы/pasted-image-20250912214611.html","материалы/файлы/pasted-image-20250912214624.png","материалы/файлы/pasted-image-20250912214624.html","материалы/файлы/pasted-image-20250912214643.png","материалы/файлы/pasted-image-20250912214643.html","материалы/файлы/pasted-image-20250912214649.png","материалы/файлы/pasted-image-20250912214649.html","материалы/файлы/pasted-image-20250912214653.png","материалы/файлы/pasted-image-20250912214653.html","материалы/файлы/qrcod_72k5.png","материалы/файлы/qrcod_72k5.html","index.html"],"attachments":["site-lib/scripts/graph-wasm.wasm","site-lib/fonts/94f2f163d4b698242fef.otf","site-lib/fonts/72505e6a122c6acd5471.woff2","site-lib/fonts/2d5198822ab091ce4305.woff2","site-lib/fonts/c8ba52b05a9ef10f4758.woff2","site-lib/fonts/cb10ffd7684cd9836a05.woff2","site-lib/fonts/b5f0f109bc88052d4000.woff2","site-lib/fonts/cbe0ae49c52c920fd563.woff2","site-lib/fonts/535a6cf662596b3bd6a6.woff2","site-lib/fonts/70cc7ff27245e82ad414.ttf","site-lib/fonts/454577c22304619db035.ttf","site-lib/fonts/52ac8f3034507f1d9e53.ttf","site-lib/fonts/05b618077343fbbd92b7.ttf","site-lib/fonts/4bb6ac751d1c5478ff3a.woff2","site-lib/media/6155340132a851f6089e.svg","site-lib/media/2308ab1944a6bfa5c5b8.svg","site-lib/html/file-tree-content.html","site-lib/scripts/webpage.js","site-lib/scripts/graph-wasm.js","site-lib/scripts/graph-render-worker.js","site-lib/media/favicon.png","site-lib/styles/obsidian.css","site-lib/styles/global-variable-styles.css","site-lib/styles/main-styles.css","site-lib/rss.xml","site-lib/fonts/293fd13dbca5a3e450ef.woff2","site-lib/fonts/085cb93e613ba3d40d2b.woff2","материалы/файлы/pasted-image-20250912205946.png","материалы/файлы/pasted-image-20250912212732.png","материалы/файлы/pasted-image-20250912212810.png","материалы/файлы/pasted-image-20250912212840.png","материалы/файлы/pasted-image-20250912214611.png","материалы/файлы/pasted-image-20250912214624.png","материалы/файлы/pasted-image-20250912214643.png","материалы/файлы/pasted-image-20250912214649.png","материалы/файлы/pasted-image-20250912214653.png","материалы/файлы/qrcod_72k5.png"],"allFiles":["задания/секция-1.-javascript/практика-№1.-простая-веб-страница-с-html.html","лекции/секция-1.-javascript/тема-№3.-использование-javascript-в-браузере.html","материалы/подтемы/секция-1.-javascript/создание-своей-html-страницы.html","материалы/как-сделать/как-создавать-файлы-с-определённым-расширением.html","материалы/файлы/pasted-image-20250912214653.png","материалы/файлы/pasted-image-20250912214653.html","материалы/файлы/pasted-image-20250912214649.png","материалы/файлы/pasted-image-20250912214649.html","материалы/файлы/pasted-image-20250912214643.png","материалы/файлы/pasted-image-20250912214643.html","материалы/файлы/pasted-image-20250912214624.png","материалы/файлы/pasted-image-20250912214624.html","материалы/файлы/pasted-image-20250912214611.png","материалы/файлы/pasted-image-20250912214611.html","материалы/подтемы/секция-1.-javascript/базовая-работа-с-элементами-веб-страницы-через-javascript.html","материалы/подтемы/секция-1.-javascript/основные-понятия-веб-страницы.html","материалы/подтемы/секция-1.-javascript/самое-простое-использование-javascript.html","материалы/файлы/pasted-image-20250912212840.png","материалы/файлы/pasted-image-20250912212840.html","материалы/файлы/pasted-image-20250912212810.png","материалы/файлы/pasted-image-20250912212810.html","материалы/файлы/pasted-image-20250912212732.png","материалы/файлы/pasted-image-20250912212732.html","index.html","материалы/файлы/qrcod_72k5.png","материалы/файлы/qrcod_72k5.html","материалы/файлы/pasted-image-20250912205946.png","материалы/файлы/pasted-image-20250912205946.html","материалы/подтемы/секция-1.-javascript/переменные-в-javascript.html","лекции/секция-1.-javascript/тема-№2.-основы-javascript.html","материалы/подтемы/секция-1.-javascript/правила-наименования-переменных-в-javascript.html","материалы/подтемы/секция-1.-javascript/базовое-понимание-синтаксиса-javascript.html","материалы/подтемы/секция-1.-javascript/что-такое-javascript,-история-появления.html","материалы/подтемы/секция-1.-javascript/основные-технологии-для-разработки-мобильных-приложений.html","материалы/подтемы/секция-1.-javascript/основные-типы-мобильных-приложений.html","материалы/подтемы/секция-1.-javascript/основные-платформы-мобильных-приложений.html","лекции/секция-1.-javascript/тема-№1.-как-создаются-мобильные-приложения.html","site-lib/scripts/graph-wasm.wasm","site-lib/fonts/94f2f163d4b698242fef.otf","site-lib/fonts/72505e6a122c6acd5471.woff2","site-lib/fonts/2d5198822ab091ce4305.woff2","site-lib/fonts/c8ba52b05a9ef10f4758.woff2","site-lib/fonts/cb10ffd7684cd9836a05.woff2","site-lib/fonts/293fd13dbca5a3e450ef.woff2","site-lib/fonts/085cb93e613ba3d40d2b.woff2","site-lib/fonts/b5f0f109bc88052d4000.woff2","site-lib/fonts/cbe0ae49c52c920fd563.woff2","site-lib/fonts/535a6cf662596b3bd6a6.woff2","site-lib/fonts/70cc7ff27245e82ad414.ttf","site-lib/fonts/454577c22304619db035.ttf","site-lib/fonts/52ac8f3034507f1d9e53.ttf","site-lib/fonts/05b618077343fbbd92b7.ttf","site-lib/fonts/4bb6ac751d1c5478ff3a.woff2","site-lib/media/6155340132a851f6089e.svg","site-lib/media/2308ab1944a6bfa5c5b8.svg","site-lib/html/file-tree-content.html","site-lib/scripts/webpage.js","site-lib/scripts/graph-wasm.js","site-lib/scripts/graph-render-worker.js","site-lib/media/favicon.png","site-lib/styles/obsidian.css","site-lib/styles/global-variable-styles.css","site-lib/styles/main-styles.css"],"webpages":{"index.html":{"title":"index","icon":"","description":"<a rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://t.me/+3RqHSkYzaXUyMTUy\" target=\"_self\">https://t.me/+3RqHSkYzaXUyMTUy</a><br><img alt=\"Pasted image 20250912205946.png\" src=\"материалы/файлы/pasted-image-20250912205946.png\" target=\"_self\"><br><img alt=\"qrcod_72k5.png\" src=\"материалы/файлы/qrcod_72k5.png\" target=\"_self\"><br><a data-href=\"Тема №1. Как создаются мобильные приложения\" href=\"лекции/секция-1.-javascript/тема-№1.-как-создаются-мобильные-приложения.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Тема №1. Как создаются мобильные приложения</a>","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Разработка мобильных приложений","level":1,"id":"Разработка_мобильных_приложений_0"},{"heading":"Ссылка в канал","level":2,"id":"Ссылка_в_канал_0"},{"heading":"Ссылка на этот же сайт","level":2,"id":"Ссылка_на_этот_же_сайт_0"},{"heading":"Лекции начинаются тут","level":2,"id":"Лекции_начинаются_тут_0"}],"links":["лекции/секция-1.-javascript/тема-№1.-как-создаются-мобильные-приложения.html"],"author":"","coverImageURL":".","fullURL":"index.html","pathToRoot":".","attachments":["материалы/файлы/pasted-image-20250912205946.html","материалы/файлы/qrcod_72k5.html"],"createdTime":1756485072721,"modifiedTime":1757700102590,"sourceSize":361,"sourcePath":"index.md","exportPath":"index.html","showInTree":true,"treeOrder":35,"backlinks":[],"type":"markdown"},"задания/секция-1.-javascript/практика-№1.-простая-веб-страница-с-html.html":{"title":"Практика №1. Простая веб-страница с HTML","icon":"","description":"В рамках этого задания вам необходимо добавить логику при нажатиях на кнопку к существующей веб-странице.Задания обязано быть сделано в собственной директории используя изначальный шаблон html файла из ресурсов index.html (может быть модернизирован) и внешний js файл в той же папке (создается самостоятельно).index.html&lt;!DOCTYPE html&gt;\n&lt;html lang=\"ru\"&gt;\n&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;Изучаем JS в рамках html страницы&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt; Эта страница содержит JS код который выполняется на стороне клиента. &lt;br/&gt; &lt;button id=\"button-1\"&gt; Эта кнопка выводит сообщение в консоль &lt;/button&gt; &lt;button id=\"button-2\"&gt; Эта кнопка выводит опощение в браузере &lt;/button&gt; &lt;br/&gt; &lt;button id=\"button-3\"&gt; Эта кнопка меняет цвет фона на красный &lt;/button&gt; &lt;button id=\"button-4\"&gt; Эта кнопка меняет цвет фона на белый &lt;/button&gt; &lt;br/&gt; &lt;textarea id=\"text-1\"&gt; &lt;/textarea&gt; &lt;br/&gt; &lt;button id=\"button-5\"&gt; Сложить число выше с числом 6 &lt;/button&gt; &lt;div id=\"answer\"&gt; ТУТ БУДЕТ ОТВЕТ &lt;/div&gt; &lt;/body&gt;\n&lt;/html&gt;\nНеобходимо добавить логику для кнопок:\nПервые две кнопки должны выводить информацию в консоль и в качестве оповещения в браузере.\nКнопки 3-4 должны менять цвет фона в соответствии с текстом кнопки\nКнопка 5 должна получить текст из текстового поля text-1, получить число из строки при помощи функции parseFloat, и проверить на NaN при помощи функции isNaN. Если это число - сложить с числом 6 и записать ответ в div с id answer.\nВам необходимо добавить дополнительное поле ввода для 5 кнопки.\nВ итоге пользователь должен вписать два числа в два поля и в итоге получить ответ сложениях этих двух чисел.На выполнение выделяется 1 практическая пара.\nГрадация баллов после дедлайна:\n1 пара: 50%\n2 пара: 0%\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Общее описание","level":2,"id":"Общее_описание_0"},{"heading":"Ресурсы","level":2,"id":"Ресурсы_0"},{"heading":"Техническое задание","level":2,"id":"Техническое_задание_0"},{"heading":"Дополнительная часть","level":2,"id":"Дополнительная_часть_0"},{"heading":"Время на выполнение","level":2,"id":"Время_на_выполнение_0"},{"heading":"Баллы","level":2,"id":"Баллы_0"}],"links":[],"author":"","coverImageURL":"","fullURL":"задания/секция-1.-javascript/практика-№1.-простая-веб-страница-с-html.html","pathToRoot":"../..","attachments":[],"createdTime":1757703305096,"modifiedTime":1757704246692,"sourceSize":3314,"sourcePath":"Задания/Секция 1. JavaScript/Практика №1. Простая веб-страница с HTML.md","exportPath":"задания/секция-1.-javascript/практика-№1.-простая-веб-страница-с-html.html","showInTree":true,"treeOrder":2,"backlinks":["лекции/секция-1.-javascript/тема-№3.-использование-javascript-в-браузере.html"],"type":"markdown"},"лекции/секция-1.-javascript/тема-№1.-как-создаются-мобильные-приложения.html":{"title":"Тема №1. Как создаются мобильные приложения","icon":"","description":"Вводная тема, посвящённая базовым понятиям разработки мобильных приложений. <a data-href=\"Основные платформы мобильных приложений\" href=\"материалы/подтемы/секция-1.-javascript/основные-платформы-мобильных-приложений.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Основные платформы мобильных приложений</a>\n<br><a data-href=\"Основные типы мобильных приложений\" href=\"материалы/подтемы/секция-1.-javascript/основные-типы-мобильных-приложений.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Основные типы мобильных приложений</a>\n<br><a data-href=\"Основные технологии для разработки мобильных приложений\" href=\"материалы/подтемы/секция-1.-javascript/основные-технологии-для-разработки-мобильных-приложений.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Основные технологии для разработки мобильных приложений</a>\n(Пусто)<br><a data-href=\"Тема №2. Основы JavaScript\" href=\"лекции/секция-1.-javascript/тема-№2.-основы-javascript.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Тема №2. Основы JavaScript</a>","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Описание темы","level":2,"id":"Описание_темы_0"},{"heading":"План темы","level":2,"id":"План_темы_0"},{"heading":"Задания связанные с темой","level":2,"id":"Задания_связанные_с_темой_0"},{"heading":"Следующая тема","level":2,"id":"Следующая_тема_0"}],"links":["материалы/подтемы/секция-1.-javascript/основные-платформы-мобильных-приложений.html","материалы/подтемы/секция-1.-javascript/основные-типы-мобильных-приложений.html","материалы/подтемы/секция-1.-javascript/основные-технологии-для-разработки-мобильных-приложений.html","лекции/секция-1.-javascript/тема-№2.-основы-javascript.html"],"author":"","coverImageURL":"","fullURL":"лекции/секция-1.-javascript/тема-№1.-как-создаются-мобильные-приложения.html","pathToRoot":"../..","attachments":[],"createdTime":1757689990276,"modifiedTime":1757691620658,"sourceSize":608,"sourcePath":"Лекции/Секция 1. JavaScript/Тема №1. Как создаются мобильные приложения.md","exportPath":"лекции/секция-1.-javascript/тема-№1.-как-создаются-мобильные-приложения.html","showInTree":true,"treeOrder":5,"backlinks":["index.html"],"type":"markdown"},"лекции/секция-1.-javascript/тема-№2.-основы-javascript.html":{"title":"Тема №2. Основы JavaScript","icon":"","description":"В этой теме вы познакомитесь с основами JavaScript — языком, лежащим в основе интерактивности современных веб- и мобильных приложений. Рассмотрите историю появления языка, его ключевые характеристики и области применения. Вы узнаете, как устроен простейший код на JavaScript, изучите базовые элементы синтаксиса, а также детально разберёте переменные — их объявление и правила именования. Всё это — фундамент для дальнейшего изучения разработки мобильных приложений на JavaScript-основах.\n<a data-href=\"Что такое JavaScript, история появления\" href=\"материалы/подтемы/секция-1.-javascript/что-такое-javascript,-история-появления.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Что такое JavaScript, история появления</a>\n<br><a data-href=\"Базовое понимание синтаксиса JavaScript\" href=\"материалы/подтемы/секция-1.-javascript/базовое-понимание-синтаксиса-javascript.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Базовое понимание синтаксиса JavaScript</a>\n(Пусто)<br><a data-href=\"Тема №3. Использование JavaScript в браузере\" href=\"лекции/секция-1.-javascript/тема-№3.-использование-javascript-в-браузере.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Тема №3. Использование JavaScript в браузере</a>","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Описание темы","level":2,"id":"Описание_темы_0"},{"heading":"План темы","level":2,"id":"План_темы_0"},{"heading":"Задания связанные с темой","level":2,"id":"Задания_связанные_с_темой_0"},{"heading":"Следующая тема","level":2,"id":"Следующая_тема_0"}],"links":["материалы/подтемы/секция-1.-javascript/что-такое-javascript,-история-появления.html","материалы/подтемы/секция-1.-javascript/базовое-понимание-синтаксиса-javascript.html","лекции/секция-1.-javascript/тема-№3.-использование-javascript-в-браузере.html"],"author":"","coverImageURL":"","fullURL":"лекции/секция-1.-javascript/тема-№2.-основы-javascript.html","pathToRoot":"../..","attachments":[],"createdTime":1757690497891,"modifiedTime":1757698126020,"sourceSize":1252,"sourcePath":"Лекции/Секция 1. JavaScript/Тема №2. Основы JavaScript.md","exportPath":"лекции/секция-1.-javascript/тема-№2.-основы-javascript.html","showInTree":true,"treeOrder":6,"backlinks":["лекции/секция-1.-javascript/тема-№1.-как-создаются-мобильные-приложения.html"],"type":"markdown"},"лекции/секция-1.-javascript/тема-№3.-использование-javascript-в-браузере.html":{"title":"Тема №3. Использование JavaScript в браузере","icon":"","description":"В этой теме вы познакомитесь с практическим применением JavaScript в контексте веб-страниц: научитесь использовать консоль разработчика для тестирования кода, поймёте структуру HTML и роль DOM, освоите базовые способы взаимодействия с элементами страницы через JavaScript — получение, изменение содержимого и стилей. Вы создадите первую HTML-страницу с подключённым JavaScript, изучите корректные способы интеграции скриптов и назначения обработчиков событий, избегая устаревших практик.\n<a data-href=\"Самое простое использование JavaScript\" href=\"материалы/подтемы/секция-1.-javascript/самое-простое-использование-javascript.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Самое простое использование JavaScript</a>\n<br><a data-href=\"Основные понятия веб страницы\" href=\"материалы/подтемы/секция-1.-javascript/основные-понятия-веб-страницы.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Основные понятия веб страницы</a>\n<br><a data-href=\"Базовая работа с элементами веб страницы через JavaScript\" href=\"материалы/подтемы/секция-1.-javascript/базовая-работа-с-элементами-веб-страницы-через-javascript.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Базовая работа с элементами веб страницы через JavaScript</a>\n<br><a data-href=\"Создание своей HTML страницы\" href=\"материалы/подтемы/секция-1.-javascript/создание-своей-html-страницы.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Создание своей HTML страницы</a> <br><a data-href=\"Практика №1. Простая веб-страница с HTML\" href=\"задания/секция-1.-javascript/практика-№1.-простая-веб-страница-с-html.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Практика №1. Простая веб-страница с HTML</a>\n<br><a data-href=\"Тема №4. Node.JS, примитивные типы данных JavaScript\" href=\".html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Тема №4. Node.JS, примитивные типы данных JavaScript</a>","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Описание темы","level":2,"id":"Описание_темы_0"},{"heading":"План темы","level":2,"id":"План_темы_0"},{"heading":"Задания связанные с темой","level":2,"id":"Задания_связанные_с_темой_0"},{"heading":"Следующая тема","level":2,"id":"Следующая_тема_0"}],"links":["материалы/подтемы/секция-1.-javascript/самое-простое-использование-javascript.html","материалы/подтемы/секция-1.-javascript/основные-понятия-веб-страницы.html","материалы/подтемы/секция-1.-javascript/базовая-работа-с-элементами-веб-страницы-через-javascript.html","материалы/подтемы/секция-1.-javascript/создание-своей-html-страницы.html","задания/секция-1.-javascript/практика-№1.-простая-веб-страница-с-html.html",".html"],"author":"","coverImageURL":"","fullURL":"лекции/секция-1.-javascript/тема-№3.-использование-javascript-в-браузере.html","pathToRoot":"../..","attachments":[],"createdTime":1757695287075,"modifiedTime":1757703296437,"sourceSize":1462,"sourcePath":"Лекции/Секция 1. JavaScript/Тема №3. Использование JavaScript в браузере.md","exportPath":"лекции/секция-1.-javascript/тема-№3.-использование-javascript-в-браузере.html","showInTree":true,"treeOrder":7,"backlinks":["лекции/секция-1.-javascript/тема-№2.-основы-javascript.html"],"type":"markdown"},"материалы/как-сделать/как-создавать-файлы-с-определённым-расширением.html":{"title":"Как создавать файлы с определённым расширением","icon":"","description":"Самый простой способ - создать файл через \"проводник\".\n<img alt=\"Pasted image 20250912214611.png\" src=\"материалы/файлы/pasted-image-20250912214611.png\" target=\"_self\">\nНо для этого нужно сначала включить опцию чтобы мы могли видеть расширение файлов (по умолчанию оно скрыто, особенно на компьютерах колледжа).<br>\n<img alt=\"Pasted image 20250912214624.png\" src=\"материалы/файлы/pasted-image-20250912214624.png\" target=\"_self\">\nНу а дальше уже все просто, например нам нужно создать js файл&nbsp;example.js<br>\n<img alt=\"Pasted image 20250912214643.png\" src=\"материалы/файлы/pasted-image-20250912214643.png\" target=\"_self\"><br>\n<img alt=\"Pasted image 20250912214649.png\" src=\"материалы/файлы/pasted-image-20250912214649.png\" target=\"_self\"><img alt=\"Pasted image 20250912214653.png\" src=\"материалы/файлы/pasted-image-20250912214653.png\" target=\"_self\">","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"","coverImageURL":".","fullURL":"материалы/как-сделать/как-создавать-файлы-с-определённым-расширением.html","pathToRoot":"../..","attachments":["материалы/файлы/pasted-image-20250912214611.html","материалы/файлы/pasted-image-20250912214624.html","материалы/файлы/pasted-image-20250912214643.html","материалы/файлы/pasted-image-20250912214649.html","материалы/файлы/pasted-image-20250912214653.html"],"createdTime":1757702748102,"modifiedTime":1757702815939,"sourceSize":667,"sourcePath":"Материалы/Как сделать/Как создавать файлы с определённым расширением.md","exportPath":"материалы/как-сделать/как-создавать-файлы-с-определённым-расширением.html","showInTree":true,"treeOrder":10,"backlinks":["материалы/подтемы/секция-1.-javascript/создание-своей-html-страницы.html"],"type":"markdown"},"материалы/подтемы/секция-1.-javascript/базовая-работа-с-элементами-веб-страницы-через-javascript.html":{"title":"Базовая работа с элементами веб страницы через JavaScript","icon":"","description":"В JavaScript для взаимодействия с HTML-элементами используются методы работы с DOM (Document Object Model). Основные способы получения элементов: document.getElementById(id) — возвращает элемент по уникальному атрибуту id.\nПример: const button = document.getElementById('submit-btn'); document.querySelector(selector) — возвращает первый элемент, соответствующий CSS-селектору.\nПример: const title = document.querySelector('h1'); или const item = document.querySelector('.item.active'); document.querySelectorAll(selector) — возвращает NodeList (массивоподобный объект) всех элементов, соответствующих селектору.\nПример: const buttons = document.querySelectorAll('button'); document.getElementsByTagName(name) — возвращает HTMLCollection элементов по тегу.\nПример: const paragraphs = document.getElementsByTagName('p'); document.getElementsByClassName(name) — возвращает HTMLCollection элементов по классу.\nПример: const items = document.getElementsByClassName('list-item'); ⚠️ Методы, возвращающие коллекции (HTMLCollection, NodeList), не являются настоящими массивами и не имеют методов массивов (например, .map(), .filter()). Для их использования можно преобразовать в массив через [...collection] или Array.from(collection).\nПосле получения элемента можно изменять его атрибуты и содержимое: element.textContent — устанавливает или возвращает текстовое содержимое элемента (без HTML-разметки).\nПример: paragraph.textContent = 'Новый текст'; element.innerHTML — устанавливает или возвращает HTML-содержимое элемента (включая разметку).\nПример: div.innerHTML = '&lt;strong&gt;Жирный текст&lt;/strong&gt;'; element.setAttribute(name, value) — задаёт значение атрибута.\nПример: button.setAttribute('disabled', 'true'); element.getAttribute(name) — получает значение атрибута.\nПример: const type = input.getAttribute('type'); element.removeAttribute(name) — удаляет атрибут.\nПример: button.removeAttribute('disabled'); 💡 Используйте textContent для изменения текста — он безопаснее innerHTML, так как не выполняет HTML-код и защищает от XSS-атак.\nСтили элемента можно менять напрямую через свойство style — оно представляет собой объект, содержащий все CSS-свойства в формате camelCase:\nelement.style.propertyName = 'value';\nПримеры:\nelement.style.color = 'red';\nelement.style.fontSize = '20px';\nelement.style.backgroundColor = '#f0f0f0';\nelement.style.marginTop = '10px'; 🔍 Важно: CSS-свойства с дефисом (например, background-color) в JavaScript записываются в camelCase (backgroundColor).\nОграничения:\nСтили, заданные через style, имеют приоритет над внешними CSS-правилами.\nНельзя установить несколько стилей одновременно — только по одному свойству.\nДля сложных стилевых изменений рекомендуется использовать классы (classList):\nelement.classList.add('highlight');\nelement.classList.remove('hidden');\nelement.classList.toggle('active'); ✅ Использование classList предпочтительнее прямого изменения style — это позволяет отделять логику от стилей и поддерживать чистоту кода.\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Получение элементов","level":3,"id":"Получение_элементов_0"},{"heading":"Изменение свойств элемента","level":3,"id":"Изменение_свойств_элемента_0"},{"heading":"Изменение CSS стилей элемента","level":3,"id":"Изменение_CSS_стилей_элемента_0"}],"links":[],"author":"","coverImageURL":"","fullURL":"материалы/подтемы/секция-1.-javascript/базовая-работа-с-элементами-веб-страницы-через-javascript.html","pathToRoot":"../../..","attachments":[],"createdTime":1757702424568,"modifiedTime":1757702445919,"sourceSize":4668,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Базовая работа с элементами веб страницы через JavaScript.md","exportPath":"материалы/подтемы/секция-1.-javascript/базовая-работа-с-элементами-веб-страницы-через-javascript.html","showInTree":true,"treeOrder":13,"backlinks":["лекции/секция-1.-javascript/тема-№3.-использование-javascript-в-браузере.html"],"type":"markdown"},"материалы/подтемы/секция-1.-javascript/базовое-понимание-синтаксиса-javascript.html":{"title":"Базовое понимание синтаксиса JavaScript","icon":"","description":"В рамках данной темы рассматриваются только базовые элементы синтаксиса JavaScript, необходимые для начала практической работы. Полный объём синтаксических конструкций — от операторов и структур управления до модулей, классов, асинхронности и деструктуризации — будет изучаться последовательно в последующих разделах курса. Настоящая часть служит фундаментом для понимания структуры кода, а не исчерпывающим руководством по языку.Комментарии не влияют на выполнение кода и предназначены исключительно для повышения читаемости и документирования.JavaScript поддерживает два типа комментариев: Однострочные — начинаются с //. Все, что следует после // до конца строки, игнорируется движком. // Это однострочный комментарий\nlet x = 5; // Можно писать и в конце строки Многострочные — заключаются между /* и */. Позволяют комментировать несколько строк или блоки кода. /*\nЭто многострочный комментарий\nИспользуется для описания функций, модулей или временного отключения кода\n*/\nlet y = 10;\nJavaScript — язык, чувствительный к регистру. Это означает, что имена переменных, функций, ключевых слов и свойств различаются по написанию букв в верхнем и нижнем регистре.\nПримеры: let name = \"Анна\";\nlet Name = \"Иван\"; // Это другая переменная\nlet NAME = \"Олег\"; // И ещё одна console.log(name); // \"Анна\"\nconsole.log(Name); // \"Иван\"\nconsole.log(NAME); // \"Олег\"\nТо же относится к ключевым словам: let — корректно, Let — ошибка (если не является именем переменной).\nТакже чувствительны к регистру названия свойств объектов: user.name ≠ user.Name.В JavaScript точки с запятой (;) используются для явного завершения инструкций. Хотя язык позволяет опускать их в большинстве случаев благодаря автоматической вставке точек с запятой (ASI — Automatic Semicolon Insertion), рекомендуется всегда использовать точки с запятой для предотвращения неочевидных ошибок. ","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Комментарии JS","level":2,"id":"Комментарии_JS_0"},{"heading":"Чувствительность к регистру","level":2,"id":"Чувствительность_к_регистру_0"},{"heading":"Точки с запятой <code>;</code>","level":2,"id":"Точки_с_запятой_`;`_0"},{"heading":"<a data-href=\"Переменные в JavaScript\" href=\"Переменные в JavaScript\" class=\"internal-link\" target=\"_blank\" rel=\"noopener nofollow\">Переменные в JavaScript</a>","level":2,"id":"[[Переменные_в_JavaScript]]_0"}],"links":["материалы/подтемы/секция-1.-javascript/переменные-в-javascript.html"],"author":"","coverImageURL":"","fullURL":"материалы/подтемы/секция-1.-javascript/базовое-понимание-синтаксиса-javascript.html","pathToRoot":"../../..","attachments":[],"createdTime":1757696307916,"modifiedTime":1757696808206,"sourceSize":3470,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Базовое понимание синтаксиса JavaScript.md","exportPath":"материалы/подтемы/секция-1.-javascript/базовое-понимание-синтаксиса-javascript.html","showInTree":true,"treeOrder":14,"backlinks":["лекции/секция-1.-javascript/тема-№2.-основы-javascript.html"],"type":"markdown"},"материалы/подтемы/секция-1.-javascript/основные-платформы-мобильных-приложений.html":{"title":"Основные платформы мобильных приложений","icon":"","description":"Платформа мобильных приложений — это совокупность программного обеспечения, инструментов, стандартов и правил, которые определяют, как создаются, устанавливаются и работают мобильные приложения на конкретном устройстве. Это не просто операционная система (ОС), а целая экосистема: от ядра ОС и API-интерфейсов до магазинов приложений, систем подписок, политик безопасности и требований к разработчикам. Выбор платформы напрямую влияет на: доступные функции устройства (камера, GPS, биометрия); способы взаимодействия с пользователем; методы тестирования и отладки; стратегию монетизации и распространения; сроки и стоимость разработки. На сегодняшний день подавляющее большинство мобильных приложений создаётся для двух основных платформ — iOS и Android. Их доминирование обусловлено масштабами рынка, зрелостью инструментов и поддержкой со стороны крупнейших технологических компаний.iOS — экосистема Apple, работающая на устройствах iPhone, iPad и iPod touch. Закрытая, строго контролируемая платформа с единым стандартом качества, высокой безопасностью и стабильной производительностью. Основная аудитория — пользователи в развитых странах, с высоким уровнем дохода и лояльностью к бренду.Android — открытая операционная система от Google, используемая сотнями производителей (Samsung, Xiaomi, OnePlus, Motorola и др.). Обладает огромной фрагментацией устройств и версий, но обеспечивает максимальную доступность и гибкость для разработчиков и пользователей. Доминирует в развивающихся рынках и по объёму установленных устройств — более 70% глобального рынка смартфонов.Но, помимо iOS и Android, на протяжении истории мобильных технологий существовали и другие платформы, которые либо имели значительную долю рынка, либо обладали высоким потенциалом, но в итоге уступили место доминирующим системам.Windows Phone (Microsoft) — запущенная в 2010 году платформа, основанная на ядре Windows NT, предлагала уникальный пользовательский интерфейс с динамическими «живыми» плитками. Несмотря на техническую изящность и глубокую интеграцию с экосистемой Microsoft (Outlook, Office, OneDrive), она не смогла привлечь достаточное количество разработчиков. Отсутствие приложений, особенно популярных сервисов вроде Instagram или WhatsApp на ранних этапах, стало фатальным. Microsoft официально прекратила поддержку Windows Phone в 2017 году.BlackBerry OS / BlackBerry 10 — до середины 2000-х годов BlackBerry была синонимом корпоративной мобильности благодаря надёжной безопасности, физической клавиатуре и собственной сети Push Mail. Однако компания не сумела адекватно ответить на рост сенсорных экранов и экосистемы приложений. Попытка перезапуска с BlackBerry 10 в 2013 году, основанной на QNX, оказалась слишком поздней — к тому времени пользователи уже массово перешли на iOS и Android. В 2016 году BlackBerry перестала производить собственные устройства.Symbian — когда-то самая популярная мобильная ОС, особенно в Европе и Азии, Symbian использовалась Nokia, Samsung, Siemens и другими. Она доминировала на рынке до 2007 года, но её архитектура, унаследованная от эпохи кнопочных телефонов, не позволила эффективно адаптироваться к новым требованиям тачскринов и мультимедиа. После выхода iPhone и Android, Nokia в 2011 году перешла на Windows Phone, а Symbian была официально закрыта в 2014 году.WebOS (Palm, затем HP) — оригинальная и продвинутая система с многооконным интерфейсом, предшественник современных концепций многозадачности. Palm выпустила первые устройства на WebOS в 2009 году, а HP попыталась развивать платформу дальше, даже выпустив планшет TouchPad. Но недостаток приложений, маркетинговой поддержки и внутренние конфликты в HP привели к отказу от WebOS в 2011 году. Позже HP передала код проекта LG, который использовал его для своих смарт-телевизоров — но как мобильная ОС WebOS так и не возродилась.HarmonyOS (Huawei) — современный пример платформы, появившейся как ответ на геополитические ограничения. Разработанная Huawei в 2019 году после запрета Google на использование GMS (Google Mobile Services), HarmonyOS изначально позиционировалась как универсальная ОС для IoT-устройств, а позже — как замена Android на смартфонах. Хотя она технически совместима с Android-приложениями через App Pack, её глобальное распространение ограничено из-за отсутствия доступа к ключевым сервисам Google и западным приложениям. На сегодня — это важный региональный игрок (особенно в Китае), но не глобальная альтернатива iOS/Android.iOS и Android — две доминирующие мобильные платформы, отличающиеся не только архитектурой, но и философией разработки, подходом к безопасности, экосистеме и взаимодействию с пользователем. Их сравнение позволяет понять фундаментальные различия, которые влияют на процесс создания мобильных приложений.Языки программирования и инструменты разработки\niOS-приложения разрабатываются преимущественно на языке Swift (с 2014 года), а также на Objective-C — унаследованном от эпохи NeXTSTEP. Интегрированная среда разработки — Xcode, доступная исключительно на macOS. Это накладывает ограничения: разработка под iOS невозможна без устройства Apple или виртуальной машины с macOS.\nAndroid-приложения пишутся на Kotlin (рекомендуемый язык с 2019 года) или Java (традиционный, но постепенно вытесняемый). Среда разработки — Android Studio, основанная на IntelliJ IDEA, работает на Windows, macOS и Linux, что обеспечивает большую доступность для разработчиков.Архитектура и управление ресурсами\niOS использует закрытую, унифицированную архитектуру: ограниченное количество моделей устройств с жёстко контролируемыми характеристиками (память, процессор, экран). Это позволяет оптимизировать приложения под конкретные аппаратные конфигурации, обеспечивая высокую производительность и стабильность.\nAndroid, напротив, работает на тысячах устройств с разными процессорами, объёмами ОЗУ, плотностями пикселей и версиями ОС. Разработчику приходится учитывать фрагментацию — от старых смартфонов с Android 8 до новых с Android 14 — и применять адаптивные интерфейсы, проверять совместимость и использовать библиотеки поддержки (Android Support Library / AndroidX).Магазины приложений и политики распространения\nПриложения для iOS распространяются исключительно через App Store — строго централизованный и контролируемый канал. Apple проводит ручную модерацию каждого приложения, требует соблюдения строгих гайдлайнов по дизайну, приватности и функциональности. Это повышает уровень безопасности для пользователей, но замедляет выпуск обновлений и ограничивает возможности монетизации (например, запрещены сторонние магазины и системы внутренних покупок вне App Store).\nAndroid-приложения могут распространяться через Google Play, но также допускается установка из сторонних источников (APK-файлы). Google Play имеет автоматизированную модерацию, менее строгие требования, но более высокий риск распространения вредоносного ПО. Это делает Android более открытой, но требует от разработчика дополнительных мер по защите приложения и информированию пользователей о безопасности.Доля рынка и целевая аудитория\nПо количеству установленных устройств Android доминирует — около 70–75% глобального рынка смартфонов, особенно в Азии, Африке и Латинской Америке. При этом iOS занимает около 25–30%, но сосредоточена в странах с высоким уровнем дохода — США, Западная Европа, Япония, Австралия.\nЭто создаёт принципиально разные экономические модели: приложения для iOS чаще генерируют больше дохода на одного пользователя (высокий ARPU — Average Revenue Per User), тогда как Android обеспечивает больший охват аудитории, но с меньшей monetization. Для бизнес-приложений это означает выбор между качеством и количеством.Обновления и жизненный цикл устройств\nApple контролирует полный цикл — от железа до ПО — и обеспечивает массовые обновления ОС для устройств, выпущенных до 5–6 лет назад. Более 90% активных устройств iOS работают на последних двух версиях ОС.\nAndroid-устройства получают обновления неравномерно: производители (Samsung, Xiaomi и др.) сами решают, какие модели поддерживают, а многие бюджетные устройства остаются на устаревших версиях (Android 8–10) годами. Это вынуждает разработчиков поддерживать совместимость с множеством версий API, увеличивая сложность тестирования и развертывания.Безопасность и приватность\niOS позиционируется как более безопасная платформа благодаря изолированной среде выполнения приложений (sandboxing), строгому контролю доступа к данным (персональные файлы, камера, микрофон), шифрованию данных на уровне ОС и обязательному использованию App Transport Security.\nAndroid предоставляет аналогичные механизмы, но их реализация зависит от производителя. Многие OEM-производители добавляют собственные сервисы, фоновые процессы и права, которые могут компрометировать приватность. Кроме того, открытость Android делает его более уязвимым к вредоносным APK-файлам, загружаемым вне Google Play.Интеграция с экосистемой\niOS тесно интегрирован с другими продуктами Apple: iCloud, AirDrop, Handoff, Continuity, Apple Watch, HomeKit. Это позволяет создавать кросс-устройственные приложения с единым пользовательским опытом.\nAndroid интегрируется с сервисами Google: Gmail, Google Maps, Drive, Firebase, Google Assistant, Wear OS. Эти сервисы предоставляют мощные инструменты для разработчиков — особенно для аналитики (Firebase), push-уведомлений, облачного хранения и машинного обучения. Однако интеграция с другими устройствами (TV, часы, авто) менее унифицирована, чем в Apple.","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Что означает платформа мобильных приложений","level":2,"id":"Что_означает_платформа_мобильных_приложений_0"},{"heading":"Существующие платформы","level":2,"id":"Существующие_платформы_0"},{"heading":"Сравнительная характеристика iOS и Android","level":2,"id":"Сравнительная_характеристика_iOS_и_Android_0"}],"links":[],"author":"","coverImageURL":"","fullURL":"материалы/подтемы/секция-1.-javascript/основные-платформы-мобильных-приложений.html","pathToRoot":"../../..","attachments":[],"createdTime":1757691090963,"modifiedTime":1757692705650,"sourceSize":16719,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Основные платформы мобильных приложений.md","exportPath":"материалы/подтемы/секция-1.-javascript/основные-платформы-мобильных-приложений.html","showInTree":true,"treeOrder":15,"backlinks":["лекции/секция-1.-javascript/тема-№1.-как-создаются-мобильные-приложения.html"],"type":"markdown"},"материалы/подтемы/секция-1.-javascript/основные-понятия-веб-страницы.html":{"title":"Основные понятия веб страницы","icon":"","description":"Основные понятия веб-страницыВеб-страница — это документ, отображаемый в браузере, который состоит из трёх взаимосвязанных технологий: HTML, CSS и JavaScript. Каждая из них выполняет свою уникальную роль, и только их совместное использование позволяет создавать полноценные, интерактивные и визуально привлекательные приложения.HTML (HyperText Markup Language) — это язык гипертекстовой разметки, созданный для описания структуры веб-документов. Он не выполняет вычислений, не обрабатывает логику и не управляет поведением — его задача: обозначить смысл содержимого. Каждый элемент HTML — это маркер, который говорит браузеру: «Это заголовок», «Это абзац», «Это ссылка», «Это изображение».HTML работает на основе тегов — специальных ключевых слов, заключённых в угловые скобки: &lt;tag&gt;. Теги могут быть:\nПарными — имеют открывающий и закрывающий тег: &lt;p&gt;Это параграф&lt;/p&gt; Самозакрывающимися — не содержат содержимого и закрываются сразу: &lt;img src=\"image.jpg\" alt=\"Описание изображения\" /&gt;\n&lt;br /&gt; Каждый тег может иметь атрибуты — дополнительные параметры, уточняющие поведение или свойства элемента. Например:&lt;a href=\"https://example.com\" target=\"_blank\"&gt;Перейти&lt;/a&gt;\nЗдесь href указывает адрес ссылки, а target=\"_blank\" — открывать её в новой вкладке.HTML5 — современная версия стандарта — ввела семантические теги, которые не только описывают внешний вид, но и передают значение контента:\n&lt;header&gt; — шапка страницы или раздела\n&lt;nav&gt; — навигационное меню\n&lt;main&gt; — основное содержимое страницы\n&lt;section&gt; — логический блок тематически связанного контента\n&lt;article&gt; — самостоятельная сущность (например, статья, пост)\n&lt;footer&gt; — подвал\nИспользование семантики улучшает:\nДоступность — для пользователей с ограниченными возможностями (экранная речь корректно интерпретирует структуру),\nSEO — поисковые системы лучше понимают и ранжируют содержимое,\nПоддержку кода — разработчики быстрее ориентируются в структуре.\nCSS (Cascading Style Sheets) — это язык, предназначенный для оформления HTML-документов. Он отвечает за то, как выглядит страница: цвета, размеры, расположение элементов, анимации, адаптивность под разные устройства.CSS работает через селекторы — правила, определяющие, к каким элементам применяются стили. Пример:h1 { color: #2c3e50; font-size: 2rem; text-align: center;\n}\nЗдесь h1 — селектор, { ... } — набор свойств и их значений.CSS обладает ключевыми особенностями:\nКаскадность (Cascading) — стили могут переопределяться. Если два правила влияют на один элемент, приоритет определяется по специфичности селектора, порядку объявления и использованию !important.\nНаследование — некоторые свойства (например, font-family, color) автоматически передаются дочерним элементам.\nМедиа-запросы — позволяют применять стили в зависимости от характеристик устройства: ширины экрана, ориентации, разрешения. Это основа адаптивного дизайна:\n@media (max-width: 768px) { body { font-size: 14px; }\n} CSS можно подключать тремя способами:\nВнутренний стиль — внутри &lt;style&gt; в &lt;head&gt; (не рекомендуется для больших проектов).\nВнешний файл — через &lt;link rel=\"stylesheet\" href=\"styles.css\"&gt; — лучшая практика.\nВстроенный стиль — атрибут style внутри тега (&lt;p style=\"color:red;\"&gt;) — используется крайне редко, только для экстренных случаев.\nВажно: HTML отвечает за что — CSS — за как выглядит. Их разделение — фундаментальный принцип веб-разработки. Это позволяет:\nМенять дизайн без трогания структуры,\nОдинаковый HTML отображать по-разному на разных устройствах,\nУскорять загрузку за счёт кэширования CSS-файлов,\nОблегчать командную разработку (дизайнеры работают с CSS, разработчики — с HTML и JS). В рамках дисциплины мы не будем изучать свойства CSS, поэтому они остаются на самообучение\nКаждый валидный HTML-документ должен начинаться с DOCTYPE, чтобы браузер знал, какой стандарт использовать. Без него он может перейти в режим \"quirks mode\", где поведение становится непредсказуемым.&lt;!DOCTYPE html&gt;\n— единственное объявление, необходимое для HTML5. Не требует закрывающего тега.Корневой элемент. Атрибут lang обязателен для доступности и SEO:&lt;html lang=\"ru\"&gt;\nУказывает язык содержимого — помогает экранной речи, переводчикам и поисковикам.Не отображается на странице, но содержит метаданные, необходимые для работы браузера и поисковых систем:\n&lt;meta charset=\"UTF-8\"&gt; — задаёт кодировку символов. UTF-8 поддерживает все языки мира — обязательный элемент.\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; — критически важен для мобильных устройств. Без него страница будет масштабироваться как на десктопе, что делает её нечитаемой на телефоне.\n&lt;title&gt; — название вкладки браузера и заголовок в результатах поиска. Должен быть уникальным и описательным.\n&lt;link&gt; — подключение внешних ресурсов: CSS, favicon, шрифтов.\n&lt;script&gt; — подключение JavaScript (может находиться и в &lt;head&gt;, и в &lt;body&gt;, но это отдельная тема).\nПример полного &lt;head&gt;:&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;Моя первая страница&lt;/title&gt; &lt;link rel=\"stylesheet\" href=\"styles.css\"&gt; &lt;link rel=\"icon\" href=\"favicon.ico\" type=\"image/x-icon\"&gt;\n&lt;/head&gt;\nСодержит всё, что видит пользователь. Внутри могут быть любые элементы, включая:\nЗаголовки: &lt;h1&gt; до &lt;h6&gt; — иерархия важности. &lt;h1&gt; — главный заголовок страницы, только один.\nПараграфы: &lt;p&gt; — для текстовых блоков.\nСписки: &lt;ul&gt; — неупорядоченный (с точками),\n&lt;ol&gt; — упорядоченный (с номерами),\n&lt;li&gt; — элемент списка. Изображения: &lt;img src=\"...\" alt=\"...\"&gt; — alt обязателен для доступности и SEO.\nСсылки: &lt;a href=\"...\"&gt;текст&lt;/a&gt; — href — адрес перехода.\nКнопки: &lt;button&gt;...&lt;/button&gt; — для взаимодействия.\nФормы: &lt;form&gt;, &lt;input&gt;, &lt;label&gt; — для сбора данных.\nПример минимальной, но корректной структуры &lt;body&gt;:&lt;body&gt; &lt;header&gt; &lt;h1&gt;Добро пожаловать!&lt;/h1&gt; &lt;/header&gt; &lt;main&gt; &lt;p&gt;Это основной текст страницы.&lt;/p&gt; &lt;button id=\"myButton\"&gt;Нажми меня&lt;/button&gt; &lt;/main&gt; &lt;footer&gt; &lt;p&gt;&amp;copy; 2025 Моя компания&lt;/p&gt; &lt;/footer&gt;\n&lt;/body&gt;\nHTML — дерево. Элементы должны быть правильно вложены:\n✅ Правильно:&lt;p&gt;&lt;strong&gt;Жирный текст&lt;/strong&gt; внутри параграфа&lt;/p&gt;\n❌ Неправильно:&lt;p&gt;&lt;strong&gt;Жирный текст&lt;/p&gt;&lt;/strong&gt; &lt;!-- Нарушена вложенность --&gt;\nБраузеры пытаются исправить ошибки, но это приводит к непредсказуемому поведению, особенно в сложных случаях.\nИспользуйте семантические теги вместо &lt;div&gt; там, где это возможно.\nНе используйте &lt;h1&gt;–&lt;h6&gt; исключительно для изменения размера шрифта — используйте CSS.\nВсе изображения должны иметь alt — даже если пустой (alt=\"\"), если они декоративные.\nДля кнопок и ссылок используйте правильные теги: &lt;button&gt; — для действий, &lt;a&gt; — для переходов.\nПоддерживайте чистую и читаемую структуру: отступы, переносы, комментарии (если нужно).\nВсегда проверяйте валидность кода через <a data-tooltip-position=\"top\" aria-label=\"https://validator.w3.org/\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://validator.w3.org/\" target=\"_self\">validator.w3.org</a>.\nDOM (Document Object Model — Модель объектов документа) — это программное представление веб-документа (обычно HTML или XML), созданное браузером в виде иерархического дерева объектов, где каждый элемент документа — это объект, доступный для манипуляций через JavaScript.DOM не является частью самого HTML-файла. Он динамически генерируется браузером при загрузке страницы: парсер читает HTML-код и превращает его в структуру из узлов (nodes), которые можно изменять, добавлять, удалять или запрашивать с помощью JavaScript.Каждый элемент HTML становится узлом (node) в DOM-дереве:\nЭлементные узлы — теги (&lt;div&gt;, &lt;p&gt;, &lt;button&gt; и т.д.)\nТекстовые узлы — текст внутри тегов\nАтрибутные узлы — атрибуты элементов (id, class, href)\nКорневой узел — &lt;html&gt;\nДочерние и родительские узлы — элементы связаны отношениями «родитель–ребёнок»\nПример HTML:&lt;div id=\"container\"&gt; &lt;h1&gt;Привет, мир!&lt;/h1&gt; &lt;p&gt;Это параграф.&lt;/p&gt;\n&lt;/div&gt;\nСоответствующее DOM-дерево:html\n└── body └── div#container ├── h1 │ └── #text: \"Привет, мир!\" └── p └── #text: \"Это параграф.\"\nКаждый узел имеет свойства и методы, позволяющие взаимодействовать с ним. Например:\nelement.tagName — имя тега,\nelement.textContent — содержимое текста,\nelement.id, element.className — значения атрибутов,\nelement.appendChild(), element.removeChild() — управление дочерними узлами.\nJavaScript не может напрямую работать с HTML-кодом файла. Он работает только с DOM-представлением, которое браузер создал в памяти. Это позволяет:\nДинамически изменять содержимое страницы без перезагрузки (например, обновлять список задач, менять текст кнопки),\nРеагировать на действия пользователя — клики, ввод текста, скроллинг,\nИзменять стили элементов — через element.style,\nДобавлять и удалять элементы — например, создавать новые карточки товаров по запросу,\nПолучать информацию о состоянии страницы — размер окна, положение элементов, состояние форм.\nБез DOM JavaScript был бы бесполезен на веб-странице — он просто не имел бы «точки входа» в контент.","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Что такое HTML, CSS","level":2,"id":"Что_такое_HTML,_CSS_0"},{"heading":"Структура HTML","level":2,"id":"Структура_HTML_0"},{"heading":"<code>&lt;html&gt;</code>","level":3,"id":"`<html>`_0"},{"heading":"<code>&lt;head&gt;</code>","level":3,"id":"`<head>`_0"},{"heading":"<code>&lt;body&gt;</code>","level":3,"id":"`<body>`_0"},{"heading":"Вложенность и иерархия","level":3,"id":"Вложенность_и_иерархия_0"},{"heading":"Рекомендации по структуре","level":3,"id":"Рекомендации_по_структуре_0"},{"heading":"Что такое DOM","level":2,"id":"Что_такое_DOM_0"},{"heading":"Структура DOM как дерева","level":3,"id":"Структура_DOM_как_дерева_0"},{"heading":"Зачем нужен DOM?","level":3,"id":"Зачем_нужен_DOM?_0"}],"links":[],"author":"","coverImageURL":"","fullURL":"материалы/подтемы/секция-1.-javascript/основные-понятия-веб-страницы.html","pathToRoot":"../../..","attachments":[],"createdTime":1757701920807,"modifiedTime":1757702322322,"sourceSize":15642,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Основные понятия веб страницы.md","exportPath":"материалы/подтемы/секция-1.-javascript/основные-понятия-веб-страницы.html","showInTree":true,"treeOrder":16,"backlinks":["лекции/секция-1.-javascript/тема-№3.-использование-javascript-в-браузере.html"],"type":"markdown"},"материалы/подтемы/секция-1.-javascript/основные-технологии-для-разработки-мобильных-приложений.html":{"title":"Основные технологии для разработки мобильных приложений","icon":"","description":"Нативная разработка предполагает использование официальных языков программирования, сред разработки и фреймворков, предоставляемых производителями платформ — Apple и Google. Приложения компилируются напрямую в машинный код, обеспечивающий максимальную производительность и полный доступ к API устройства.Для разработки приложений под iOS используется Swift — язык, созданный Apple в 2014 году как современная замена Objective-C. Swift отличается чистым синтаксисом, безопасностью типов, поддержкой функционального программирования и высокой скоростью выполнения. Он активно развивается и является стандартом для новых проектов.Вместо него до сих пор встречается Objective-C — унаследованный от NeXTSTEP язык, который использовался в iOS до появления Swift. Он остаётся актуальным при поддержке старых проектов, но новые разработчики начинают с Swift.Инструмент разработки — Xcode, единственный официально поддерживаемый IDE от Apple. Он включает в себя редактор кода, симулятор устройств, инструменты отладки, профилирования производительности и систему управления версиями (Git). Xcode работает только на macOS, что делает разработку под iOS невозможной на Windows или Linux без виртуализации.Фреймворки интерфейса:\nUIKit — традиционный фреймворк для создания пользовательских интерфейсов. Работает на основе иерархии представлений (UIView), требует детального описания макетов через код или Interface Builder. Подходит для сложных, детально настраиваемых интерфейсов.\nSwiftUI — декларативный фреймворк, представленный в 2019 году. Позволяет описывать интерфейс как функцию состояния приложения — «что должно отображаться при данном состоянии», а не «как его построить». Упрощает разработку, обеспечивает автоматическую адаптацию под все размеры экранов и темы (светлая/тёмная), и полностью интегрирован с Swift. Считается будущим iOS-разработки.\nОбе технологии работают с экосистемой Apple: Core Animation, Core Location, ARKit, HealthKit, Face ID, Push Notifications — всё доступно через единые API, документированные и стабильно поддерживающиеся Apple.Основным языком для Android сегодня является Kotlin — язык, разработанный JetBrains и официально объявленный Google предпочтительным для Android-разработки с 2019 года. Kotlin сочетает в себе функциональные и объектно-ориентированные парадигмы, обладает более безопасной системой типов (отсутствие null-pointer исключений по умолчанию), сжатым синтаксисом и полной совместимостью с Java.Java остаётся актуальной благодаря огромной базе legacy-приложений и корпоративных систем. Многие библиотеки, туториалы и инструкции всё ещё написаны на Java, но новые проекты рекомендуют начинать с Kotlin.Среда разработки — Android Studio, основанная на IntelliJ IDEA. Она предоставляет полноценный набор инструментов: эмулятор устройств, профайлер памяти и сети, анализатор производительности, инструменты для тестирования и поддержку Firebase. Работает на Windows, macOS и Linux — обеспечивает большую доступность, чем Xcode.Фреймворки интерфейса:\nXML-разметка + View-система — классический подход. Интерфейс описывается в XML-файлах, а логика — в Kotlin/Java-классах. Требует явного связывания элементов UI с кодом (findViewById()), что создаёт больше шаблонного кода и потенциальных ошибок.\nJetpack Compose — современный декларативный фреймворк, аналог SwiftUI. Позволяет описывать интерфейс как функцию состояния, используя только Kotlin. Компоненты (Composables) перерисовываются автоматически при изменении данных. Упрощает создание динамических интерфейсов, снижает количество кода и повышает читаемость. С 2023 года считается основным стандартом для новых проектов.\nAndroid также предлагает богатую экосистему Jetpack — набор библиотек (ViewModel, Room, Navigation, DataStore, WorkManager и др.), которые решают типовые задачи: управление жизненным циклом, работа с базами данных, фоновые задачи, маршрутизация между экранами — всё стандартизировано и поддерживается Google.Кроссплатформенные технологии позволяют писать один код, который компилируется в нативные приложения для iOS и Android. Отличие от гибридных — отсутствие WebView: вместо веб-страницы приложение использует настоящие нативные компоненты или собственные рендереры, что обеспечивает близкую к нативной производительность.Разработан Google и представлен в 2017 году. Основан на языке Dart — объектно-ориентированном языке с быстрой компиляцией и поддержкой JIT/AOT (Just-in-Time / Ahead-of-Time). Flutter компилирует код напрямую в нативный ARM-код, минуя виртуальную машину.Ключевая особенность — декларативная widget-архитектура. Весь интерфейс строится из деревьев виджетов — каждый элемент (кнопка, текст, список) — это виджет, который может быть изменён, вложен или переиспользован. Даже отступы и цвета — это виджеты.Flutter не использует нативные UI-компоненты iOS или Android. Вместо этого он рендерит собственные элементы с помощью графического движка Skia — то же, что используется в Chrome и Android. Это даёт:\nЕдиный дизайн на всех платформах — приложение выглядит одинаково на iPhone и Samsung.\nВысокую производительность — 60–120 FPS даже на сложных анимациях.\nГибкость дизайна — можно создавать уникальные интерфейсы, не привязанные к Material Design или Human Interface Guidelines.\nОграничения: больший размер приложения (включает рендер-движок), ограниченная интеграция с некоторыми нативными API без написания плагинов на Swift/Kotlin, менее «родной» UX на iOS, если не следовать гайдлайнам вручную.Flutter идеален для проектов с акцентом на дизайн: продукты с уникальной визуальной идентичностью, маркетплейсы, сервисы с частыми анимациями, MVP-стартапы, где важна скорость выхода на два рынка.Разработан Meta (ранее Facebook) в 2015 году. Основан на JavaScript и TypeScript — языках, уже знакомых миллионам веб-разработчиков. React Native использует принцип React — компонентный подход, где интерфейс строится из повторно используемых компонентов, реагирующих на изменения состояния.Архитектура React Native основана на JS-бриджe: JavaScript-код выполняется в отдельном потоке, а вызовы к нативным компонентам (кнопки, списки, камера) передаются через мост. Это позволяет использовать настоящие нативные UI-элементы, но создаёт задержки при частых взаимодействиях между JS и нативным кодом.Преимущества:\nВысокая скорость разработки для команд с опытом в вебе.\nБольшое сообщество и множество готовых библиотек (npm).\nВозможность частичного перехода: можно внедрять React Native-экраны в существующее нативное приложение.\nПоддержка горячей перезагрузки (Hot Reload) — изменения видны мгновенно.\nОграничения:\nПроизводительность ниже, чем у Flutter или нативных приложений — особенно при сложной анимации или работе с большим количеством данных.\nЗависимость от сторонних библиотек для доступа к API — многие требуют установки и настройки нативных модулей (Native Modules).\nРазница в поведении между iOS и Android — некоторые компоненты могут работать по-разному, требуя платформо-специфичного кода.\nСложность отладки: ошибки могут возникать как в JS, так и в нативном коде, затрудняя диагностику.\nReact Native популярен в компаниях, где есть команда веб-разработчиков, нуждающаяся в выходе на мобильный рынок без полного переобучения. Примеры: Facebook, Instagram, Skype, Walmart, Tesla.Разработан Microsoft, ранее известный как Xamarin Forms. Использует язык C# и фреймворк .NET — популярный в корпоративной разработке. В 2022 году Xamarin был объединён с .NET Multi-platform App UI (.NET MAUI) — современной версией, поддерживающей не только iOS и Android, но и Windows, macOS.Отличие от React Native и Flutter: Xamarin/.NET MAUI не использует мост. Код компилируется напрямую в нативный код через Mono или .NET runtime, что обеспечивает лучшую производительность и меньшие накладные расходы.Плюсы:\nПолный доступ к нативным API через привязки (bindings) — почти все функции устройства доступны «из коробки».\nЕдиная кодовая база для мобильных и десктопных приложений.\nИнтеграция с Visual Studio и Azure — удобна для корпоративных проектов.\nСильная типизация и безопасность C#.\nМинусы:\nМеньшее сообщество по сравнению с Flutter и React Native.\nБолее сложная настройка, особенно для новичков.\nМенее гибкий UI — интерфейс часто выглядит «по-Windows», если не применять платформо-специфичные стили.\nМедленнее развитие экосистемы по сравнению с Google и Meta.\n.NET MAUI подходит для enterprise-решений: внутренние корпоративные приложения, ERP-системы, CRM, медицинские терминалы, приложения с интеграцией в облачные сервисы Microsoft (Azure, Office 365).","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Нативная разработка","level":2,"id":"Нативная_разработка_0"},{"heading":"iOS: Swift, Objective-C, Xcode, UIKit, SwiftUI","level":3,"id":"iOS_Swift,_Objective-C,_Xcode,_UIKit,_SwiftUI_0"},{"heading":"Android: Kotlin, Java, Android Studio, Jetpack Compose, XML-разметка","level":3,"id":"Android_Kotlin,_Java,_Android_Studio,_Jetpack_Compose,_XML-разметка_0"},{"heading":"Кроссплатформенная разработка","level":2,"id":"Кроссплатформенная_разработка_0"},{"heading":"Flutter: Dart, widget-архитектура, рендеринг на Skia","level":3,"id":"Flutter_Dart,_widget-архитектура,_рендеринг_на_Skia_0"},{"heading":"React Native: JavaScript/TypeScript, Bridge-механизм, native modules","level":3,"id":"React_Native_JavaScript/TypeScript,_Bridge-механизм,_native_modules_0"},{"heading":"Xamarin (.NET MAUI): C#, .NET, прямая компиляция в нативный код","level":3,"id":"Xamarin_(.NET_MAUI)_C#,_.NET,_прямая_компиляция_в_нативный_код_0"}],"links":[],"author":"","coverImageURL":"","fullURL":"материалы/подтемы/секция-1.-javascript/основные-технологии-для-разработки-мобильных-приложений.html","pathToRoot":"../../..","attachments":[],"createdTime":1757691441508,"modifiedTime":1757693475052,"sourceSize":15238,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Основные технологии для разработки мобильных приложений.md","exportPath":"материалы/подтемы/секция-1.-javascript/основные-технологии-для-разработки-мобильных-приложений.html","showInTree":true,"treeOrder":17,"backlinks":["лекции/секция-1.-javascript/тема-№1.-как-создаются-мобильные-приложения.html"],"type":"markdown"},"материалы/подтемы/секция-1.-javascript/основные-типы-мобильных-приложений.html":{"title":"Основные типы мобильных приложений","icon":"","description":"Мобильное приложение — это не просто программа, запущенная на смартфоне. Его тип определяется тем, как оно создано, на чём работает и как взаимодействует с операционной системой и аппаратными компонентами устройства. Выбор типа приложения влияет на производительность, сроки разработки, стоимость поддержки и качество пользовательского опыта. Существует четыре основных типа: нативные, веб-приложения, гибридные и кроссплатформенные.Нативные приложения — это программы, разработанные специально для одной конкретной платформы с использованием официальных языков программирования, SDK и инструментов, предоставленных её создателем.Для iOS приложения пишутся на Swift или Objective-C с использованием фреймворков UIKit и SwiftUI, собираются в Xcode и компилируются напрямую в машинный код для архитектуры ARM процессоров Apple.\nДля Android — на Kotlin или Java с использованием Android SDK, сборка происходит через Android Studio в APK или AAB-файлы, которые затем интерпретируются Android Runtime (ART).Преимущества: Максимальная производительность — код выполняется напрямую на устройстве без промежуточных слоёв. Полный доступ ко всем API устройства: камера, GPS, Bluetooth, сенсоры, биометрия, уведомления, фоновые задачи. Соответствие стандартам платформы (Human Interface Guidelines для iOS, Material Design для Android) — обеспечивает интуитивный и «родной» пользовательский опыт. Лучшая стабильность и поддержка обновлений ОС — разработчики получают ранний доступ к новым функциям через beta-версии SDK.\nОграничения: Требуется отдельная команда разработчиков для каждой платформы — удвоение затрат на разработку и тестирование. Дублирование логики и дизайна между версиями — увеличивает время выхода на рынок. Высокая зависимость от экосистемы: обновление API может потребовать переписывания значительной части кода.\nОбласти применения:\nНативные приложения — стандарт для проектов, где важны скорость, надёжность и глубокая интеграция с устройством: банковские и финансовые приложения, игры, AR/VR-решения, медицинские системы, приложения с реальным временем (например, такси, доставка), корпоративные инструменты с высокими требованиями к безопасности.Веб-приложения — это сайты, спроектированные так, чтобы вести себя как мобильные приложения. Они работают в браузере, но могут быть добавлены на домашний экран, работать оффлайн и отправлять уведомления благодаря технологиям PWA.Основаны на стандартных веб-технологиях: HTML5, CSS3, JavaScript, а также Service Workers (для кэширования и работы без интернета), Web App Manifest (для определения иконки, имени, цвета темы) и Push API.Преимущества: Одна кодовая база — работает на всех устройствах с браузером (iOS, Android, даже десктоп). Нет необходимости проходить модерацию в магазинах приложений — публикация мгновенная. Низкие затраты на разработку и обслуживание. Не требует установки — пользователь сразу переходит по ссылке. Автоматическое обновление — изменения видны сразу после релиза.\nОграничения: Ограниченный доступ к аппаратным возможностям устройства: нет прямого доступа к контактам, файловой системе, Bluetooth Low Energy, NFC, гироскопу в некоторых случаях. Невозможность использовать многие нативные UI-компоненты — интерфейс выглядит как сайт, а не как приложение. Зависимость от браузера: производительность и совместимость различаются между Safari, Chrome, Firefox. Отсутствие в App Store и Google Play — потеря видимости, возможности рейтингов, рекомендаций и внутренних покупок через официальные каналы.\nОбласти применения:\nPWA подходят для контентных сервисов, информационных сайтов, электронной коммерции с простой логикой, корпоративных порталов, приложений с низким уровнем взаимодействия: онлайн-газеты, каталоги товаров, формы обратной связи, калькуляторы, лендинги. Особенно эффективны там, где важна скорость распространения и минимальные затраты — например, маркетинговые кампании или временные акции.Гибридные приложения — это веб-приложения, обёрнутые в «оболочку» нативного контейнера (WebView), который позволяет им запускаться как обычные мобильные приложения из магазинов. Они используют веб-технологии (HTML/CSS/JS), но имеют доступ к нативным API через плагины.Популярные фреймворки: Apache Cordova (ранее PhoneGap) и Ionic (основан на Angular/React/Vue + Cordova).Преимущества: Одна кодовая база для iOS и Android — снижение затрат на разработку. Возможность публикации в App Store и Google Play — как нативные приложения. Быстрая разработка для команд с опытом в вебе. Поддержка большинства базовых функций: камера, геолокация, уведомления, файловая система — через плагины.\nОграничения: Производительность ниже, чем у нативных — все операции проходят через WebView, что создаёт задержки, особенно при анимациях и сложной графике. Плагины часто устаревают или плохо документированы — могут вызывать баги на новых версиях ОС. UX редко достигает уровня «родного» приложения — интерфейс чувствуется как «веб-страница в обёртке». Ограниченный доступ к современным нативным функциям (например, Face ID, ARKit, Android Jetpack Compose).\nОбласти применения:\nГибридные приложения подходят для прототипирования, MVP-проектов, внутренних корпоративных инструментов, приложений с простой логикой и минимальным взаимодействием с оборудованием: учётные системы, формы регистрации, CRM-клиенты, базовые лояльностные программы. Идеальны, когда бюджет ограничен, а сроки — жёсткие, и требуется быстрый выход на два рынка.Кроссплатформенные приложения — это приложения, написанные на одном языке и фреймворке, которые компилируются в нативный код для разных платформ. Это не обёртки, а генерация нативных компонентов на основе единого исходного кода.Популярные фреймворки: Flutter (Dart, от Google), React Native (JavaScript/TypeScript, от Meta), Xamarin (C#, от Microsoft), Kivy (Python, редко используется в коммерческой разработке).Отличие от гибридных: вместо WebView они используют настоящие нативные UI-компоненты (например, Flutter рисует собственные виджеты, React Native вызывает native UI элементы iOS/Android напрямую).Преимущества: Одна кодовая база — до 80–95% общего кода между iOS и Android. Производительность близка к нативной — особенно в Flutter и React Native с правильной оптимизацией. Доступ к большинству нативных API через библиотеки (например, Firebase, Mapbox, camera plugin). Современный UI — возможность создавать уникальный дизайн, не привязанный к стандартам платформы. Активное сообщество, регулярные обновления, хорошая документация.\nОграничения: Некоторые функции требуют написания нативного кода (Java/Kotlin, Swift/Objective-C) — если нужна глубокая интеграция с OS. Размер приложения больше, чем у чисто нативного (особенно в Flutter — включает движок рендеринга). Возможны баги на границах платформ — поведение одного и того же компонента может отличаться на iOS и Android. Обучение новому языку (Dart, TypeScript) требует времени для команд, привыкших к Java/Kotlin или Swift.\nОбласти применения:\nКроссплатформенные решения — выбор большинства стартапов, компаний с ограниченным бюджетом, но амбициозными целями. Подходят для социальных сетей, мессенджеров, e-commerce, финтех-приложений, образовательных платформ, приложений с частыми обновлениями и необходимостью быстро масштабироваться. Примеры: Facebook, Instagram (частично), Uber Eats, Alibaba, Tencent.","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Нативные приложения","level":3,"id":"Нативные_приложения_0"},{"heading":"Веб-приложения (Progressive Web Apps — PWA)","level":3,"id":"Веб-приложения_(Progressive_Web_Apps_—_PWA)_0"},{"heading":"Гибридные приложения","level":3,"id":"Гибридные_приложения_0"},{"heading":"Кроссплатформенные приложения","level":3,"id":"Кроссплатформенные_приложения_0"},{"heading":"Сравнительная таблица ключевых параметров","level":3,"id":"Сравнительная_таблица_ключевых_параметров_0"}],"links":[],"author":"","coverImageURL":"","fullURL":"материалы/подтемы/секция-1.-javascript/основные-типы-мобильных-приложений.html","pathToRoot":"../../..","attachments":[],"createdTime":1757691037215,"modifiedTime":1757693227523,"sourceSize":15196,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Основные типы мобильных приложений.md","exportPath":"материалы/подтемы/секция-1.-javascript/основные-типы-мобильных-приложений.html","showInTree":true,"treeOrder":18,"backlinks":["лекции/секция-1.-javascript/тема-№1.-как-создаются-мобильные-приложения.html"],"type":"markdown"},"материалы/подтемы/секция-1.-javascript/переменные-в-javascript.html":{"title":"Переменные в JavaScript","icon":"","description":"Переменная в JavaScript — это именованный контейнер для хранения данных, который позволяет обращаться к значению по его имени в процессе выполнения программы.Каждая переменная ассоциирована с определённым значением (число, строка, объект, функция и т.д.), которое может меняться во время работы приложения. Переменные позволяют сохранять промежуточные результаты, пользовательские данные, состояния интерфейса — всё, что требуется для динамического поведения приложения.let age = 25;\nlet userName = \"Алексей\";\nlet isActive = true;\nЗдесь:\nage, userName, isActive — имена переменных.\n25, \"Алексей\", true — значения, которые они хранят. Динамическая типизация — тип значения определяется автоматически при присваивании, и переменная может хранить значения разных типов в разное время.\nlet x = 10; // число\nx = \"привет\"; // теперь строка — допустимо\nx = [1, 2, 3]; // теперь массив — тоже допустимо Объявление и использование — переменную нужно объявить перед использованием (кроме случаев с var в нестрогом режиме, но это устаревшая практика).\nОбласть видимости — определяет, где переменная доступна (блок, функция, глобально), зависит от ключевого слова (let, const, var).\nПодробнее про эти особенности мы прочтём в следующих лекциях.При создании и использовании переменных необходимо следовать <a data-tooltip-position=\"top\" aria-label=\"Правила наименования переменных в JavaScript\" data-href=\"Правила наименования переменных в JavaScript\" href=\"материалы/подтемы/секция-1.-javascript/правила-наименования-переменных-в-javascript.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">правилам наименования переменных</a>.Работа с переменными включает три ключевых действия: объявление, инициализация и присваивание. Эти понятия тесно связаны, но не тождественны — их различие критически важно для понимания поведения кода.Объявление переменной — это создание её имени в области видимости. Оно сообщает интерпретатору: «Я хочу использовать эту метку для хранения значения».В JavaScript есть три ключевых слова для объявления:Примеры:var x; // объявление через var\nlet y; // объявление через let\nconst z; // Ошибка: const требует инициализации при объявлении\nКлючевое отличие: const обязывает сразу присвоить значение — без этого возникает синтаксическая ошибка.\n💡 Рекомендация: Всегда используйте const по умолчанию. Если знаете, что значение будет меняться — замените на let. Никогда не используйте var в современных проектах — он вносит путаницу из-за hoisting и функциональной области видимости.\nИнициализация — это первое присваивание значения переменной в момент её создания. Это когда переменная получает своё начальное значение и становится доступной для использования.\nИнициализация может совпадать с объявлением.\nОна обязательна для const, опциональна для let и var.\nПримеры:let age; // объявление — без инициализации (значение undefined)\nage = 25; // присваивание — теперь переменная проинициализирована let score = 100; // объявление + инициализация в одной строке\nconst name = \"Алекс\"; // объявление + инициализация (обязательно!)\nИнициализация = объявление + первое присваивание в одном действии.Присваивание — это операция изменения значения уже существующей переменной. Оно происходит после объявления (и, если нужно, после инициализации).\nДля let — можно присваивать сколько угодно раз.\nДля const — присваивание разрешено только один раз (при инициализации); любое последующее присваивание вызовет ошибку.\nПрисваивание не обязательно должно происходить сразу после объявления.\nПримеры:let count;\ncount = 0; // первое присваивание (и одновременно инициализация)\ncount = count + 1; // второе присваивание — изменение значения\ncount = null; // присваивание — можно менять const PI = 3.14;\nPI = 3.14159; // Ошибка: присваивание const после инициализации запрещено // Но! Если значение — объект или массив:\nconst user = { name: \"Иван\" };\nuser.name = \"Петр\"; // Разрешено — меняется содержимое объекта, а не ссылка\nuser = {}; // Ошибка — попытка изменить ссылку\nВажно: const защищает ссылку, а не содержимое. Для объектов и массивов можно менять свойства — это не нарушает константность.В JavaScript, как и в любом языке программирования, читаемость и поддерживаемость кода важнее минимального количества строк. Создание дополнительной переменной для хранения промежуточного результата — это не расточительство, а практика, повышающая ясность кода.\nУпрощает чтение: имя переменной может объяснять смысл действия, вместо того чтобы оставлять сложное выражение без контекста.\nОблегчает отладку: можно легко поставить точку останова на конкретной переменной и увидеть её значение.\nСнижает когнитивную нагрузку: другие разработчики (и вы сами через неделю) быстрее поймут логику.\nПовышает переиспользуемость: если значение используется несколько раз — нет нужды повторять вычисление.\nБез лишней переменной (менее читаемо):if (user.age &gt;= 18 &amp;&amp; user.status === 'active' &amp;&amp; user.country !== 'restricted') { enableAccess();\n}\nС лишней переменной (более понятно):const isAdult = user.age &gt;= 18;\nconst isActive = user.status === 'active';\nconst isAllowedCountry = user.country !== 'restricted'; if (isAdult &amp;&amp; isActive &amp;&amp; isAllowedCountry) { enableAccess();\n}\nЗдесь имена переменных выполняют роль документации — они сразу говорят, что проверяется, а не как.Не стоит создавать переменные ради создания — только если они действительно улучшают понимание. Не нужно оборачивать простые литералы или очевидные значения, например:const five = 5; // Избыточно\nreturn x + five; // Лучше:\nreturn x + 5;\nНо если значение получено в результате вычисления, преобразования или запроса — лучше сохранить его с осмысленным именем.Переменные используются для хранения данных, которые могут изменяться во время выполнения программы. Они позволяют:\nСохранять результаты вычислений;\nПередавать данные между частями кода;\nУправлять состоянием приложения (например, флаги, счётчики, пользовательские данные). Обращайтесь к переменной только после её объявления и инициализации. Попытка использовать let или const до объявления вызовет ошибку ReferenceError.\nНе используйте переменные с неопределённым значением (undefined) без проверки — это источник багов.\nИзбегайте глобальных переменных. Всегда ограничивайте область видимости блоками ({}), функциями или модулями.\nИспользуйте переменные для повторяющихся значений — это упрощает изменение параметров в будущем (например, таймауты, цвета, константы конфигурации).\nconst apiUrl = 'https://api.example.com/data';\nconst timeoutMs = 5000; fetch(apiUrl, { timeout: timeoutMs }) .then(response =&gt; response.json()) .then(data =&gt; { const processedData = data.map(item =&gt; item.toUpperCase()); displayResults(processedData); });\nЗдесь каждая переменная имеет чёткую роль:\napiUrl — централизованное управление адресом API;\ntimeoutMs — легко изменяемый параметр;\nprocessedData — промежуточный результат, понятный по имени. Переиспользование одной переменной для разных целей:\nlet user = getUserById(123);\nuser = calculateDiscount(user); // Теперь user — не объект пользователя, а число. Путаница! Использование переменных без инициализации:\nlet result;\nconsole.log(result + 10); // NaN — непредсказуемое поведение ","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Пример:","level":3,"id":"Пример_0"},{"heading":"Ключевые особенности:","level":3,"id":"Ключевые_особенности_0"},{"heading":"Названия переменных","level":2,"id":"Названия_переменных_0"},{"heading":"Работа с переменными: объявление, инициализация и присваивание","level":2,"id":"Работа_с_переменными_объявление,_инициализация_и_присваивание_0"},{"heading":"Объявление","level":3,"id":"Объявление_0"},{"heading":"Инициализация","level":3,"id":"Инициализация_0"},{"heading":"Присваивание","level":3,"id":"Присваивание_0"},{"heading":"Рекомендация: не жалеть создавать лишнюю переменную","level":2,"id":"Рекомендация_не_жалеть_создавать_лишнюю_переменную_0"},{"heading":"Почему это полезно:","level":3,"id":"Почему_это_полезно_0"},{"heading":"Пример до и после:","level":3,"id":"Пример_до_и_после_0"},{"heading":"Важно:","level":3,"id":"Важно_0"},{"heading":"Использование переменных в коде","level":2,"id":"Использование_переменных_в_коде_0"},{"heading":"Правила использования:","level":4,"id":"Правила_использования_0"},{"heading":"Пример правильного использования:","level":4,"id":"Пример_правильного_использования_0"},{"heading":"Ошибки, которых следует избегать:","level":4,"id":"Ошибки,_которых_следует_избегать_0"}],"links":["материалы/подтемы/секция-1.-javascript/правила-наименования-переменных-в-javascript.html"],"author":"","coverImageURL":"","fullURL":"материалы/подтемы/секция-1.-javascript/переменные-в-javascript.html","pathToRoot":"../../..","attachments":[],"createdTime":1757696813511,"modifiedTime":1757698288236,"sourceSize":13815,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Переменные в JavaScript.md","exportPath":"материалы/подтемы/секция-1.-javascript/переменные-в-javascript.html","showInTree":true,"treeOrder":19,"backlinks":["материалы/подтемы/секция-1.-javascript/базовое-понимание-синтаксиса-javascript.html"],"type":"markdown"},"материалы/подтемы/секция-1.-javascript/правила-наименования-переменных-в-javascript.html":{"title":"Правила наименования переменных в JavaScript","icon":"","description":"В JavaScript как и в любом другом языке программирования существуют строгие синтаксические правила для именования переменных: Имя должно начинаться с буквы (a–z, A–Z), символа подчёркивания (_) или знака доллара ($).\n✅ Разрешено: name, _count, $element\n❌ Запрещено: 2name, -value, 3dModel После первого символа можно использовать буквы, цифры (0–9), _ и $.\n✅ Разрешено: userName1, total_price, API_KEY\n❌ Запрещено: user-name, email@domain, my variable Имена чувствительны к регистру — name, Name и NAME — это три разные переменные. Нельзя использовать зарезервированные слова языка как имена переменных:\nlet, const, var, function, if, else, return, class, import, export, null, true, false, this, new, while, for, break, continue, try, catch, finally, throw, switch, case, default, typeof, instanceof, in, of, async, await, yield и другие.\n❌ Запрещено: let = 5;, function = \"test\"; Нельзя использовать ключевые слова будущих версий ECMAScript, даже если они пока не используются (например, package, interface, private, protected, public, static).\n❌ Лучше избегать: class, enum, implements, module, namespace, super Хотя JavaScript позволяет многое, следование общепринятым соглашениям делает код понятным, поддерживаемым и профессиональным: Используйте camelCase для имен переменных и функций.\n✅ userName, isLoading, getTotalPrice\n❌ user_name, User Name, usertotalprice Для констант (которые не меняются) используйте UPPER_SNAKE_CASE.\n✅ MAX_USERS, API_URL, DEFAULT_TIMEOUT Выбирайте осмысленные, описательные имена — избегайте аббревиатур и однобуквенных имён, если контекст не очевиден.\n✅ numberOfItems, currentUser, isFormValid\n❌ n, x, tmp, data1, arr Используйте логические имена для булевых переменных — начинайте с is, has, can, should.\n✅ isVisible, hasPermission, canSubmit, isLoading Избегайте двойных отрицаний — лучше isDisabled, чем isNotEnabled. Не используйте $ в начале имени без причины — хотя $ разрешён, он часто используется в библиотеках (например, jQuery) для обозначения объектов DOM. Используйте только если это часть вашей договорённости в проекте (например, const $button = document.querySelector('#btn');). Следуйте единому стилю в команде — согласуйте стиль именования в проекте (через ESLint, Prettier или внутренний гайдлайн). Не пишите имена на кириллице — даже если JavaScript это позволяет, это снижает читаемость для международной команды и может вызвать проблемы с инструментами/редакторами. 💡 Рекомендация: «Не жалейте создавать лишнюю переменную» — лучше сделать код более читаемым через понятные имена, чем экономить на количестве строк. Например: const isEmailValid = validateEmail(userInput); // Читаемо и понятно вместо const v = validateEmail(userInput); // Неясно, что такое v ","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Требования к названию","level":2,"id":"Требования_к_названию_0"},{"heading":"Рекомендации","level":2,"id":"Рекомендации_0"}],"links":[],"author":"","coverImageURL":"","fullURL":"материалы/подтемы/секция-1.-javascript/правила-наименования-переменных-в-javascript.html","pathToRoot":"../../..","attachments":[],"createdTime":1757697173629,"modifiedTime":1757697313673,"sourceSize":4650,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Правила наименования переменных в JavaScript.md","exportPath":"материалы/подтемы/секция-1.-javascript/правила-наименования-переменных-в-javascript.html","showInTree":true,"treeOrder":20,"backlinks":["материалы/подтемы/секция-1.-javascript/переменные-в-javascript.html"],"type":"markdown"},"материалы/подтемы/секция-1.-javascript/самое-простое-использование-javascript.html":{"title":"Самое простое использование JavaScript","icon":"","description":"Для быстрого тестирования и экспериментов с JavaScript можно использовать консоль разработчика — встроенную инструментальную панель в любом современном браузере (Chrome, Firefox, Edge, Safari). Открыть её можно сочетанием клавиш F12 или Ctrl+Shift+I (на macOS — Cmd+Option+I), затем перейти на вкладку Console.Консоль позволяет выполнять JavaScript-код прямо в браузере без создания HTML-файлов. Это идеальное место для проверки синтаксиса, отладки простых выражений и изучения поведения языка в реальном времени.\n<img alt=\"Pasted image 20250912212732.png\" src=\"материалы/файлы/pasted-image-20250912212732.png\" target=\"_self\">Для вывода информации в консоль используется функция console.log():console.log(\"Привет, мир!\");\nconsole.log(42);\nconsole.log(true);\n<br><img alt=\"Pasted image 20250912212810.png\" src=\"материалы/файлы/pasted-image-20250912212810.png\" target=\"_self\">Эта команда — основной инструмент отладки на начальных этапах. Она выводит переданные значения в консоль, помогая увидеть, что происходит в коде. Можно передавать несколько аргументов:console.log(\"Значение переменной:\", variableName);\nТакже доступны другие методы:\nconsole.error() — для ошибок (выводится красным),\nconsole.warn() — для предупреждений (жёлтый цвет),\nconsole.table() — для удобного отображения массивов и объектов в виде таблицы.\nДля показа пользователю простого сообщения используется функция alert():alert(\"Это сообщение от JavaScript!\");\n<br><img alt=\"Pasted image 20250912212840.png\" src=\"материалы/файлы/pasted-image-20250912212840.png\" target=\"_self\">Она выводит модальное окно с текстом, которое блокирует взаимодействие с страницей до нажатия кнопки «ОК». Используется исключительно для учебных целей и быстрой обратной связи — в реальных приложениях alert() не применяется из-за плохого пользовательского опыта.\n⚠️ Не используйте alert() в продакшене — он нарушает поток работы пользователя и не поддерживает стилизацию.\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Консоль разработчика в браузере","level":2,"id":"Консоль_разработчика_в_браузере_0"},{"heading":"Базовые команды","level":2,"id":"Базовые_команды_0"},{"heading":"Вывод в консоль","level":3,"id":"Вывод_в_консоль_0"},{"heading":"Оповещение в браузере","level":3,"id":"Оповещение_в_браузере_0"}],"links":[],"author":"","coverImageURL":".","fullURL":"материалы/подтемы/секция-1.-javascript/самое-простое-использование-javascript.html","pathToRoot":"../../..","attachments":["материалы/файлы/pasted-image-20250912212732.html","материалы/файлы/pasted-image-20250912212810.html","материалы/файлы/pasted-image-20250912212840.html"],"createdTime":1757701551028,"modifiedTime":1757701721219,"sourceSize":3060,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Самое простое использование JavaScript.md","exportPath":"материалы/подтемы/секция-1.-javascript/самое-простое-использование-javascript.html","showInTree":true,"treeOrder":21,"backlinks":["лекции/секция-1.-javascript/тема-№3.-использование-javascript-в-браузере.html"],"type":"markdown"},"материалы/подтемы/секция-1.-javascript/создание-своей-html-страницы.html":{"title":"Создание своей HTML страницы","icon":"","description":"Чтобы создать HTML-страницу, достаточно использовать любой текстовый редактор — даже Блокнот. Однако для эффективной разработки рекомендуется использовать современный редактор кода, такой как Visual Studio Code (VS Code).HTML-страница — это текстовый файл с расширением .html. Минимальная структура HTML-документа выглядит так:&lt;!DOCTYPE html&gt;\n&lt;html lang=\"ru\"&gt;\n&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;Моя первая страница&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt; &lt;h1&gt;Привет, мир!&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nСохраните этот код в файл с именем, например, index.html. Откройте его в браузере — вы увидите заголовок «Привет, мир!». Это и есть ваша первая веб-страница.<a data-href=\"Как создавать файлы с определённым расширением\" href=\"материалы/как-сделать/как-создавать-файлы-с-определённым-расширением.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Как создавать файлы с определённым расширением</a>JavaScript можно подключать к HTML-странице двумя основными способами: встроенно (внутри HTML-файла) или через внешний файл. Второй способ — единственно правильный для профессиональной разработки.JavaScript можно вставить прямо внутрь HTML-документа с помощью тега &lt;script&gt;:&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt; &lt;title&gt;Страница с встроенным JS&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt; &lt;h1&gt;Привет!&lt;/h1&gt; &lt;script&gt; alert(\"Это встроенный JavaScript!\"); document.write(\"&lt;p&gt;Текст добавлен скриптом.&lt;/p&gt;\"); &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nПочему это не рекомендуется:\nНарушает принцип разделения ответственности: структура (HTML), стиль (CSS) и логика (JS) должны быть разделены.\nСложно поддерживать и масштабировать код — особенно при росте проекта.\nЗатрудняется повторное использование кода между страницами.\nУхудшается читаемость и тестирование.\nМожет замедлять загрузку страницы, если скрипт большой.\nИспользуйте этот способ только для быстрых экспериментов, демонстраций или очень простых примеров.Правильный и стандартный способ — создать отдельный файл с расширением .js и подключить его к HTML:\nСоздайте файл script.js в той же папке, что и index.html.\nНапишите в нём JavaScript-код:\n// script.js\nalert(\"Это внешний JavaScript-файл!\");\ndocument.querySelector('h1').style.color = 'blue'; Подключите его в HTML перед закрывающим тегом &lt;/body&gt;:\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt; &lt;title&gt;Страница с внешним JS&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt; &lt;h1&gt;Привет!&lt;/h1&gt; &lt;script src=\"script.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nПреимущества:\nЧистый, организованный код.\nВозможность переиспользования одного файла на нескольких страницах.\nУпрощённая отладка и версионный контроль (Git).\nЛучшая производительность — браузер может кэшировать внешние скрипты.\nJavaScript следует подключать в самом конце тела HTML-документа, перед закрывающим тегом &lt;/body&gt;.Когда браузер встречает тег &lt;script&gt; во время парсинга HTML, он приостанавливает загрузку и разбор DOM-дерева, чтобы загрузить и выполнить скрипт. Если скрипт подключен в &lt;head&gt; или в начале &lt;body&gt;, а он пытается взаимодействовать с элементами, которые ещё не загружены — возникнет ошибка:&lt;head&gt; &lt;script src=\"script.js\"&gt;&lt;/script&gt; &lt;!-- ❌ Опасно! --&gt;\n&lt;/head&gt;\n&lt;body&gt; &lt;button id=\"myButton\"&gt;Нажми меня&lt;/button&gt;\n&lt;/body&gt;\nЕсли в script.js написано:document.getElementById('myButton').addEventListener('click', () =&gt; { alert('Клик!');\n});\n— то скрипт выполнится до того, как кнопка появится в DOM, и getElementById вернёт null. Результат — ошибка в консоли.&lt;body&gt; &lt;button id=\"myButton\"&gt;Нажми меня&lt;/button&gt; &lt;script src=\"script.js\"&gt;&lt;/script&gt; &lt;!-- ✅ Безопасно: DOM уже построен --&gt;\n&lt;/body&gt;\nТеперь браузер сначала полностью загрузит и отрисует все элементы страницы, а только потом выполнит скрипт — и все запросы к DOM будут успешными.\nБыстрая отрисовка контента: пользователь видит страницу быстрее, без задержек из-за загрузки скриптов.\nПредсказуемое поведение: код работает только тогда, когда всё, к чему он обращается, уже существует.\nСовместимость с современными практиками: так делают все крупные фреймворки и библиотеки. Если скрипт не зависит от DOM (например, модуль аналитики, который запускается сразу при загрузке страницы), его можно размещать в &lt;head&gt;.\nИспользование атрибута defer (в &lt;head&gt;) позволяет отложить выполнение скрипта до завершения парсинга HTML — это альтернатива размещению в конце, но требует понимания нюансов.\n&lt;head&gt; &lt;script src=\"script.js\" defer&gt;&lt;/script&gt; &lt;!-- ✅ Альтернатива, если нужно в head --&gt;\n&lt;/head&gt; ✅ Рекомендация: Всегда подключайте JavaScript-файлы перед закрывающим тегом &lt;/body&gt;, если только вы точно не знаете, что делаете и почему используете defer или async. Это — базовое правило надёжной и предсказуемой работы JavaScript на веб-странице.\nЧтобы реагировать на действия пользователя (например, нажатие кнопки), можно назначить обработчик события двумя способами: через атрибуты HTML или через JavaScript. Второй способ — единственный корректный для профессиональной разработки.Можно напрямую вписать JavaScript-код в атрибут onclick элемента:&lt;button onclick=\"alert('Кнопка нажата!')\"&gt;Нажми меня&lt;/button&gt;\nИли вызвать функцию:&lt;script&gt;\nfunction handleClick() { alert('Функция вызвана через атрибут!');\n}\n&lt;/script&gt; &lt;button onclick=\"handleClick()\"&gt;Нажми меня&lt;/button&gt;\nПочему это не рекомендуется:\nСмешивание ответственности: логика (JS) и структура (HTML) сливаются — нарушает принцип разделения.\nСложность поддержки: сложно отлаживать, тестировать и рефакторить код, особенно при росте проекта.\nУязвимость к ошибкам: если имя функции опечатано — ошибка не будет заметна до момента клика.\nНе масштабируемо: невозможно динамически добавлять/удалять обработчики, работать с несколькими элементами, использовать замыкания.\nПроблемы с безопасностью: в некоторых контекстах (CSP) использование onclick может быть заблокировано. ⚠️ Используйте этот способ только для быстрых экспериментов или учебных примеров — никогда в продакшене.\nПравильный и стандартный способ — назначать обработчики событий из JavaScript, после того как DOM загружен:&lt;button id=\"myButton\"&gt;Нажми меня&lt;/button&gt; &lt;script src=\"script.js\"&gt;&lt;/script&gt;\n// script.js\nconst button = document.getElementById('myButton'); button.addEventListener('click', function() { alert('Кнопка нажата через addEventListener!');\n});\nПреимущества:\nПолное разделение логики и разметки.\nВозможность назначать несколько обработчиков на один элемент.\nЛегко удалять обработчики через removeEventListener.\nПоддержка современных возможностей JS: стрелочные функции, async/await, замыкания.\nУдобно работать с динамически создаваемыми элементами.\nСовместимость с системами сборки, тестирования и фреймворками.\nДополнительно — лучшая практика:document.addEventListener('DOMContentLoaded', () =&gt; { const button = document.getElementById('myButton'); if (button) { button.addEventListener('click', () =&gt; { console.log('Клик обработан надёжно'); }); }\n});\nЭто гарантирует, что скрипт выполнится только после полной загрузки DOM, даже если он подключён в &lt;head&gt;.Представим, что у нас есть кнопка в HTML:&lt;button id=\"myButton\"&gt;Нажми меня&lt;/button&gt;\nМы хотим, чтобы при нажатии на неё в консоль браузера выводилось сообщение: \"Кнопка была нажата!\"\nУбедитесь, что у вас есть файл script.js, и он подключен в конце &lt;body&gt;:&lt;body&gt; &lt;button id=\"myButton\"&gt;Нажми меня&lt;/button&gt; &lt;script src=\"script.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\nВ script.js напишите:const button = document.getElementById('myButton');\nЭта строка говорит браузеру:\n👉 «Найди элемент на странице, у которого атрибут id=\"myButton\"» — и сохрани его в переменную button.Теперь добавьте эту строку:button.addEventListener('click', () =&gt; { console.log('Кнопка была нажата!');\n});\nЧто здесь происходит (без функций):\naddEventListener — это встроенная команда, которая привязывает действие к элементу.\n'click' — это тип события, которое мы хотим отслеживать (нажатие).\n() — это просто способ сказать: «здесь будет код, который выполнится при событии».\nconsole.log(...) — это команда, которая выводит текст в окно разработчика (не на экран). ✅ Всё, что внутри { } — это просто набор команд, которые должны сработать, когда пользователь кликнет.\nКогда пользователь кликает по кнопке — в консоли браузера появляется сообщение: Кнопка была нажата!\nЭтот шаблон — основа всего дальнейшего взаимодействия с пользователем. Его нужно запомнить как фиксированную формулу:\nэлемент.addEventListener('событие', () =&gt; { ... });\nИ заменять:\nэлемент — на нужный вам (button, input, div и т.д.)\n'событие' — на нужное (click, mouseover, keydown и т.д.)\n{ ... } — на то, что вы хотите сделать (вывести сообщение, изменить цвет, отправить данные)\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Как создать HTML-страницу","level":3,"id":"Как_создать_HTML-страницу_0"},{"heading":"Как использовать JavaScript на странице","level":3,"id":"Как_использовать_JavaScript_на_странице_0"},{"heading":"В том же HTML файле (не рекомендуется)","level":4,"id":"В_том_же_HTML_файле_(не_рекомендуется)_0"},{"heading":"Подключая внешний файл","level":4,"id":"Подключая_внешний_файл_0"},{"heading":"Где подключать JS — в конце или начале HTML-файла?","level":3,"id":"Где_подключать_JS_—_в_конце_или_начале_HTML-файла?_0"},{"heading":"Почему именно в конце?","level":4,"id":"Почему_именно_в_конце?_0"},{"heading":"Правильный способ:","level":4,"id":"Правильный_способ_0"},{"heading":"Дополнительные преимущества:","level":4,"id":"Дополнительные_преимущества_0"},{"heading":"Исключения:","level":4,"id":"Исключения_0"},{"heading":"Подключение логики обработки в кнопки","level":2,"id":"Подключение_логики_обработки_в_кнопки_0"},{"heading":"Через атрибут в кнопках (не рекомендуется)","level":3,"id":"Через_атрибут_в_кнопках_(не_рекомендуется)_0"},{"heading":"Через назначения обработчиков событий","level":3,"id":"Через_назначения_обработчиков_событий_0"},{"heading":"Добавление обработчика на кнопку — простой пример","level":3,"id":"Добавление_обработчика_на_кнопку_—_простой_пример_0"},{"heading":"Шаг 1: Подключите внешний JavaScript-файл","level":4,"id":"Шаг_1_Подключите_внешний_JavaScript-файл_0"},{"heading":"Шаг 2: Найдите кнопку в JavaScript","level":4,"id":"Шаг_2_Найдите_кнопку_в_JavaScript_0"},{"heading":"Шаг 3: Назначьте обработчик события","level":4,"id":"Шаг_3_Назначьте_обработчик_события_0"},{"heading":"Результат:","level":4,"id":"Результат_0"}],"links":["материалы/как-сделать/как-создавать-файлы-с-определённым-расширением.html"],"author":"","coverImageURL":"","fullURL":"материалы/подтемы/секция-1.-javascript/создание-своей-html-страницы.html","pathToRoot":"../../..","attachments":[],"createdTime":1757702645321,"modifiedTime":1757703277500,"sourceSize":15024,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Создание своей HTML страницы.md","exportPath":"материалы/подтемы/секция-1.-javascript/создание-своей-html-страницы.html","showInTree":true,"treeOrder":22,"backlinks":["лекции/секция-1.-javascript/тема-№3.-использование-javascript-в-браузере.html"],"type":"markdown"},"материалы/подтемы/секция-1.-javascript/что-такое-javascript,-история-появления.html":{"title":"Что такое JavaScript, история появления","icon":"","description":"JavaScript — это динамический, интерпретируемый язык программирования, изначально разработанный для добавления интерактивности на веб-страницы. Он является одним из трёх основных технологий веб-разработки (наряду с HTML и CSS) и позволяет управлять поведением веб-приложений: обрабатывать события, изменять содержимое страницы, взаимодействовать с сервером и многое другое. Сегодня JavaScript работает не только в браузерах, но и на стороне сервера, в мобильных приложениях, десктопных программах и даже в устройствах Интернета вещей.Это мультипарадигмальный язык, что означает, он поддерживает несколько стилей (парадигм) программирования, и разработчик может выбирать подход, наиболее подходящий для решения задачи. Основные поддерживаемые парадигмы: Функциональное программирование — функции являются первоклассными объектами, можно передавать их как аргументы, возвращать из других функций, создавать замыкания. Поддерживаются чистые функции, иммутабельность, высшие порядки (map, filter, reduce). Объектно-ориентированное программирование (ООП) — через прототипы и (с ES6) синтаксис классов реализуется инкапсуляция, наследование и полиморфизм. Объекты могут динамически расширяться, свойства и методы добавляются во время выполнения. Процедурное программирование — код может быть написан как последовательность инструкций без явного использования классов или функций высшего порядка, что удобно для простых скриптов. JavaScript обладает следующими ключевыми особенностями: Динамическая типизация — тип переменной определяется во время выполнения. Интерпретируемость — код выполняется без предварительной компиляции. Поддержка функционального и объектно-ориентированного стилей — позволяет писать код разными способами. Асинхронность — через колбэки, промисы и async/await обеспечивает неблокирующее выполнение операций. Кроссплатформенность — работает в браузерах, Node.js, React Native, Flutter (через плагины) и других средах. Пример простого кода на JavaScript: alert(\"Привет, мир!\"); let name = \"Анна\"; console.log(\"Здравствуйте, \" + name + \"!\"); Этот код отобразит всплывающее окно с сообщением, сохранит имя в переменную и выведет приветствие в консоль браузера.\nВеб-браузеры — интерактивные формы, анимации, динамическая загрузка контента. Фронтенд-фреймворки — React, Vue, Angular. Бэкенд — Node.js для серверной логики. Мобильные приложения — React Native, Ionic, NativeScript. Десктопные приложения — Electron. Игры — с использованием Canvas или WebGL. IoT — управление устройствами через JavaScript-среды (например, Johnny-Five).\nВ середине 1990-х годов веб был преимущественно статичным: HTML описывал структуру, CSS — оформление, но не было инструментов для взаимодействия с пользователем. Нужен был язык, который позволил бы браузерам выполнять простые действия — проверку форм, анимации, реакцию на клики — без обращения к серверу. Netscape Communications, одна из ведущих компаний того времени, решила создать такой язык.В 1995 году Брендан Эйх, работающий в Netscape, за десять дней разработал язык, первоначально названный Mocha, затем LiveScript, а в конце года — JavaScript. Название было выбрано в маркетинговых целях — чтобы ассоциироваться с популярным Java (несмотря на то, что языки принципиально различны). JavaScript был внедрён в браузер Netscape Navigator 2.0.В 1996 году Netscape передала язык в Ecma International для стандартизации. В 1997 году был принят стандарт ECMAScript 1 (ES1). С тех пор язык развивается под управлением Ecma TC39. Каждые 12 месяцев выпускается новая версия стандарта (ES6/ES2015, ES2020, ES2024 и т.д.), которые добавляют новые возможности: стрелочные функции, модули, классы, промисы, деструктуризацию и другие.Сегодня JavaScript — один из самых популярных языков программирования в мире (по данным Stack Overflow, GitHub и других источников). Его экосистема включает тысячи библиотек и фреймворков. Благодаря Node.js он стал универсальным языком, применяемым как на клиенте, так и на сервере. В мобильной разработке JavaScript используется в таких фреймворках, как React Native, позволяя создавать нативные приложения для iOS и Android на единой кодовой базе. Развитие продолжается: активно внедряются новые API, улучшается производительность движков (V8, SpiderMonkey), растёт поддержка TypeScript как надмножества JavaScript.","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Что такое JavaScript","level":2,"id":"Что_такое_JavaScript_0"},{"heading":"Основные характеристики","level":2,"id":"Основные_характеристики_0"},{"heading":"Где применяется JavaScript","level":2,"id":"Где_применяется_JavaScript_0"},{"heading":"История появления и развития JavaScript","level":2,"id":"История_появления_и_развития_JavaScript_0"},{"heading":"Предпосылки создания","level":3,"id":"Предпосылки_создания_0"},{"heading":"Создание языка","level":3,"id":"Создание_языка_0"},{"heading":"Стандартизация*","level":3,"id":"Стандартизация*_0"},{"heading":"Современное развитие","level":3,"id":"Современное_развитие_0"}],"links":[],"author":"","coverImageURL":"","fullURL":"материалы/подтемы/секция-1.-javascript/что-такое-javascript,-история-появления.html","pathToRoot":"../../..","attachments":[],"createdTime":1757695961822,"modifiedTime":1757696173734,"sourceSize":7899,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Что такое JavaScript, история появления.md","exportPath":"материалы/подтемы/секция-1.-javascript/что-такое-javascript,-история-появления.html","showInTree":true,"treeOrder":23,"backlinks":["лекции/секция-1.-javascript/тема-№2.-основы-javascript.html"],"type":"markdown"},"материалы/файлы/pasted-image-20250912205946.html":{"title":"Pasted image 20250912205946","icon":"","description":"<img src=\"материалы/файлы/pasted-image-20250912205946.png\" target=\"_self\">","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"","coverImageURL":".","fullURL":"материалы/файлы/pasted-image-20250912205946.html","pathToRoot":"../..","attachments":["материалы/файлы/pasted-image-20250912205946.html"],"createdTime":1757699986376,"modifiedTime":1757699986377,"sourceSize":102416,"sourcePath":"Материалы/Файлы/Pasted image 20250912205946.png","exportPath":"материалы/файлы/pasted-image-20250912205946.html","showInTree":true,"treeOrder":25,"backlinks":["index.html"],"type":"attachment"},"материалы/файлы/pasted-image-20250912212732.html":{"title":"Pasted image 20250912212732","icon":"","description":"<img src=\"материалы/файлы/pasted-image-20250912212732.png\" target=\"_self\">","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"","coverImageURL":".","fullURL":"материалы/файлы/pasted-image-20250912212732.html","pathToRoot":"../..","attachments":["материалы/файлы/pasted-image-20250912212732.html"],"createdTime":1757701652975,"modifiedTime":1757701652976,"sourceSize":105027,"sourcePath":"Материалы/Файлы/Pasted image 20250912212732.png","exportPath":"материалы/файлы/pasted-image-20250912212732.html","showInTree":true,"treeOrder":26,"backlinks":["материалы/подтемы/секция-1.-javascript/самое-простое-использование-javascript.html"],"type":"attachment"},"материалы/файлы/pasted-image-20250912212810.html":{"title":"Pasted image 20250912212810","icon":"","description":"<img src=\"материалы/файлы/pasted-image-20250912212810.png\" target=\"_self\">","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"","coverImageURL":".","fullURL":"материалы/файлы/pasted-image-20250912212810.html","pathToRoot":"../..","attachments":["материалы/файлы/pasted-image-20250912212810.html"],"createdTime":1757701690462,"modifiedTime":1757701690463,"sourceSize":4324,"sourcePath":"Материалы/Файлы/Pasted image 20250912212810.png","exportPath":"материалы/файлы/pasted-image-20250912212810.html","showInTree":true,"treeOrder":27,"backlinks":["материалы/подтемы/секция-1.-javascript/самое-простое-использование-javascript.html"],"type":"attachment"},"материалы/файлы/pasted-image-20250912212840.html":{"title":"Pasted image 20250912212840","icon":"","description":"<img src=\"материалы/файлы/pasted-image-20250912212840.png\" target=\"_self\">","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"","coverImageURL":".","fullURL":"материалы/файлы/pasted-image-20250912212840.html","pathToRoot":"../..","attachments":["материалы/файлы/pasted-image-20250912212840.html"],"createdTime":1757701720319,"modifiedTime":1757701720320,"sourceSize":11213,"sourcePath":"Материалы/Файлы/Pasted image 20250912212840.png","exportPath":"материалы/файлы/pasted-image-20250912212840.html","showInTree":true,"treeOrder":28,"backlinks":["материалы/подтемы/секция-1.-javascript/самое-простое-использование-javascript.html"],"type":"attachment"},"материалы/файлы/pasted-image-20250912214611.html":{"title":"Pasted image 20250912214611","icon":"","description":"<img src=\"материалы/файлы/pasted-image-20250912214611.png\" target=\"_self\">","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"","coverImageURL":".","fullURL":"материалы/файлы/pasted-image-20250912214611.html","pathToRoot":"../..","attachments":["материалы/файлы/pasted-image-20250912214611.html"],"createdTime":1757702771590,"modifiedTime":1757702771591,"sourceSize":21467,"sourcePath":"Материалы/Файлы/Pasted image 20250912214611.png","exportPath":"материалы/файлы/pasted-image-20250912214611.html","showInTree":true,"treeOrder":29,"backlinks":["материалы/как-сделать/как-создавать-файлы-с-определённым-расширением.html"],"type":"attachment"},"материалы/файлы/pasted-image-20250912214624.html":{"title":"Pasted image 20250912214624","icon":"","description":"<img src=\"материалы/файлы/pasted-image-20250912214624.png\" target=\"_self\">","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"","coverImageURL":".","fullURL":"материалы/файлы/pasted-image-20250912214624.html","pathToRoot":"../..","attachments":["материалы/файлы/pasted-image-20250912214624.html"],"createdTime":1757702784529,"modifiedTime":1757702784529,"sourceSize":46166,"sourcePath":"Материалы/Файлы/Pasted image 20250912214624.png","exportPath":"материалы/файлы/pasted-image-20250912214624.html","showInTree":true,"treeOrder":30,"backlinks":["материалы/как-сделать/как-создавать-файлы-с-определённым-расширением.html"],"type":"attachment"},"материалы/файлы/pasted-image-20250912214643.html":{"title":"Pasted image 20250912214643","icon":"","description":"<img src=\"материалы/файлы/pasted-image-20250912214643.png\" target=\"_self\">","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"","coverImageURL":".","fullURL":"материалы/файлы/pasted-image-20250912214643.html","pathToRoot":"../..","attachments":["материалы/файлы/pasted-image-20250912214643.html"],"createdTime":1757702803142,"modifiedTime":1757702803143,"sourceSize":29457,"sourcePath":"Материалы/Файлы/Pasted image 20250912214643.png","exportPath":"материалы/файлы/pasted-image-20250912214643.html","showInTree":true,"treeOrder":31,"backlinks":["материалы/как-сделать/как-создавать-файлы-с-определённым-расширением.html"],"type":"attachment"},"материалы/файлы/pasted-image-20250912214649.html":{"title":"Pasted image 20250912214649","icon":"","description":"<img src=\"материалы/файлы/pasted-image-20250912214649.png\" target=\"_self\">","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"","coverImageURL":".","fullURL":"материалы/файлы/pasted-image-20250912214649.html","pathToRoot":"../..","attachments":["материалы/файлы/pasted-image-20250912214649.html"],"createdTime":1757702809253,"modifiedTime":1757702809254,"sourceSize":4311,"sourcePath":"Материалы/Файлы/Pasted image 20250912214649.png","exportPath":"материалы/файлы/pasted-image-20250912214649.html","showInTree":true,"treeOrder":32,"backlinks":["материалы/как-сделать/как-создавать-файлы-с-определённым-расширением.html"],"type":"attachment"},"материалы/файлы/pasted-image-20250912214653.html":{"title":"Pasted image 20250912214653","icon":"","description":"<img src=\"материалы/файлы/pasted-image-20250912214653.png\" target=\"_self\">","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"","coverImageURL":".","fullURL":"материалы/файлы/pasted-image-20250912214653.html","pathToRoot":"../..","attachments":["материалы/файлы/pasted-image-20250912214653.html"],"createdTime":1757702813923,"modifiedTime":1757702813924,"sourceSize":3794,"sourcePath":"Материалы/Файлы/Pasted image 20250912214653.png","exportPath":"материалы/файлы/pasted-image-20250912214653.html","showInTree":true,"treeOrder":33,"backlinks":["материалы/как-сделать/как-создавать-файлы-с-определённым-расширением.html"],"type":"attachment"},"материалы/файлы/qrcod_72k5.html":{"title":"qrcod_72k5","icon":"","description":"<img src=\"материалы/файлы/qrcod_72k5.png\" target=\"_self\">","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"","coverImageURL":"материалы/файлы/qrcod_72k5.png","fullURL":"материалы/файлы/qrcod_72k5.html","pathToRoot":"../..","attachments":["материалы/файлы/qrcod_72k5.html"],"createdTime":1757700053755,"modifiedTime":1757700053762,"sourceSize":34656,"sourcePath":"Материалы/Файлы/qrcod_72k5.png","exportPath":"материалы/файлы/qrcod_72k5.html","showInTree":true,"treeOrder":34,"backlinks":["index.html"],"type":"attachment"}},"fileInfo":{"index.html":{"createdTime":1756485072721,"modifiedTime":1757700102590,"sourceSize":361,"sourcePath":"index.md","exportPath":"index.html","showInTree":true,"treeOrder":35,"backlinks":[],"type":"markdown","data":null},"site-lib/scripts/graph-wasm.wasm":{"createdTime":1756485288950,"modifiedTime":1756484808948.9563,"sourceSize":23655,"sourcePath":"","exportPath":"site-lib/scripts/graph-wasm.wasm","showInTree":false,"treeOrder":0,"backlinks":[],"type":"other","data":null},"site-lib/fonts/94f2f163d4b698242fef.otf":{"createdTime":1757704281100,"modifiedTime":1757704281100,"sourceSize":66800,"sourcePath":"","exportPath":"site-lib/fonts/94f2f163d4b698242fef.otf","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/72505e6a122c6acd5471.woff2":{"createdTime":1757704281100,"modifiedTime":1757704281100,"sourceSize":104232,"sourcePath":"","exportPath":"site-lib/fonts/72505e6a122c6acd5471.woff2","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/2d5198822ab091ce4305.woff2":{"createdTime":1757704281101,"modifiedTime":1757704281101,"sourceSize":104332,"sourcePath":"","exportPath":"site-lib/fonts/2d5198822ab091ce4305.woff2","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/c8ba52b05a9ef10f4758.woff2":{"createdTime":1757704281101,"modifiedTime":1757704281101,"sourceSize":98868,"sourcePath":"","exportPath":"site-lib/fonts/c8ba52b05a9ef10f4758.woff2","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/cb10ffd7684cd9836a05.woff2":{"createdTime":1757704281102,"modifiedTime":1757704281102,"sourceSize":106876,"sourcePath":"","exportPath":"site-lib/fonts/cb10ffd7684cd9836a05.woff2","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/b5f0f109bc88052d4000.woff2":{"createdTime":1757704281107,"modifiedTime":1757704281107,"sourceSize":105804,"sourcePath":"","exportPath":"site-lib/fonts/b5f0f109bc88052d4000.woff2","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/cbe0ae49c52c920fd563.woff2":{"createdTime":1757704281107,"modifiedTime":1757704281107,"sourceSize":106108,"sourcePath":"","exportPath":"site-lib/fonts/cbe0ae49c52c920fd563.woff2","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/535a6cf662596b3bd6a6.woff2":{"createdTime":1757704281108,"modifiedTime":1757704281108,"sourceSize":111708,"sourcePath":"","exportPath":"site-lib/fonts/535a6cf662596b3bd6a6.woff2","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/70cc7ff27245e82ad414.ttf":{"createdTime":1757704281108,"modifiedTime":1757704281108,"sourceSize":192740,"sourcePath":"","exportPath":"site-lib/fonts/70cc7ff27245e82ad414.ttf","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/454577c22304619db035.ttf":{"createdTime":1757704281115,"modifiedTime":1757704281115,"sourceSize":161376,"sourcePath":"","exportPath":"site-lib/fonts/454577c22304619db035.ttf","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/52ac8f3034507f1d9e53.ttf":{"createdTime":1757704281115,"modifiedTime":1757704281115,"sourceSize":191568,"sourcePath":"","exportPath":"site-lib/fonts/52ac8f3034507f1d9e53.ttf","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/05b618077343fbbd92b7.ttf":{"createdTime":1757704281121,"modifiedTime":1757704281121,"sourceSize":155288,"sourcePath":"","exportPath":"site-lib/fonts/05b618077343fbbd92b7.ttf","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/4bb6ac751d1c5478ff3a.woff2":{"createdTime":1757704281098,"modifiedTime":1757704281098,"sourceSize":7876,"sourcePath":"","exportPath":"site-lib/fonts/4bb6ac751d1c5478ff3a.woff2","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/media/6155340132a851f6089e.svg":{"createdTime":1757704281099,"modifiedTime":1757704281099,"sourceSize":315,"sourcePath":"","exportPath":"site-lib/media/6155340132a851f6089e.svg","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"site-lib/media/2308ab1944a6bfa5c5b8.svg":{"createdTime":1757704281099,"modifiedTime":1757704281099,"sourceSize":278,"sourcePath":"","exportPath":"site-lib/media/2308ab1944a6bfa5c5b8.svg","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"site-lib/html/file-tree-content.html":{"createdTime":1757704281375,"modifiedTime":1757704281375,"sourceSize":18322,"sourcePath":"","exportPath":"site-lib/html/file-tree-content.html","showInTree":false,"treeOrder":0,"backlinks":[],"type":"html","data":null},"site-lib/scripts/webpage.js":{"createdTime":1757333085126,"modifiedTime":1757333085126,"sourceSize":110729,"sourcePath":"","exportPath":"site-lib/scripts/webpage.js","showInTree":false,"treeOrder":0,"backlinks":[],"type":"script","data":null},"site-lib/scripts/graph-wasm.js":{"createdTime":1757333085126,"modifiedTime":1757333085126,"sourceSize":12885,"sourcePath":"","exportPath":"site-lib/scripts/graph-wasm.js","showInTree":false,"treeOrder":0,"backlinks":[],"type":"script","data":null},"site-lib/scripts/graph-render-worker.js":{"createdTime":1757333085126,"modifiedTime":1757333085126,"sourceSize":5681,"sourcePath":"","exportPath":"site-lib/scripts/graph-render-worker.js","showInTree":false,"treeOrder":0,"backlinks":[],"type":"script","data":null},"site-lib/media/favicon.png":{"createdTime":1757704280993,"modifiedTime":1757704280993,"sourceSize":1105,"sourcePath":"","exportPath":"site-lib/media/favicon.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"site-lib/styles/obsidian.css":{"createdTime":1757704281201,"modifiedTime":1757704281201,"sourceSize":198424,"sourcePath":"","exportPath":"site-lib/styles/obsidian.css","showInTree":false,"treeOrder":0,"backlinks":[],"type":"style","data":null},"site-lib/styles/global-variable-styles.css":{"createdTime":1757704281111,"modifiedTime":1757704281111,"sourceSize":305,"sourcePath":"","exportPath":"site-lib/styles/global-variable-styles.css","showInTree":false,"treeOrder":0,"backlinks":[],"type":"style","data":null},"site-lib/styles/main-styles.css":{"createdTime":1757333085155,"modifiedTime":1757333085155,"sourceSize":19521,"sourcePath":"","exportPath":"site-lib/styles/main-styles.css","showInTree":false,"treeOrder":0,"backlinks":[],"type":"style","data":null},"site-lib/rss.xml":{"createdTime":1757704285919,"modifiedTime":1757704285919,"sourceSize":84666,"sourcePath":"","exportPath":"site-lib/rss.xml","showInTree":false,"treeOrder":0,"backlinks":[],"type":"other","data":null},"site-lib/fonts/293fd13dbca5a3e450ef.woff2":{"createdTime":1757704281102,"modifiedTime":1757704281102,"sourceSize":105924,"sourcePath":"","exportPath":"site-lib/fonts/293fd13dbca5a3e450ef.woff2","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/085cb93e613ba3d40d2b.woff2":{"createdTime":1757704281102,"modifiedTime":1757704281102,"sourceSize":112184,"sourcePath":"","exportPath":"site-lib/fonts/085cb93e613ba3d40d2b.woff2","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"задания/секция-1.-javascript/практика-№1.-простая-веб-страница-с-html.html":{"createdTime":1757703305096,"modifiedTime":1757704246692,"sourceSize":3314,"sourcePath":"Задания/Секция 1. JavaScript/Практика №1. Простая веб-страница с HTML.md","exportPath":"задания/секция-1.-javascript/практика-№1.-простая-веб-страница-с-html.html","showInTree":true,"treeOrder":2,"backlinks":["лекции/секция-1.-javascript/тема-№3.-использование-javascript-в-браузере.html"],"type":"markdown","data":null},"лекции/секция-1.-javascript/тема-№1.-как-создаются-мобильные-приложения.html":{"createdTime":1757689990276,"modifiedTime":1757691620658,"sourceSize":608,"sourcePath":"Лекции/Секция 1. JavaScript/Тема №1. Как создаются мобильные приложения.md","exportPath":"лекции/секция-1.-javascript/тема-№1.-как-создаются-мобильные-приложения.html","showInTree":true,"treeOrder":5,"backlinks":["index.html"],"type":"markdown","data":null},"лекции/секция-1.-javascript/тема-№2.-основы-javascript.html":{"createdTime":1757690497891,"modifiedTime":1757698126020,"sourceSize":1252,"sourcePath":"Лекции/Секция 1. JavaScript/Тема №2. Основы JavaScript.md","exportPath":"лекции/секция-1.-javascript/тема-№2.-основы-javascript.html","showInTree":true,"treeOrder":6,"backlinks":["лекции/секция-1.-javascript/тема-№1.-как-создаются-мобильные-приложения.html"],"type":"markdown","data":null},"лекции/секция-1.-javascript/тема-№3.-использование-javascript-в-браузере.html":{"createdTime":1757695287075,"modifiedTime":1757703296437,"sourceSize":1462,"sourcePath":"Лекции/Секция 1. JavaScript/Тема №3. Использование JavaScript в браузере.md","exportPath":"лекции/секция-1.-javascript/тема-№3.-использование-javascript-в-браузере.html","showInTree":true,"treeOrder":7,"backlinks":["лекции/секция-1.-javascript/тема-№2.-основы-javascript.html"],"type":"markdown","data":null},"материалы/как-сделать/как-создавать-файлы-с-определённым-расширением.html":{"createdTime":1757702748102,"modifiedTime":1757702815939,"sourceSize":667,"sourcePath":"Материалы/Как сделать/Как создавать файлы с определённым расширением.md","exportPath":"материалы/как-сделать/как-создавать-файлы-с-определённым-расширением.html","showInTree":true,"treeOrder":10,"backlinks":["материалы/подтемы/секция-1.-javascript/создание-своей-html-страницы.html"],"type":"markdown","data":null},"материалы/подтемы/секция-1.-javascript/базовая-работа-с-элементами-веб-страницы-через-javascript.html":{"createdTime":1757702424568,"modifiedTime":1757702445919,"sourceSize":4668,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Базовая работа с элементами веб страницы через JavaScript.md","exportPath":"материалы/подтемы/секция-1.-javascript/базовая-работа-с-элементами-веб-страницы-через-javascript.html","showInTree":true,"treeOrder":13,"backlinks":["лекции/секция-1.-javascript/тема-№3.-использование-javascript-в-браузере.html"],"type":"markdown","data":null},"материалы/подтемы/секция-1.-javascript/базовое-понимание-синтаксиса-javascript.html":{"createdTime":1757696307916,"modifiedTime":1757696808206,"sourceSize":3470,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Базовое понимание синтаксиса JavaScript.md","exportPath":"материалы/подтемы/секция-1.-javascript/базовое-понимание-синтаксиса-javascript.html","showInTree":true,"treeOrder":14,"backlinks":["лекции/секция-1.-javascript/тема-№2.-основы-javascript.html"],"type":"markdown","data":null},"материалы/подтемы/секция-1.-javascript/основные-платформы-мобильных-приложений.html":{"createdTime":1757691090963,"modifiedTime":1757692705650,"sourceSize":16719,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Основные платформы мобильных приложений.md","exportPath":"материалы/подтемы/секция-1.-javascript/основные-платформы-мобильных-приложений.html","showInTree":true,"treeOrder":15,"backlinks":["лекции/секция-1.-javascript/тема-№1.-как-создаются-мобильные-приложения.html"],"type":"markdown","data":null},"материалы/подтемы/секция-1.-javascript/основные-понятия-веб-страницы.html":{"createdTime":1757701920807,"modifiedTime":1757702322322,"sourceSize":15642,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Основные понятия веб страницы.md","exportPath":"материалы/подтемы/секция-1.-javascript/основные-понятия-веб-страницы.html","showInTree":true,"treeOrder":16,"backlinks":["лекции/секция-1.-javascript/тема-№3.-использование-javascript-в-браузере.html"],"type":"markdown","data":null},"материалы/подтемы/секция-1.-javascript/основные-технологии-для-разработки-мобильных-приложений.html":{"createdTime":1757691441508,"modifiedTime":1757693475052,"sourceSize":15238,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Основные технологии для разработки мобильных приложений.md","exportPath":"материалы/подтемы/секция-1.-javascript/основные-технологии-для-разработки-мобильных-приложений.html","showInTree":true,"treeOrder":17,"backlinks":["лекции/секция-1.-javascript/тема-№1.-как-создаются-мобильные-приложения.html"],"type":"markdown","data":null},"материалы/подтемы/секция-1.-javascript/основные-типы-мобильных-приложений.html":{"createdTime":1757691037215,"modifiedTime":1757693227523,"sourceSize":15196,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Основные типы мобильных приложений.md","exportPath":"материалы/подтемы/секция-1.-javascript/основные-типы-мобильных-приложений.html","showInTree":true,"treeOrder":18,"backlinks":["лекции/секция-1.-javascript/тема-№1.-как-создаются-мобильные-приложения.html"],"type":"markdown","data":null},"материалы/подтемы/секция-1.-javascript/переменные-в-javascript.html":{"createdTime":1757696813511,"modifiedTime":1757698288236,"sourceSize":13815,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Переменные в JavaScript.md","exportPath":"материалы/подтемы/секция-1.-javascript/переменные-в-javascript.html","showInTree":true,"treeOrder":19,"backlinks":["материалы/подтемы/секция-1.-javascript/базовое-понимание-синтаксиса-javascript.html"],"type":"markdown","data":null},"материалы/подтемы/секция-1.-javascript/правила-наименования-переменных-в-javascript.html":{"createdTime":1757697173629,"modifiedTime":1757697313673,"sourceSize":4650,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Правила наименования переменных в JavaScript.md","exportPath":"материалы/подтемы/секция-1.-javascript/правила-наименования-переменных-в-javascript.html","showInTree":true,"treeOrder":20,"backlinks":["материалы/подтемы/секция-1.-javascript/переменные-в-javascript.html"],"type":"markdown","data":null},"материалы/подтемы/секция-1.-javascript/самое-простое-использование-javascript.html":{"createdTime":1757701551028,"modifiedTime":1757701721219,"sourceSize":3060,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Самое простое использование JavaScript.md","exportPath":"материалы/подтемы/секция-1.-javascript/самое-простое-использование-javascript.html","showInTree":true,"treeOrder":21,"backlinks":["лекции/секция-1.-javascript/тема-№3.-использование-javascript-в-браузере.html"],"type":"markdown","data":null},"материалы/подтемы/секция-1.-javascript/создание-своей-html-страницы.html":{"createdTime":1757702645321,"modifiedTime":1757703277500,"sourceSize":15024,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Создание своей HTML страницы.md","exportPath":"материалы/подтемы/секция-1.-javascript/создание-своей-html-страницы.html","showInTree":true,"treeOrder":22,"backlinks":["лекции/секция-1.-javascript/тема-№3.-использование-javascript-в-браузере.html"],"type":"markdown","data":null},"материалы/подтемы/секция-1.-javascript/что-такое-javascript,-история-появления.html":{"createdTime":1757695961822,"modifiedTime":1757696173734,"sourceSize":7899,"sourcePath":"Материалы/Подтемы/Секция 1. JavaScript/Что такое JavaScript, история появления.md","exportPath":"материалы/подтемы/секция-1.-javascript/что-такое-javascript,-история-появления.html","showInTree":true,"treeOrder":23,"backlinks":["лекции/секция-1.-javascript/тема-№2.-основы-javascript.html"],"type":"markdown","data":null},"материалы/файлы/pasted-image-20250912205946.png":{"createdTime":1757699986376,"modifiedTime":1757699986377,"sourceSize":102416,"sourcePath":"Материалы/Файлы/Pasted image 20250912205946.png","exportPath":"материалы/файлы/pasted-image-20250912205946.png","showInTree":true,"treeOrder":0,"backlinks":[],"type":"media","data":null},"материалы/файлы/pasted-image-20250912205946.html":{"createdTime":1757699986376,"modifiedTime":1757699986377,"sourceSize":102416,"sourcePath":"Материалы/Файлы/Pasted image 20250912205946.png","exportPath":"материалы/файлы/pasted-image-20250912205946.html","showInTree":true,"treeOrder":25,"backlinks":["index.html"],"type":"attachment","data":null},"материалы/файлы/pasted-image-20250912212732.png":{"createdTime":1757701652975,"modifiedTime":1757701652976,"sourceSize":105027,"sourcePath":"Материалы/Файлы/Pasted image 20250912212732.png","exportPath":"материалы/файлы/pasted-image-20250912212732.png","showInTree":true,"treeOrder":0,"backlinks":[],"type":"media","data":null},"материалы/файлы/pasted-image-20250912212732.html":{"createdTime":1757701652975,"modifiedTime":1757701652976,"sourceSize":105027,"sourcePath":"Материалы/Файлы/Pasted image 20250912212732.png","exportPath":"материалы/файлы/pasted-image-20250912212732.html","showInTree":true,"treeOrder":26,"backlinks":["материалы/подтемы/секция-1.-javascript/самое-простое-использование-javascript.html"],"type":"attachment","data":null},"материалы/файлы/pasted-image-20250912212810.png":{"createdTime":1757701690462,"modifiedTime":1757701690463,"sourceSize":4324,"sourcePath":"Материалы/Файлы/Pasted image 20250912212810.png","exportPath":"материалы/файлы/pasted-image-20250912212810.png","showInTree":true,"treeOrder":0,"backlinks":[],"type":"media","data":null},"материалы/файлы/pasted-image-20250912212810.html":{"createdTime":1757701690462,"modifiedTime":1757701690463,"sourceSize":4324,"sourcePath":"Материалы/Файлы/Pasted image 20250912212810.png","exportPath":"материалы/файлы/pasted-image-20250912212810.html","showInTree":true,"treeOrder":27,"backlinks":["материалы/подтемы/секция-1.-javascript/самое-простое-использование-javascript.html"],"type":"attachment","data":null},"материалы/файлы/pasted-image-20250912212840.png":{"createdTime":1757701720319,"modifiedTime":1757701720320,"sourceSize":11213,"sourcePath":"Материалы/Файлы/Pasted image 20250912212840.png","exportPath":"материалы/файлы/pasted-image-20250912212840.png","showInTree":true,"treeOrder":0,"backlinks":[],"type":"media","data":null},"материалы/файлы/pasted-image-20250912212840.html":{"createdTime":1757701720319,"modifiedTime":1757701720320,"sourceSize":11213,"sourcePath":"Материалы/Файлы/Pasted image 20250912212840.png","exportPath":"материалы/файлы/pasted-image-20250912212840.html","showInTree":true,"treeOrder":28,"backlinks":["материалы/подтемы/секция-1.-javascript/самое-простое-использование-javascript.html"],"type":"attachment","data":null},"материалы/файлы/pasted-image-20250912214611.png":{"createdTime":1757702771590,"modifiedTime":1757702771591,"sourceSize":21467,"sourcePath":"Материалы/Файлы/Pasted image 20250912214611.png","exportPath":"материалы/файлы/pasted-image-20250912214611.png","showInTree":true,"treeOrder":0,"backlinks":[],"type":"media","data":null},"материалы/файлы/pasted-image-20250912214611.html":{"createdTime":1757702771590,"modifiedTime":1757702771591,"sourceSize":21467,"sourcePath":"Материалы/Файлы/Pasted image 20250912214611.png","exportPath":"материалы/файлы/pasted-image-20250912214611.html","showInTree":true,"treeOrder":29,"backlinks":["материалы/как-сделать/как-создавать-файлы-с-определённым-расширением.html"],"type":"attachment","data":null},"материалы/файлы/pasted-image-20250912214624.png":{"createdTime":1757702784529,"modifiedTime":1757702784529,"sourceSize":46166,"sourcePath":"Материалы/Файлы/Pasted image 20250912214624.png","exportPath":"материалы/файлы/pasted-image-20250912214624.png","showInTree":true,"treeOrder":0,"backlinks":[],"type":"media","data":null},"материалы/файлы/pasted-image-20250912214624.html":{"createdTime":1757702784529,"modifiedTime":1757702784529,"sourceSize":46166,"sourcePath":"Материалы/Файлы/Pasted image 20250912214624.png","exportPath":"материалы/файлы/pasted-image-20250912214624.html","showInTree":true,"treeOrder":30,"backlinks":["материалы/как-сделать/как-создавать-файлы-с-определённым-расширением.html"],"type":"attachment","data":null},"материалы/файлы/pasted-image-20250912214643.png":{"createdTime":1757702803142,"modifiedTime":1757702803143,"sourceSize":29457,"sourcePath":"Материалы/Файлы/Pasted image 20250912214643.png","exportPath":"материалы/файлы/pasted-image-20250912214643.png","showInTree":true,"treeOrder":0,"backlinks":[],"type":"media","data":null},"материалы/файлы/pasted-image-20250912214643.html":{"createdTime":1757702803142,"modifiedTime":1757702803143,"sourceSize":29457,"sourcePath":"Материалы/Файлы/Pasted image 20250912214643.png","exportPath":"материалы/файлы/pasted-image-20250912214643.html","showInTree":true,"treeOrder":31,"backlinks":["материалы/как-сделать/как-создавать-файлы-с-определённым-расширением.html"],"type":"attachment","data":null},"материалы/файлы/pasted-image-20250912214649.png":{"createdTime":1757702809253,"modifiedTime":1757702809254,"sourceSize":4311,"sourcePath":"Материалы/Файлы/Pasted image 20250912214649.png","exportPath":"материалы/файлы/pasted-image-20250912214649.png","showInTree":true,"treeOrder":0,"backlinks":[],"type":"media","data":null},"материалы/файлы/pasted-image-20250912214649.html":{"createdTime":1757702809253,"modifiedTime":1757702809254,"sourceSize":4311,"sourcePath":"Материалы/Файлы/Pasted image 20250912214649.png","exportPath":"материалы/файлы/pasted-image-20250912214649.html","showInTree":true,"treeOrder":32,"backlinks":["материалы/как-сделать/как-создавать-файлы-с-определённым-расширением.html"],"type":"attachment","data":null},"материалы/файлы/pasted-image-20250912214653.png":{"createdTime":1757702813923,"modifiedTime":1757702813924,"sourceSize":3794,"sourcePath":"Материалы/Файлы/Pasted image 20250912214653.png","exportPath":"материалы/файлы/pasted-image-20250912214653.png","showInTree":true,"treeOrder":0,"backlinks":[],"type":"media","data":null},"материалы/файлы/pasted-image-20250912214653.html":{"createdTime":1757702813923,"modifiedTime":1757702813924,"sourceSize":3794,"sourcePath":"Материалы/Файлы/Pasted image 20250912214653.png","exportPath":"материалы/файлы/pasted-image-20250912214653.html","showInTree":true,"treeOrder":33,"backlinks":["материалы/как-сделать/как-создавать-файлы-с-определённым-расширением.html"],"type":"attachment","data":null},"материалы/файлы/qrcod_72k5.png":{"createdTime":1757700053755,"modifiedTime":1757700053762,"sourceSize":34656,"sourcePath":"Материалы/Файлы/qrcod_72k5.png","exportPath":"материалы/файлы/qrcod_72k5.png","showInTree":true,"treeOrder":0,"backlinks":[],"type":"media","data":null},"материалы/файлы/qrcod_72k5.html":{"createdTime":1757700053755,"modifiedTime":1757700053762,"sourceSize":34656,"sourcePath":"Материалы/Файлы/qrcod_72k5.png","exportPath":"материалы/файлы/qrcod_72k5.html","showInTree":true,"treeOrder":34,"backlinks":["index.html"],"type":"attachment","data":null}},"sourceToTarget":{"index.md":"index.html","":"site-lib/rss.xml","Pasted image 20250906080710.png":"pasted-image-20250906080710.html","Задания/Секция 1. JavaScript/Практика №1. Простая веб-страница с HTML.md":"задания/секция-1.-javascript/практика-№1.-простая-веб-страница-с-html.html","Лекции/Секция 1. JavaScript/Тема №1. Как создаются мобильные приложения.md":"лекции/секция-1.-javascript/тема-№1.-как-создаются-мобильные-приложения.html","Лекции/Секция 1. JavaScript/Тема №2. Основы JavaScript.md":"лекции/секция-1.-javascript/тема-№2.-основы-javascript.html","Лекции/Секция 1. JavaScript/Тема №3. Использование JavaScript в браузере.md":"лекции/секция-1.-javascript/тема-№3.-использование-javascript-в-браузере.html","Материалы/Как сделать/Как создавать файлы с определённым расширением.md":"материалы/как-сделать/как-создавать-файлы-с-определённым-расширением.html","Материалы/Подтемы/Секция 1. JavaScript/Базовая работа с элементами веб страницы через JavaScript.md":"материалы/подтемы/секция-1.-javascript/базовая-работа-с-элементами-веб-страницы-через-javascript.html","Материалы/Подтемы/Секция 1. JavaScript/Базовое понимание синтаксиса JavaScript.md":"материалы/подтемы/секция-1.-javascript/базовое-понимание-синтаксиса-javascript.html","Материалы/Подтемы/Секция 1. JavaScript/Основные платформы мобильных приложений.md":"материалы/подтемы/секция-1.-javascript/основные-платформы-мобильных-приложений.html","Материалы/Подтемы/Секция 1. JavaScript/Основные понятия веб страницы.md":"материалы/подтемы/секция-1.-javascript/основные-понятия-веб-страницы.html","Материалы/Подтемы/Секция 1. JavaScript/Основные технологии для разработки мобильных приложений.md":"материалы/подтемы/секция-1.-javascript/основные-технологии-для-разработки-мобильных-приложений.html","Материалы/Подтемы/Секция 1. JavaScript/Основные типы мобильных приложений.md":"материалы/подтемы/секция-1.-javascript/основные-типы-мобильных-приложений.html","Материалы/Подтемы/Секция 1. JavaScript/Переменные в JavaScript.md":"материалы/подтемы/секция-1.-javascript/переменные-в-javascript.html","Материалы/Подтемы/Секция 1. JavaScript/Правила наименования переменных в JavaScript.md":"материалы/подтемы/секция-1.-javascript/правила-наименования-переменных-в-javascript.html","Материалы/Подтемы/Секция 1. JavaScript/Самое простое использование JavaScript.md":"материалы/подтемы/секция-1.-javascript/самое-простое-использование-javascript.html","Материалы/Подтемы/Секция 1. JavaScript/Создание своей HTML страницы.md":"материалы/подтемы/секция-1.-javascript/создание-своей-html-страницы.html","Материалы/Подтемы/Секция 1. JavaScript/Что такое JavaScript, история появления.md":"материалы/подтемы/секция-1.-javascript/что-такое-javascript,-история-появления.html","Материалы/Файлы/Pasted image 20250912205946.png":"материалы/файлы/pasted-image-20250912205946.html","Материалы/Файлы/Pasted image 20250912212732.png":"материалы/файлы/pasted-image-20250912212732.html","Материалы/Файлы/Pasted image 20250912212810.png":"материалы/файлы/pasted-image-20250912212810.html","Материалы/Файлы/Pasted image 20250912212840.png":"материалы/файлы/pasted-image-20250912212840.html","Материалы/Файлы/Pasted image 20250912214611.png":"материалы/файлы/pasted-image-20250912214611.html","Материалы/Файлы/Pasted image 20250912214624.png":"материалы/файлы/pasted-image-20250912214624.html","Материалы/Файлы/Pasted image 20250912214643.png":"материалы/файлы/pasted-image-20250912214643.html","Материалы/Файлы/Pasted image 20250912214649.png":"материалы/файлы/pasted-image-20250912214649.html","Материалы/Файлы/Pasted image 20250912214653.png":"материалы/файлы/pasted-image-20250912214653.html","Материалы/Файлы/qrcod_72k5.png":"материалы/файлы/qrcod_72k5.html"},"featureOptions":{"backlinks":{"featureId":"backlinks","enabled":true,"unavailable":false,"alwaysEnabled":false,"hideSettingsButton":false,"featurePlacement":{"selector":".footer","type":"start","info_selector":{"show":true,"name":"","description":"CSS selector for an element. The feature will be placed relative to this element.","placeholder":""},"info_type":{"show":true,"name":"","description":"Will this feature be placed before, after, or inside (at the beggining or end).","placeholder":"","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_featurePlacement":{"show":true,"name":"","description":"Where to place this feature on the page. (Relative to the selector)","placeholder":""},"displayTitle":"Backlinks","info_displayTitle":{"show":true,"name":"","description":"Descriptive title to show above the feature","placeholder":""}},"tags":{"featureId":"tags","enabled":true,"unavailable":false,"alwaysEnabled":false,"hideSettingsButton":false,"featurePlacement":{"selector":".header .data-bar","type":"end","info_selector":{"show":true,"name":"","description":"CSS selector for an element. The feature will be placed relative to this element.","placeholder":""},"info_type":{"show":true,"name":"","description":"Will this feature be placed before, after, or inside (at the beggining or end).","placeholder":"","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_featurePlacement":{"show":true,"name":"","description":"Where to place this feature on the page. (Relative to the selector)","placeholder":""},"displayTitle":"","info_displayTitle":{"show":true,"name":"","description":"Descriptive title to show above the feature","placeholder":""},"showInlineTags":true,"showFrontmatterTags":true,"info_showInlineTags":{"show":true,"name":"","description":"Show tags defined inside the document at the top of the page.","placeholder":""},"info_showFrontmatterTags":{"show":true,"name":"","description":"Show tags defined in the frontmatter of the document at the top of the page.","placeholder":""}},"alias":{"featureId":"aliases","enabled":true,"unavailable":false,"alwaysEnabled":false,"hideSettingsButton":false,"featurePlacement":{"selector":".header .data-bar","type":"start","info_selector":{"show":true,"name":"","description":"CSS selector for an element. The feature will be placed relative to this element.","placeholder":""},"info_type":{"show":true,"name":"","description":"Will this feature be placed before, after, or inside (at the beggining or end).","placeholder":"","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_featurePlacement":{"show":true,"name":"","description":"Where to place this feature on the page. (Relative to the selector)","placeholder":""},"displayTitle":"Aliases","info_displayTitle":{"show":true,"name":"","description":"Descriptive title to show above the feature","placeholder":""}},"properties":{"featureId":"properties","enabled":true,"unavailable":false,"alwaysEnabled":false,"hideSettingsButton":false,"featurePlacement":{"selector":".header","type":"start","info_selector":{"show":true,"name":"","description":"CSS selector for an element. The feature will be placed relative to this element.","placeholder":""},"info_type":{"show":true,"name":"","description":"Will this feature be placed before, after, or inside (at the beggining or end).","placeholder":"","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_featurePlacement":{"show":true,"name":"","description":"Where to place this feature on the page. (Relative to the selector)","placeholder":""},"displayTitle":"Properties","info_displayTitle":{"show":true,"name":"","description":"Descriptive title to show above the feature","placeholder":""},"info_hideProperties":{"show":true,"name":"","description":"A list of properties to hide from the properties view","placeholder":""}},"fileNavigation":{"featureId":"file-navigation","enabled":true,"unavailable":false,"alwaysEnabled":false,"hideSettingsButton":false,"featurePlacement":{"selector":"#left-sidebar-content","type":"end","info_selector":{"show":true,"name":"","description":"CSS selector for an element. The feature will be placed relative to this element.","placeholder":""},"info_type":{"show":true,"name":"","description":"Will this feature be placed before, after, or inside (at the beggining or end).","placeholder":"","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_featurePlacement":{"show":true,"name":"","description":"Where to place this feature on the page. (Relative to the selector)","placeholder":""},"info_includePath":{"show":false,"name":"","description":"","placeholder":""},"showCustomIcons":false,"showDefaultFolderIcons":false,"showDefaultFileIcons":false,"defaultFolderIcon":"lucide//folder","defaultFileIcon":"lucide//file","defaultMediaIcon":"lucide//file-image","exposeStartingPath":true,"info_showCustomIcons":{"show":true,"name":"","description":"Show custom icons for files and folders","placeholder":""},"info_showDefaultFolderIcons":{"show":true,"name":"","description":"Show a default icon of a folder for every folder in the tree","placeholder":""},"info_showDefaultFileIcons":{"show":true,"name":"","description":"Show a default icon of a file for every file in the tree","placeholder":""},"info_defaultFolderIcon":{"show":true,"name":"","description":"The icon to use for folders. Prefix with 'lucide//' to use a Lucide icon","placeholder":""},"info_defaultFileIcon":{"show":true,"name":"","description":"The icon to use for files. Prefix with 'lucide//' to use a Lucide icon","placeholder":""},"info_defaultMediaIcon":{"show":true,"name":"","description":"The icon to use for media files. Prefix with 'lucide//' to use a Lucide icon","placeholder":""},"info_exposeStartingPath":{"show":true,"name":"","description":"Whether or not to show the current file in the file tree when the page is first loaded","placeholder":""},"includePath":"site-lib/html/file-tree.html"},"search":{"featureId":"search","enabled":true,"unavailable":false,"alwaysEnabled":false,"hideSettingsButton":false,"featurePlacement":{"selector":"#left-sidebar .topbar-content","type":"start","info_selector":{"show":true,"name":"","description":"CSS selector for an element. The feature will be placed relative to this element.","placeholder":""},"info_type":{"show":true,"name":"","description":"Will this feature be placed before, after, or inside (at the beggining or end).","placeholder":"","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_featurePlacement":{"show":true,"name":"","description":"Where to place this feature on the page. (Relative to the selector)","placeholder":""},"displayTitle":"Search...","info_displayTitle":{"show":true,"name":"","description":"Descriptive title to show above the feature","placeholder":""}},"outline":{"featureId":"outline","enabled":true,"unavailable":false,"alwaysEnabled":false,"hideSettingsButton":false,"featurePlacement":{"selector":"#right-sidebar-content","type":"end","info_selector":{"show":true,"name":"","description":"CSS selector for an element. The feature will be placed relative to this element.","placeholder":""},"info_type":{"show":true,"name":"","description":"Will this feature be placed before, after, or inside (at the beggining or end).","placeholder":"","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_featurePlacement":{"show":true,"name":"","description":"Where to place this feature on the page. (Relative to the selector)","placeholder":""},"displayTitle":"Outline","info_displayTitle":{"show":true,"name":"","description":"Descriptive title to show above the feature","placeholder":""},"startCollapsed":false,"minCollapseDepth":0,"info_startCollapsed":{"show":true,"name":"","description":"Should the outline start collapsed?","placeholder":""},"info_minCollapseDepth":{"show":true,"name":"","description":"Only allow outline items to be collapsed if they are at least this many levels deep in the tree.","placeholder":"","dropdownOptions":{"1":1,"2":2,"No Collapse":100}}},"themeToggle":{"featureId":"theme-toggle","enabled":true,"unavailable":false,"alwaysEnabled":false,"hideSettingsButton":false,"featurePlacement":{"selector":"#right-sidebar .topbar-content","type":"start","info_selector":{"show":true,"name":"","description":"CSS selector for an element. The feature will be placed relative to this element.","placeholder":""},"info_type":{"show":true,"name":"","description":"Will this feature be placed before, after, or inside (at the beggining or end).","placeholder":"","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_featurePlacement":{"show":true,"name":"","description":"Where to place this feature on the page. (Relative to the selector)","placeholder":""},"displayTitle":"","info_displayTitle":{"show":true,"name":"","description":"Descriptive title to show above the feature","placeholder":""}},"graphView":{"featureId":"graph-view","enabled":true,"unavailable":false,"alwaysEnabled":false,"hideSettingsButton":false,"featurePlacement":{"selector":"#right-sidebar-content","type":"start","info_selector":{"show":true,"name":"","description":"CSS selector for an element. The feature will be placed relative to this element.","placeholder":""},"info_type":{"show":true,"name":"","description":"Will this feature be placed before, after, or inside (at the beggining or end).","placeholder":"","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_featurePlacement":{"show":true,"name":"","description":"Where to place this feature on the page. (Relative to the selector)","placeholder":""},"displayTitle":"Graph View","info_displayTitle":{"show":true,"name":"","description":"Descriptive title to show above the feature","placeholder":""},"showOrphanNodes":true,"showAttachments":false,"allowGlobalGraph":true,"allowExpand":true,"attractionForce":1,"linkLength":15,"repulsionForce":80,"centralForce":2,"edgePruning":100,"minNodeRadius":3,"maxNodeRadius":7,"info_showOrphanNodes":{"show":true,"name":"","description":"Show nodes that are not connected to any other nodes.","placeholder":""},"info_showAttachments":{"show":true,"name":"","description":"Show attachments like images and PDFs as nodes in the graph.","placeholder":""},"info_allowGlobalGraph":{"show":true,"name":"","description":"Allow the user to view the global graph of all nodes.","placeholder":""},"info_allowExpand":{"show":true,"name":"","description":"Allow the user to pop-out the graph view to take up the whole screen","placeholder":""},"info_attractionForce":{"show":true,"name":"","description":"How much should linked nodes attract each other? This will make the graph appear more clustered.","placeholder":""},"info_linkLength":{"show":true,"name":"","description":"How long should the links between nodes be? The shorter the links the more connected nodes will cluster together.","placeholder":""},"info_repulsionForce":{"show":true,"name":"","description":"How much should nodes repel each other? This will make disconnected parts more spread out.","placeholder":""},"info_centralForce":{"show":true,"name":"","description":"How much should nodes be attracted to the center? This will make the graph appear more dense and circular.","placeholder":""},"info_edgePruning":{"show":true,"name":"","description":"Edges with a length above this threshold will not be rendered, however they will still contribute to the simulation. This can help large tangled graphs look more organised. Hovering over a node will still display these links.","placeholder":""},"info_minNodeRadius":{"show":true,"name":"","description":"How small should the smallest nodes be? The smaller a node is the less it will attract other nodes.","placeholder":""},"info_maxNodeRadius":{"show":true,"name":"","description":"How large should the largest nodes be? Nodes are sized by how many links they have. The larger a node is the more it will attract other nodes. This can be used to create a good grouping around the most important nodes.","placeholder":""}},"sidebar":{"featureId":"sidebar","enabled":true,"unavailable":false,"alwaysEnabled":false,"hideSettingsButton":false,"allowResizing":true,"allowCollapsing":true,"rightDefaultWidth":"20em","leftDefaultWidth":"20em","info_allowResizing":{"show":true,"name":"","description":"Whether or not to allow the sidebars to be resized","placeholder":""},"info_allowCollapsing":{"show":true,"name":"","description":"Whether or not to allow the sidebars to be collapsed","placeholder":""},"info_rightDefaultWidth":{"show":true,"name":"","description":"The default width of the right sidebar","placeholder":""},"info_leftDefaultWidth":{"show":true,"name":"","description":"The default width of the left sidebar","placeholder":""}},"customHead":{"featureId":"custom-head","enabled":true,"unavailable":false,"alwaysEnabled":false,"hideSettingsButton":false,"featurePlacement":{"selector":"head","type":"end","info_selector":{"show":true,"name":"","description":"CSS selector for an element. The feature will be placed relative to this element.","placeholder":""},"info_type":{"show":true,"name":"","description":"Will this feature be placed before, after, or inside (at the beggining or end).","placeholder":"","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_featurePlacement":{"show":true,"name":"","description":"Where to place this feature on the page. (Relative to the selector)","placeholder":""},"info_includePath":{"show":false,"name":"","description":"","placeholder":""},"sourcePath":"","info_sourcePath":{"show":true,"name":"","description":"The local path to the source .html file which will be included.","placeholder":"","fileInputOptions":{"makeRelativeToVault":true,"browseButton":true}},"includePath":"site-lib/html/custom-head.html"},"document":{"featureId":"obsidian-document","enabled":true,"unavailable":false,"alwaysEnabled":true,"hideSettingsButton":false,"allowFoldingLists":true,"allowFoldingHeadings":true,"documentWidth":"40em","info_allowFoldingLists":{"show":true,"name":"","description":"Whether or not to allow lists to be folded","placeholder":""},"info_allowFoldingHeadings":{"show":true,"name":"","description":"Whether or not to allow headings to be folded","placeholder":""},"info_documentWidth":{"show":true,"name":"","description":"The width of the document","placeholder":""}},"rss":{"featureId":"rss","enabled":true,"unavailable":false,"alwaysEnabled":false,"hideSettingsButton":false,"siteUrl":"","authorName":"","info_siteUrl":{"show":true,"name":"","description":"The url that this site will be hosted at","placeholder":"https://example.com/mysite"},"info_authorName":{"show":true,"name":"","description":"The name of the author of the site","placeholder":""}},"linkPreview":{"featureId":"link-preview","enabled":true,"unavailable":false,"alwaysEnabled":false,"hideSettingsButton":true}},"modifiedTime":1757704281209,"siteName":"MobileDevTisbi","vaultName":"MobileDevTisbi","exportRoot":"","baseURL":"","pluginVersion":"1.9.2","themeName":"","bodyClasses":"publish css-settings-manager styled-scrollbars show-inline-title show-ribbon is-focused","hasFavicon":false}